
NAS_Loopback_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08006478  08006478  00016478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800656c  0800656c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800656c  0800656c  0001656c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006574  08006574  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006574  08006574  00016574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006578  08006578  00016578  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800657c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  2000006c  080065e8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  080065e8  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012438  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000288e  00000000  00000000  00032517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00034da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8f  00000000  00000000  00035ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175e2  00000000  00000000  00036c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001520e  00000000  00000000  0004e241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091a2d  00000000  00000000  0006344f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e28  00000000  00000000  000f4e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000f9ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006460 	.word	0x08006460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006460 	.word	0x08006460

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Codec_Init>:
#include "main.h"
#include "stm32f4xx_it.h"
#include "TLV320AIC3101_Codec.h"

HAL_StatusTypeDef Codec_Init(Codec *codec, I2C_HandleTypeDef *I2Chandle){
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]

	//assign I2C handler
	codec->I2Chandle = I2Chandle;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;


	//(1) software reset
	status = Codec_WriteRegister(codec, 0x01, 0b10000000);
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	2101      	movs	r1, #1
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 f8ab 	bl	80006ec <Codec_WriteRegister>
 8000596:	4603      	mov	r3, r0
 8000598:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800059a:	200a      	movs	r0, #10
 800059c:	f000 ffd4 	bl	8001548 <HAL_Delay>

	//(2) codec ADC/DAC sample rate
	status = Codec_WriteRegister(codec, 0x02, 0b00000000);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2102      	movs	r1, #2
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f8a1 	bl	80006ec <Codec_WriteRegister>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73fb      	strb	r3, [r7, #15]

	//(3)We want fs_ref=48kHz, MCLK = 12.288 MHz, CODEC_CLK=fs_ref*256=12.288MHz, with  CODEC_CLK = MCLK*2/Q -> Q=2
	//status = Codec_WriteRegister(codec, 0x03, 0b01000000);
	status = Codec_WriteRegister(codec, 0x03, 0b00010001);
 80005ae:	2211      	movs	r2, #17
 80005b0:	2103      	movs	r1, #3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f89a 	bl	80006ec <Codec_WriteRegister>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73fb      	strb	r3, [r7, #15]

	//(7) fs=48kHz, ADC-DAC dual rate OFF, left-DAC data path plays left-channel input data, right-DAC data path plays right-channel input data
	status = Codec_WriteRegister(codec, 0x07, 0b00001010);
 80005bc:	220a      	movs	r2, #10
 80005be:	2107      	movs	r1, #7
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 f893 	bl	80006ec <Codec_WriteRegister>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73fb      	strb	r3, [r7, #15]

	//(12) Input HP filter disabled, DAC filters bypassed
	status = Codec_WriteRegister(codec, 0x0c, 0b00000000);
 80005ca:	2200      	movs	r2, #0
 80005cc:	210c      	movs	r1, #12
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f88c 	bl	80006ec <Codec_WriteRegister>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]

	//(14) high-power outputs ac-coupled driver configuration, pseudo-differential
	status = Codec_WriteRegister(codec, 0x0e, 0b10001000);
 80005d8:	2288      	movs	r2, #136	; 0x88
 80005da:	210e      	movs	r1, #14
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f885 	bl	80006ec <Codec_WriteRegister>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]

	//(15) un-mute left ADC PGA (6dB) (TESTED, WITH HIGHER GAIN SATURATES)
	status = Codec_WriteRegister(codec, 0x0f, 0b00001100);
 80005e6:	220c      	movs	r2, #12
 80005e8:	210f      	movs	r1, #15
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f87e 	bl	80006ec <Codec_WriteRegister>
 80005f0:	4603      	mov	r3, r0
 80005f2:	73fb      	strb	r3, [r7, #15]

	//(16) un-mute right ADC PGA (6dB) (TESTED, WITH HIGHER GAIN SATURATES)
	status = Codec_WriteRegister(codec, 0x10, 0b00001100);
 80005f4:	220c      	movs	r2, #12
 80005f6:	2110      	movs	r1, #16
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f877 	bl	80006ec <Codec_WriteRegister>
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]

	//LET'S USE JACK CH2 FOR THE TESTS!
	//(17) MIC2L connected to LEFT ADC (0dB), MIC2R not connected to LEFT ADC
	status = Codec_WriteRegister(codec, 0x11, 0b00001111);
 8000602:	220f      	movs	r2, #15
 8000604:	2111      	movs	r1, #17
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f870 	bl	80006ec <Codec_WriteRegister>
 800060c:	4603      	mov	r3, r0
 800060e:	73fb      	strb	r3, [r7, #15]
	//(18) MIC2R connected to RIGTH ADC (0dB), MIC2L not connected to RIGHT ADC
	status = Codec_WriteRegister(codec, 0x12, 0b11110000);
 8000610:	22f0      	movs	r2, #240	; 0xf0
 8000612:	2112      	movs	r1, #18
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f869 	bl	80006ec <Codec_WriteRegister>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]

	//(19) Turn ON LEFT ADC - PGA soft stepping disabled
	status = Codec_WriteRegister(codec, 0x13, 0b01111111);
 800061e:	227f      	movs	r2, #127	; 0x7f
 8000620:	2113      	movs	r1, #19
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f862 	bl	80006ec <Codec_WriteRegister>
 8000628:	4603      	mov	r3, r0
 800062a:	73fb      	strb	r3, [r7, #15]

	//(22) Turn ON RIGHT ADC - PGA soft stepping disabled
	status = Codec_WriteRegister(codec, 0x16, 0b01111111);
 800062c:	227f      	movs	r2, #127	; 0x7f
 800062e:	2116      	movs	r1, #22
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f85b 	bl	80006ec <Codec_WriteRegister>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]

	//(37) Turn ON RIGHT and LEFT DACs, HPLCOM set as independent VCM output
	status = Codec_WriteRegister(codec, 0x25, 0b11010000);
 800063a:	22d0      	movs	r2, #208	; 0xd0
 800063c:	2125      	movs	r1, #37	; 0x25
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f854 	bl	80006ec <Codec_WriteRegister>
 8000644:	4603      	mov	r3, r0
 8000646:	73fb      	strb	r3, [r7, #15]
	//status = Codec_WriteRegister(codec, 0x25, 0b11010000);//Gieff

	//(38) HPRCOM set as independent VCM output, short circuit protection activated with curr limit
	status = Codec_WriteRegister(codec, 0x26, 0b00001100);
 8000648:	220c      	movs	r2, #12
 800064a:	2126      	movs	r1, #38	; 0x26
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f000 f84d 	bl	80006ec <Codec_WriteRegister>
 8000652:	4603      	mov	r3, r0
 8000654:	73fb      	strb	r3, [r7, #15]
	//status = Codec_WriteRegister(codec, 0x26, 0b00100000);//Gieff

	//(40) output common-mode voltage = 1.65 V - output soft stepping each fs
	status = Codec_WriteRegister(codec, 0x28, 0b10000010);
 8000656:	2282      	movs	r2, #130	; 0x82
 8000658:	2128      	movs	r1, #40	; 0x28
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f846 	bl	80006ec <Codec_WriteRegister>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]

	//(41) set DAC path, DAC_L2 to left high power, DAC_R2 to right high power, independent volume
	status = Codec_WriteRegister(codec, 0x29, 0b10100000);
 8000664:	22a0      	movs	r2, #160	; 0xa0
 8000666:	2129      	movs	r1, #41	; 0x29
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f83f 	bl	80006ec <Codec_WriteRegister>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]
	//if commented, DAC_L1/DAC_R1 is used to HPLOUT, HPROUT

	//(42) Pop-reduction register, voltage divider
	status = Codec_WriteRegister(codec, 0x2a, 0b00010100);
 8000672:	2214      	movs	r2, #20
 8000674:	212a      	movs	r1, #42	; 0x2a
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 f838 	bl	80006ec <Codec_WriteRegister>
 800067c:	4603      	mov	r3, r0
 800067e:	73fb      	strb	r3, [r7, #15]

	//(43) un-mute left DAC, gain 0dB
	status = Codec_WriteRegister(codec, 0x2b, 0b00000000);
 8000680:	2200      	movs	r2, #0
 8000682:	212b      	movs	r1, #43	; 0x2b
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f831 	bl	80006ec <Codec_WriteRegister>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]

	//(44) un-mute right DAC, gain 0dB
	status = Codec_WriteRegister(codec, 0x2c, 0b00000000);
 800068e:	2200      	movs	r2, #0
 8000690:	212c      	movs	r1, #44	; 0x2c
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f82a 	bl	80006ec <Codec_WriteRegister>
 8000698:	4603      	mov	r3, r0
 800069a:	73fb      	strb	r3, [r7, #15]

	//(47) DAC_L1 to HPLOUT ON, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x2f, 0b10000000);

	//(51) un-mute HPLOUT, 9dB, high impedance when powered down, HPLOUT fully powered
	status = Codec_WriteRegister(codec, 0x33, 0b10011111);
 800069c:	229f      	movs	r2, #159	; 0x9f
 800069e:	2133      	movs	r1, #51	; 0x33
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f823 	bl	80006ec <Codec_WriteRegister>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]

	//(63) PGA_R to HPROUT ON, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x3f, 0b10000000);

	//(64) DAC_R1 to HPROUT OFF, volume control 0dB
	status = Codec_WriteRegister(codec, 0x3f, 0b00000000);
 80006aa:	2200      	movs	r2, #0
 80006ac:	213f      	movs	r1, #63	; 0x3f
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f81c 	bl	80006ec <Codec_WriteRegister>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]

	//(65) un-mute HPROUT, 9dB, high impedance when powered down, HPROUT fully powered
	status = Codec_WriteRegister(codec, 0x41, 0b10011111);
 80006b8:	229f      	movs	r2, #159	; 0x9f
 80006ba:	2141      	movs	r1, #65	; 0x41
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 f815 	bl	80006ec <Codec_WriteRegister>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]

	//(72) un-mute HPRCOM, high impedance when powered down, HPRCOM fully powered
	//status = Codec_WriteRegister(codec, 0x48, 0b10011111);

	//(101) CLK source selection, CLKDIV_OUT
	status = Codec_WriteRegister(codec, 0x65, 0b00000001);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2165      	movs	r1, #101	; 0x65
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f80e 	bl	80006ec <Codec_WriteRegister>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73fb      	strb	r3, [r7, #15]

	//(102) CLK source selection, MCLK
	status = Codec_WriteRegister(codec, 0x66, 0b00000010);
 80006d4:	2202      	movs	r2, #2
 80006d6:	2166      	movs	r1, #102	; 0x66
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f807 	bl	80006ec <Codec_WriteRegister>
 80006de:	4603      	mov	r3, r0
 80006e0:	73fb      	strb	r3, [r7, #15]

	//(109) DAC quiescent current 50% increase
	//status = Codec_WriteRegister(codec, 0x6d, 0b11000000);

	return status;
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Codec_WriteRegister>:

HAL_StatusTypeDef Codec_WriteRegister(Codec *codec, uint8_t reg_addr, uint8_t val){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
 80006f8:	4613      	mov	r3, r2
 80006fa:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2]={reg_addr,val};
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	733b      	strb	r3, [r7, #12]
 8000700:	78bb      	ldrb	r3, [r7, #2]
 8000702:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(codec->I2Chandle, CODEC_I2C_ADDR, data, 2, 100);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	f107 020c 	add.w	r2, r7, #12
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2302      	movs	r3, #2
 8000712:	2130      	movs	r1, #48	; 0x30
 8000714:	f001 feba 	bl	800248c <HAL_I2C_Master_Transmit>
 8000718:	4603      	mov	r3, r0
 800071a:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef status = HAL_I2C_Mem_Write(codec->I2Chandle, CODEC_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE, &val, sizeof(val), 100);
	return status;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <Codec_ReadRegister>:


HAL_StatusTypeDef Codec_ReadRegister(Codec *codec, uint8_t reg_addr, uint8_t *val){
 8000726:	b580      	push	{r7, lr}
 8000728:	b08a      	sub	sp, #40	; 0x28
 800072a:	af04      	add	r7, sp, #16
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	460b      	mov	r3, r1
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	72fb      	strb	r3, [r7, #11]
	//HAL_I2C_Master_Transmit(codec->I2Chandle, CODEC_I2C_ADDR, &reg_addr, sizeof(reg_addr), 100);
	//HAL_StatusTypeDef status = HAL_I2C_Master_Receive(codec->I2Chandle, CODEC_I2C_ADDR, val, I2C_MEMADD_SIZE, 100);
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(codec->I2Chandle, CODEC_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE, val, sizeof(val), 100);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	7afb      	ldrb	r3, [r7, #11]
 800073a:	b29a      	uxth	r2, r3
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	9302      	str	r3, [sp, #8]
 8000740:	2304      	movs	r3, #4
 8000742:	9301      	str	r3, [sp, #4]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	9300      	str	r3, [sp, #0]
 8000748:	2301      	movs	r3, #1
 800074a:	2130      	movs	r1, #48	; 0x30
 800074c:	f001 ff9c 	bl	8002688 <HAL_I2C_Mem_Read>
 8000750:	4603      	mov	r3, r0
 8000752:	75fb      	strb	r3, [r7, #23]
	return status;
 8000754:	7dfb      	ldrb	r3, [r7, #23]
}
 8000756:	4618      	mov	r0, r3
 8000758:	3718      	adds	r7, #24
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <Led_Clear>:
//static void Codec_Setup();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void Led_Clear(){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, RLED1_Pin|RLED2_Pin|YLED1_Pin|YLED2_Pin|GLED1_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800076a:	4802      	ldr	r0, [pc, #8]	; (8000774 <Led_Clear+0x14>)
 800076c:	f001 fd16 	bl	800219c <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40020000 	.word	0x40020000

08000778 <process_half>:

/* 2 DMA streams are used, 1 RX ,1 TX */
/* move half of the receiving DMA into the half of the transmitting DMA */
void process_half(){
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

	uint16_t volume = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	80bb      	strh	r3, [r7, #4]

	for(uint8_t n=0 ; n < (BUFF_SIZE/2) - 1; n++){
 8000782:	2300      	movs	r3, #0
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	e0a9      	b.n	80008dc <process_half+0x164>
		//LEFT
		*(outBufPtr+n)=*(inBufPtr+n); //tx_data --> rx_data
 8000788:	4b59      	ldr	r3, [pc, #356]	; (80008f0 <process_half+0x178>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	441a      	add	r2, r3
 8000792:	4b58      	ldr	r3, [pc, #352]	; (80008f4 <process_half+0x17c>)
 8000794:	6819      	ldr	r1, [r3, #0]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	440b      	add	r3, r1
 800079c:	8812      	ldrh	r2, [r2, #0]
 800079e:	b292      	uxth	r2, r2
 80007a0:	801a      	strh	r2, [r3, #0]
		//RIGHT
		//outBufPtr[n+1]=inBufPtr[n+1];

		//VU METER FATTO MALE SOLO PER PROVARE
		volume = (*(inBufPtr+n));
 80007a2:	4b53      	ldr	r3, [pc, #332]	; (80008f0 <process_half+0x178>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	80bb      	strh	r3, [r7, #4]
		Led_Clear();
 80007b0:	f7ff ffd6 	bl	8000760 <Led_Clear>
		if(volume>55296){
 80007b4:	88bb      	ldrh	r3, [r7, #4]
 80007b6:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 80007ba:	d923      	bls.n	8000804 <process_half+0x8c>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[0], HIGH);
 80007bc:	4b4e      	ldr	r3, [pc, #312]	; (80008f8 <process_half+0x180>)
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	2201      	movs	r2, #1
 80007c2:	4619      	mov	r1, r3
 80007c4:	484d      	ldr	r0, [pc, #308]	; (80008fc <process_half+0x184>)
 80007c6:	f001 fce9 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[1], HIGH);
 80007ca:	4b4b      	ldr	r3, [pc, #300]	; (80008f8 <process_half+0x180>)
 80007cc:	885b      	ldrh	r3, [r3, #2]
 80007ce:	2201      	movs	r2, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	484a      	ldr	r0, [pc, #296]	; (80008fc <process_half+0x184>)
 80007d4:	f001 fce2 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[2], HIGH);
 80007d8:	4b47      	ldr	r3, [pc, #284]	; (80008f8 <process_half+0x180>)
 80007da:	889b      	ldrh	r3, [r3, #4]
 80007dc:	2201      	movs	r2, #1
 80007de:	4619      	mov	r1, r3
 80007e0:	4846      	ldr	r0, [pc, #280]	; (80008fc <process_half+0x184>)
 80007e2:	f001 fcdb 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[3], HIGH);
 80007e6:	4b44      	ldr	r3, [pc, #272]	; (80008f8 <process_half+0x180>)
 80007e8:	88db      	ldrh	r3, [r3, #6]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4619      	mov	r1, r3
 80007ee:	4843      	ldr	r0, [pc, #268]	; (80008fc <process_half+0x184>)
 80007f0:	f001 fcd4 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[4], HIGH);
 80007f4:	4b40      	ldr	r3, [pc, #256]	; (80008f8 <process_half+0x180>)
 80007f6:	891b      	ldrh	r3, [r3, #8]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4619      	mov	r1, r3
 80007fc:	483f      	ldr	r0, [pc, #252]	; (80008fc <process_half+0x184>)
 80007fe:	f001 fccd 	bl	800219c <HAL_GPIO_WritePin>
 8000802:	e068      	b.n	80008d6 <process_half+0x15e>
			//HAL_GPIO_WritePin(GPIOA, LED_PIN[5], HIGH);
		}else if(volume<55296 && volume>13824){
 8000804:	88bb      	ldrh	r3, [r7, #4]
 8000806:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 800080a:	d220      	bcs.n	800084e <process_half+0xd6>
 800080c:	88bb      	ldrh	r3, [r7, #4]
 800080e:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8000812:	d91c      	bls.n	800084e <process_half+0xd6>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[1], HIGH);
 8000814:	4b38      	ldr	r3, [pc, #224]	; (80008f8 <process_half+0x180>)
 8000816:	885b      	ldrh	r3, [r3, #2]
 8000818:	2201      	movs	r2, #1
 800081a:	4619      	mov	r1, r3
 800081c:	4837      	ldr	r0, [pc, #220]	; (80008fc <process_half+0x184>)
 800081e:	f001 fcbd 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[2], HIGH);
 8000822:	4b35      	ldr	r3, [pc, #212]	; (80008f8 <process_half+0x180>)
 8000824:	889b      	ldrh	r3, [r3, #4]
 8000826:	2201      	movs	r2, #1
 8000828:	4619      	mov	r1, r3
 800082a:	4834      	ldr	r0, [pc, #208]	; (80008fc <process_half+0x184>)
 800082c:	f001 fcb6 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[3], HIGH);
 8000830:	4b31      	ldr	r3, [pc, #196]	; (80008f8 <process_half+0x180>)
 8000832:	88db      	ldrh	r3, [r3, #6]
 8000834:	2201      	movs	r2, #1
 8000836:	4619      	mov	r1, r3
 8000838:	4830      	ldr	r0, [pc, #192]	; (80008fc <process_half+0x184>)
 800083a:	f001 fcaf 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[4], HIGH);
 800083e:	4b2e      	ldr	r3, [pc, #184]	; (80008f8 <process_half+0x180>)
 8000840:	891b      	ldrh	r3, [r3, #8]
 8000842:	2201      	movs	r2, #1
 8000844:	4619      	mov	r1, r3
 8000846:	482d      	ldr	r0, [pc, #180]	; (80008fc <process_half+0x184>)
 8000848:	f001 fca8 	bl	800219c <HAL_GPIO_WritePin>
 800084c:	e043      	b.n	80008d6 <process_half+0x15e>
			//HAL_GPIO_WritePin(GPIOA, LED_PIN[5], HIGH);
		}else if(volume<13824 && volume>4608){
 800084e:	88bb      	ldrh	r3, [r7, #4]
 8000850:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8000854:	d219      	bcs.n	800088a <process_half+0x112>
 8000856:	88bb      	ldrh	r3, [r7, #4]
 8000858:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 800085c:	d915      	bls.n	800088a <process_half+0x112>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[2], HIGH);
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <process_half+0x180>)
 8000860:	889b      	ldrh	r3, [r3, #4]
 8000862:	2201      	movs	r2, #1
 8000864:	4619      	mov	r1, r3
 8000866:	4825      	ldr	r0, [pc, #148]	; (80008fc <process_half+0x184>)
 8000868:	f001 fc98 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[3], HIGH);
 800086c:	4b22      	ldr	r3, [pc, #136]	; (80008f8 <process_half+0x180>)
 800086e:	88db      	ldrh	r3, [r3, #6]
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	4821      	ldr	r0, [pc, #132]	; (80008fc <process_half+0x184>)
 8000876:	f001 fc91 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[4], HIGH);
 800087a:	4b1f      	ldr	r3, [pc, #124]	; (80008f8 <process_half+0x180>)
 800087c:	891b      	ldrh	r3, [r3, #8]
 800087e:	2201      	movs	r2, #1
 8000880:	4619      	mov	r1, r3
 8000882:	481e      	ldr	r0, [pc, #120]	; (80008fc <process_half+0x184>)
 8000884:	f001 fc8a 	bl	800219c <HAL_GPIO_WritePin>
 8000888:	e025      	b.n	80008d6 <process_half+0x15e>
			//HAL_GPIO_WritePin(GPIOA, LED_PIN[5], HIGH);
		}else if(volume<4608 && volume>1536){
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8000890:	d212      	bcs.n	80008b8 <process_half+0x140>
 8000892:	88bb      	ldrh	r3, [r7, #4]
 8000894:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000898:	d90e      	bls.n	80008b8 <process_half+0x140>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[3], HIGH);
 800089a:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <process_half+0x180>)
 800089c:	88db      	ldrh	r3, [r3, #6]
 800089e:	2201      	movs	r2, #1
 80008a0:	4619      	mov	r1, r3
 80008a2:	4816      	ldr	r0, [pc, #88]	; (80008fc <process_half+0x184>)
 80008a4:	f001 fc7a 	bl	800219c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[4], HIGH);
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <process_half+0x180>)
 80008aa:	891b      	ldrh	r3, [r3, #8]
 80008ac:	2201      	movs	r2, #1
 80008ae:	4619      	mov	r1, r3
 80008b0:	4812      	ldr	r0, [pc, #72]	; (80008fc <process_half+0x184>)
 80008b2:	f001 fc73 	bl	800219c <HAL_GPIO_WritePin>
 80008b6:	e00e      	b.n	80008d6 <process_half+0x15e>
			//HAL_GPIO_WritePin(GPIOA, LED_PIN[5], HIGH);
		}else if(volume<1536 && volume>512){
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80008be:	d20a      	bcs.n	80008d6 <process_half+0x15e>
 80008c0:	88bb      	ldrh	r3, [r7, #4]
 80008c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008c6:	d906      	bls.n	80008d6 <process_half+0x15e>
			HAL_GPIO_WritePin(GPIOA, LED_PIN[4], HIGH);
 80008c8:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <process_half+0x180>)
 80008ca:	891b      	ldrh	r3, [r3, #8]
 80008cc:	2201      	movs	r2, #1
 80008ce:	4619      	mov	r1, r3
 80008d0:	480a      	ldr	r0, [pc, #40]	; (80008fc <process_half+0x184>)
 80008d2:	f001 fc63 	bl	800219c <HAL_GPIO_WritePin>
	for(uint8_t n=0 ; n < (BUFF_SIZE/2) - 1; n++){
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	3301      	adds	r3, #1
 80008da:	71fb      	strb	r3, [r7, #7]
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b17      	cmp	r3, #23
 80008e0:	f67f af52 	bls.w	8000788 <process_half+0x10>
			//HAL_GPIO_WritePin(GPIOA, LED_PIN[5], HIGH);
		}else if(volume<512 && volume>0){
			//HAL_GPIO_WritePin(GPIOA, LED_PIN[5], HIGH);
		}
	}
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000340 	.word	0x20000340
 80008f4:	2000000c 	.word	0x2000000c
 80008f8:	20000000 	.word	0x20000000
 80008fc:	40020000 	.word	0x40020000

08000900 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* first half ready DMA callback*/
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	inBufPtr = rx_data; // pointing to rx_data of DMA
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <HAL_I2SEx_TxRxHalfCpltCallback+0x20>)
 800090a:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_I2SEx_TxRxHalfCpltCallback+0x24>)
 800090c:	601a      	str	r2, [r3, #0]
	outBufPtr = tx_data; // pointing to tx_data of DMA
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000912:	601a      	str	r2, [r3, #0]
	process_half(); // move data from RX to TX DMA
 8000914:	f7ff ff30 	bl	8000778 <process_half>

}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000340 	.word	0x20000340
 8000924:	20000278 	.word	0x20000278
 8000928:	2000000c 	.word	0x2000000c
 800092c:	200002dc 	.word	0x200002dc

08000930 <HAL_I2SEx_TxRxCpltCallback>:
/* second half ready DMA callback*/
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	inBufPtr = (rx_data + BUFF_SIZE/2);
 8000938:	4a05      	ldr	r2, [pc, #20]	; (8000950 <HAL_I2SEx_TxRxCpltCallback+0x20>)
 800093a:	4b06      	ldr	r3, [pc, #24]	; (8000954 <HAL_I2SEx_TxRxCpltCallback+0x24>)
 800093c:	601a      	str	r2, [r3, #0]
	outBufPtr = (tx_data + BUFF_SIZE/2);
 800093e:	4a06      	ldr	r2, [pc, #24]	; (8000958 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8000942:	601a      	str	r2, [r3, #0]
	process_half(); // move data from RX to TX DMA
 8000944:	f7ff ff18 	bl	8000778 <process_half>
}
 8000948:	bf00      	nop
 800094a:	3708      	adds	r7, #8
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200002aa 	.word	0x200002aa
 8000954:	20000340 	.word	0x20000340
 8000958:	2000030e 	.word	0x2000030e
 800095c:	2000000c 	.word	0x2000000c

08000960 <HAL_TIM_PeriodElapsedCallback>:
	//HAL_I2S_Transmit(hi2s, (rx_data + BUFF_SIZE/2), BUFF_SIZE/2, 10);
	HAL_I2S_Transmit_DMA(&hi2s2, (rx_data + BUFF_SIZE/2), BUFF_SIZE/2);
}
*/
/*TIMER 3 used to turn on LED every second*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a06      	ldr	r2, [pc, #24]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d102      	bne.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x16>
		TIM3_ISR_FLAG = 1;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	200001e4 	.word	0x200001e4
 8000988:	20000270 	.word	0x20000270

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t led_index = 0, len = 0, reg_val = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	71fb      	strb	r3, [r7, #7]
 8000996:	2300      	movs	r3, #0
 8000998:	71bb      	strb	r3, [r7, #6]
 800099a:	2300      	movs	r3, #0
 800099c:	717b      	strb	r3, [r7, #5]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099e:	f000 fd61 	bl	8001464 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009a2:	f000 f8eb 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a6:	f000 fa4f 	bl	8000e48 <MX_GPIO_Init>
  MX_DMA_Init();
 80009aa:	f000 fa25 	bl	8000df8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80009ae:	f000 f9f9 	bl	8000da4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009b2:	f000 f94d 	bl	8000c50 <MX_I2C1_Init>
  MX_TIM3_Init();
 80009b6:	f000 f9a7 	bl	8000d08 <MX_TIM3_Init>
  MX_I2S2_Init();
 80009ba:	f000 f977 	bl	8000cac <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  /* Wait for Codec HW reset */
  HAL_Delay(RESET_TIME);
 80009be:	2032      	movs	r0, #50	; 0x32
 80009c0:	f000 fdc2 	bl	8001548 <HAL_Delay>


  /* Codec Setup */
  if(Codec_Init(&codec, &hi2c1) != HAL_OK){
 80009c4:	495d      	ldr	r1, [pc, #372]	; (8000b3c <main+0x1b0>)
 80009c6:	485e      	ldr	r0, [pc, #376]	; (8000b40 <main+0x1b4>)
 80009c8:	f7ff fdd8 	bl	800057c <Codec_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d008      	beq.n	80009e4 <main+0x58>
	  while(1){
	  		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80009d2:	2120      	movs	r1, #32
 80009d4:	485b      	ldr	r0, [pc, #364]	; (8000b44 <main+0x1b8>)
 80009d6:	f001 fbfa 	bl	80021ce <HAL_GPIO_TogglePin>
	  		  HAL_Delay(300);
 80009da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009de:	f000 fdb3 	bl	8001548 <HAL_Delay>
	  		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80009e2:	e7f6      	b.n	80009d2 <main+0x46>
	  }}
  else{
	  len = snprintf(buff, sizeof(buff),"Inizializzazione Codec riuscita.\r\n");
 80009e4:	4a58      	ldr	r2, [pc, #352]	; (8000b48 <main+0x1bc>)
 80009e6:	2164      	movs	r1, #100	; 0x64
 80009e8:	4858      	ldr	r0, [pc, #352]	; (8000b4c <main+0x1c0>)
 80009ea:	f005 f881 	bl	8005af0 <sniprintf>
 80009ee:	4603      	mov	r3, r0
 80009f0:	71bb      	strb	r3, [r7, #6]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 80009f2:	79bb      	ldrb	r3, [r7, #6]
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	4954      	ldr	r1, [pc, #336]	; (8000b4c <main+0x1c0>)
 80009fa:	4855      	ldr	r0, [pc, #340]	; (8000b50 <main+0x1c4>)
 80009fc:	f004 fd03 	bl	8005406 <HAL_UART_Transmit>
  }

  /* Check registers value to be ok */
  Codec_ReadRegister(&codec, 0x0B, &reg_val);
 8000a00:	1d7b      	adds	r3, r7, #5
 8000a02:	461a      	mov	r2, r3
 8000a04:	210b      	movs	r1, #11
 8000a06:	484e      	ldr	r0, [pc, #312]	; (8000b40 <main+0x1b4>)
 8000a08:	f7ff fe8d 	bl	8000726 <Codec_ReadRegister>
  len = snprintf(buff, sizeof(buff),"Registro 11: %x \r\n", reg_val);
 8000a0c:	797b      	ldrb	r3, [r7, #5]
 8000a0e:	4a51      	ldr	r2, [pc, #324]	; (8000b54 <main+0x1c8>)
 8000a10:	2164      	movs	r1, #100	; 0x64
 8000a12:	484e      	ldr	r0, [pc, #312]	; (8000b4c <main+0x1c0>)
 8000a14:	f005 f86c 	bl	8005af0 <sniprintf>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	494a      	ldr	r1, [pc, #296]	; (8000b4c <main+0x1c0>)
 8000a24:	484a      	ldr	r0, [pc, #296]	; (8000b50 <main+0x1c4>)
 8000a26:	f004 fcee 	bl	8005406 <HAL_UART_Transmit>
  HAL_Delay(10);
 8000a2a:	200a      	movs	r0, #10
 8000a2c:	f000 fd8c 	bl	8001548 <HAL_Delay>

  Codec_ReadRegister(&codec, 0x24, &reg_val);
 8000a30:	1d7b      	adds	r3, r7, #5
 8000a32:	461a      	mov	r2, r3
 8000a34:	2124      	movs	r1, #36	; 0x24
 8000a36:	4842      	ldr	r0, [pc, #264]	; (8000b40 <main+0x1b4>)
 8000a38:	f7ff fe75 	bl	8000726 <Codec_ReadRegister>
  len = snprintf(buff, sizeof(buff),"Registro 36: %x \r\n", reg_val);
 8000a3c:	797b      	ldrb	r3, [r7, #5]
 8000a3e:	4a46      	ldr	r2, [pc, #280]	; (8000b58 <main+0x1cc>)
 8000a40:	2164      	movs	r1, #100	; 0x64
 8000a42:	4842      	ldr	r0, [pc, #264]	; (8000b4c <main+0x1c0>)
 8000a44:	f005 f854 	bl	8005af0 <sniprintf>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	493e      	ldr	r1, [pc, #248]	; (8000b4c <main+0x1c0>)
 8000a54:	483e      	ldr	r0, [pc, #248]	; (8000b50 <main+0x1c4>)
 8000a56:	f004 fcd6 	bl	8005406 <HAL_UART_Transmit>
  HAL_Delay(10);
 8000a5a:	200a      	movs	r0, #10
 8000a5c:	f000 fd74 	bl	8001548 <HAL_Delay>

  Codec_ReadRegister(&codec, 0x5E, &reg_val);
 8000a60:	1d7b      	adds	r3, r7, #5
 8000a62:	461a      	mov	r2, r3
 8000a64:	215e      	movs	r1, #94	; 0x5e
 8000a66:	4836      	ldr	r0, [pc, #216]	; (8000b40 <main+0x1b4>)
 8000a68:	f7ff fe5d 	bl	8000726 <Codec_ReadRegister>
  len = snprintf(buff, sizeof(buff),"Registro 94: %x \r\n", reg_val);
 8000a6c:	797b      	ldrb	r3, [r7, #5]
 8000a6e:	4a3b      	ldr	r2, [pc, #236]	; (8000b5c <main+0x1d0>)
 8000a70:	2164      	movs	r1, #100	; 0x64
 8000a72:	4836      	ldr	r0, [pc, #216]	; (8000b4c <main+0x1c0>)
 8000a74:	f005 f83c 	bl	8005af0 <sniprintf>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	b29a      	uxth	r2, r3
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	4932      	ldr	r1, [pc, #200]	; (8000b4c <main+0x1c0>)
 8000a84:	4832      	ldr	r0, [pc, #200]	; (8000b50 <main+0x1c4>)
 8000a86:	f004 fcbe 	bl	8005406 <HAL_UART_Transmit>
  HAL_Delay(10);
 8000a8a:	200a      	movs	r0, #10
 8000a8c:	f000 fd5c 	bl	8001548 <HAL_Delay>

  Codec_ReadRegister(&codec, 0x5F, &reg_val);
 8000a90:	1d7b      	adds	r3, r7, #5
 8000a92:	461a      	mov	r2, r3
 8000a94:	215f      	movs	r1, #95	; 0x5f
 8000a96:	482a      	ldr	r0, [pc, #168]	; (8000b40 <main+0x1b4>)
 8000a98:	f7ff fe45 	bl	8000726 <Codec_ReadRegister>
  len = snprintf(buff, sizeof(buff),"Registro 95: %x \r\n", reg_val);
 8000a9c:	797b      	ldrb	r3, [r7, #5]
 8000a9e:	4a30      	ldr	r2, [pc, #192]	; (8000b60 <main+0x1d4>)
 8000aa0:	2164      	movs	r1, #100	; 0x64
 8000aa2:	482a      	ldr	r0, [pc, #168]	; (8000b4c <main+0x1c0>)
 8000aa4:	f005 f824 	bl	8005af0 <sniprintf>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 8000aac:	79bb      	ldrb	r3, [r7, #6]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	2364      	movs	r3, #100	; 0x64
 8000ab2:	4926      	ldr	r1, [pc, #152]	; (8000b4c <main+0x1c0>)
 8000ab4:	4826      	ldr	r0, [pc, #152]	; (8000b50 <main+0x1c4>)
 8000ab6:	f004 fca6 	bl	8005406 <HAL_UART_Transmit>
  HAL_Delay(10);
 8000aba:	200a      	movs	r0, #10
 8000abc:	f000 fd44 	bl	8001548 <HAL_Delay>

  Codec_ReadRegister(&codec, 0x60, &reg_val);
 8000ac0:	1d7b      	adds	r3, r7, #5
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	2160      	movs	r1, #96	; 0x60
 8000ac6:	481e      	ldr	r0, [pc, #120]	; (8000b40 <main+0x1b4>)
 8000ac8:	f7ff fe2d 	bl	8000726 <Codec_ReadRegister>
  len = snprintf(buff, sizeof(buff),"Registro 96: %x \r\n", reg_val);
 8000acc:	797b      	ldrb	r3, [r7, #5]
 8000ace:	4a25      	ldr	r2, [pc, #148]	; (8000b64 <main+0x1d8>)
 8000ad0:	2164      	movs	r1, #100	; 0x64
 8000ad2:	481e      	ldr	r0, [pc, #120]	; (8000b4c <main+0x1c0>)
 8000ad4:	f005 f80c 	bl	8005af0 <sniprintf>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	71bb      	strb	r3, [r7, #6]
  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 8000adc:	79bb      	ldrb	r3, [r7, #6]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	2364      	movs	r3, #100	; 0x64
 8000ae2:	491a      	ldr	r1, [pc, #104]	; (8000b4c <main+0x1c0>)
 8000ae4:	481a      	ldr	r0, [pc, #104]	; (8000b50 <main+0x1c4>)
 8000ae6:	f004 fc8e 	bl	8005406 <HAL_UART_Transmit>

  HAL_Delay(TIMEOUT);
 8000aea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aee:	f000 fd2b 	bl	8001548 <HAL_Delay>

  /* Start I2S with DMA */
  if(HAL_I2SEx_TransmitReceive_DMA(&hi2s2, tx_data, rx_data, BUFF_SIZE) != HAL_OK){
 8000af2:	2332      	movs	r3, #50	; 0x32
 8000af4:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <main+0x1dc>)
 8000af6:	491d      	ldr	r1, [pc, #116]	; (8000b6c <main+0x1e0>)
 8000af8:	481d      	ldr	r0, [pc, #116]	; (8000b70 <main+0x1e4>)
 8000afa:	f002 fd79 	bl	80035f0 <HAL_I2SEx_TransmitReceive_DMA>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <main+0x18a>
	  while(1){
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000b04:	2120      	movs	r1, #32
 8000b06:	480f      	ldr	r0, [pc, #60]	; (8000b44 <main+0x1b8>)
 8000b08:	f001 fb61 	bl	80021ce <HAL_GPIO_TogglePin>
		  HAL_Delay(300);
 8000b0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b10:	f000 fd1a 	bl	8001548 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8000b14:	e7f6      	b.n	8000b04 <main+0x178>
	  }}
  else{
	  len = snprintf(buff, sizeof(buff),"Startato DMA per I2S\n\n");
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <main+0x1e8>)
 8000b18:	2164      	movs	r1, #100	; 0x64
 8000b1a:	480c      	ldr	r0, [pc, #48]	; (8000b4c <main+0x1c0>)
 8000b1c:	f004 ffe8 	bl	8005af0 <sniprintf>
 8000b20:	4603      	mov	r3, r0
 8000b22:	71bb      	strb	r3, [r7, #6]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 8000b24:	79bb      	ldrb	r3, [r7, #6]
 8000b26:	b29a      	uxth	r2, r3
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <main+0x1c0>)
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <main+0x1c4>)
 8000b2e:	f004 fc6a 	bl	8005406 <HAL_UART_Transmit>
  }


  //Start the Timer 3 to turn on LEDS
  HAL_TIM_Base_Start_IT(&htim3);
 8000b32:	4811      	ldr	r0, [pc, #68]	; (8000b78 <main+0x1ec>)
 8000b34:	f004 f824 	bl	8004b80 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1){
 8000b38:	e7fe      	b.n	8000b38 <main+0x1ac>
 8000b3a:	bf00      	nop
 8000b3c:	20000088 	.word	0x20000088
 8000b40:	20000274 	.word	0x20000274
 8000b44:	40020000 	.word	0x40020000
 8000b48:	08006478 	.word	0x08006478
 8000b4c:	20000344 	.word	0x20000344
 8000b50:	2000022c 	.word	0x2000022c
 8000b54:	0800649c 	.word	0x0800649c
 8000b58:	080064b0 	.word	0x080064b0
 8000b5c:	080064c4 	.word	0x080064c4
 8000b60:	080064d8 	.word	0x080064d8
 8000b64:	080064ec 	.word	0x080064ec
 8000b68:	20000278 	.word	0x20000278
 8000b6c:	200002dc 	.word	0x200002dc
 8000b70:	200000dc 	.word	0x200000dc
 8000b74:	08006500 	.word	0x08006500
 8000b78:	200001e4 	.word	0x200001e4

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	; 0x50
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0320 	add.w	r3, r7, #32
 8000b86:	2230      	movs	r2, #48	; 0x30
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f004 ffe4 	bl	8005b58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	f107 030c 	add.w	r3, r7, #12
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <SystemClock_Config+0xcc>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a27      	ldr	r2, [pc, #156]	; (8000c48 <SystemClock_Config+0xcc>)
 8000baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <SystemClock_Config+0xcc>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <SystemClock_Config+0xd0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc8:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <SystemClock_Config+0xd0>)
 8000bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <SystemClock_Config+0xd0>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be0:	2301      	movs	r3, #1
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000be4:	2310      	movs	r3, #16
 8000be6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bf4:	23a8      	movs	r3, #168	; 0xa8
 8000bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	4618      	mov	r0, r3
 8000c06:	f003 f987 	bl	8003f18 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c10:	f000 f98a 	bl	8000f28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fbe9 	bl	8004408 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c3c:	f000 f974 	bl	8000f28 <Error_Handler>
  }
}
 8000c40:	bf00      	nop
 8000c42:	3750      	adds	r7, #80	; 0x50
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c56:	4a13      	ldr	r2, [pc, #76]	; (8000ca4 <MX_I2C1_Init+0x54>)
 8000c58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c5c:	4a12      	ldr	r2, [pc, #72]	; (8000ca8 <MX_I2C1_Init+0x58>)
 8000c5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_I2C1_Init+0x50>)
 8000c8e:	f001 fab9 	bl	8002204 <HAL_I2C_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c98:	f000 f946 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000088 	.word	0x20000088
 8000ca4:	40005400 	.word	0x40005400
 8000ca8:	000186a0 	.word	0x000186a0

08000cac <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <MX_I2S2_Init+0x58>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000cb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cbc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000ccc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd0:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000cd4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000cd8:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_I2S2_Init+0x54>)
 8000cee:	f002 fa39 	bl	8003164 <HAL_I2S_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000cf8:	f000 f916 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000dc 	.word	0x200000dc
 8000d04:	40003800 	.word	0x40003800

08000d08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_TIM3_Init+0x94>)
 8000d26:	4a1e      	ldr	r2, [pc, #120]	; (8000da0 <MX_TIM3_Init+0x98>)
 8000d28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_TIM3_Init+0x94>)
 8000d2c:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000d30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_TIM3_Init+0x94>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000d38:	4b18      	ldr	r3, [pc, #96]	; (8000d9c <MX_TIM3_Init+0x94>)
 8000d3a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_TIM3_Init+0x94>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b15      	ldr	r3, [pc, #84]	; (8000d9c <MX_TIM3_Init+0x94>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d4c:	4813      	ldr	r0, [pc, #76]	; (8000d9c <MX_TIM3_Init+0x94>)
 8000d4e:	f003 fec7 	bl	8004ae0 <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000d58:	f000 f8e6 	bl	8000f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d62:	f107 0308 	add.w	r3, r7, #8
 8000d66:	4619      	mov	r1, r3
 8000d68:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_TIM3_Init+0x94>)
 8000d6a:	f004 f873 	bl	8004e54 <HAL_TIM_ConfigClockSource>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000d74:	f000 f8d8 	bl	8000f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d80:	463b      	mov	r3, r7
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_TIM3_Init+0x94>)
 8000d86:	f004 fa6f 	bl	8005268 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000d90:	f000 f8ca 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200001e4 	.word	0x200001e4
 8000da0:	40000400 	.word	0x40000400

08000da4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <MX_USART2_UART_Init+0x50>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000db0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dda:	4805      	ldr	r0, [pc, #20]	; (8000df0 <MX_USART2_UART_Init+0x4c>)
 8000ddc:	f004 fac6 	bl	800536c <HAL_UART_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000de6:	f000 f89f 	bl	8000f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000022c 	.word	0x2000022c
 8000df4:	40004400 	.word	0x40004400

08000df8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_DMA_Init+0x4c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <MX_DMA_Init+0x4c>)
 8000e08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_DMA_Init+0x4c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	200e      	movs	r0, #14
 8000e20:	f000 fc91 	bl	8001746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e24:	200e      	movs	r0, #14
 8000e26:	f000 fcaa 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 fc89 	bl	8001746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e34:	200f      	movs	r0, #15
 8000e36:	f000 fca2 	bl	800177e <HAL_NVIC_EnableIRQ>

}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023800 	.word	0x40023800

08000e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
 8000e5a:	60da      	str	r2, [r3, #12]
 8000e5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a2d      	ldr	r2, [pc, #180]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b27      	ldr	r3, [pc, #156]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b24      	ldr	r3, [pc, #144]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b20      	ldr	r3, [pc, #128]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000ea0:	f043 0301 	orr.w	r3, r3, #1
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a18      	ldr	r2, [pc, #96]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_GPIO_Init+0xd4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RLED1_Pin|RLED2_Pin|YLED1_Pin
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f44f 51f9 	mov.w	r1, #7968	; 0x1f20
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <MX_GPIO_Init+0xd8>)
 8000ed6:	f001 f961 	bl	800219c <HAL_GPIO_WritePin>
                          |YLED2_Pin|GLED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ee4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_GPIO_Init+0xdc>)
 8000ef2:	f000 ffcf 	bl	8001e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RLED1_Pin RLED2_Pin YLED1_Pin
                           YLED2_Pin GLED1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RLED1_Pin|RLED2_Pin|YLED1_Pin
 8000ef6:	f44f 53f9 	mov.w	r3, #7968	; 0x1f20
 8000efa:	617b      	str	r3, [r7, #20]
                          |YLED2_Pin|GLED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efc:	2301      	movs	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f04:	2300      	movs	r3, #0
 8000f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <MX_GPIO_Init+0xd8>)
 8000f10:	f000 ffc0 	bl	8001e94 <HAL_GPIO_Init>

}
 8000f14:	bf00      	nop
 8000f16:	3728      	adds	r7, #40	; 0x28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40020800 	.word	0x40020800

08000f28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x8>
	...

08000f34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a0f      	ldr	r2, [pc, #60]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_MspInit+0x4c>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f72:	2007      	movs	r0, #7
 8000f74:	f000 fbdc 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800

08000f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0314 	add.w	r3, r7, #20
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <HAL_I2C_MspInit+0x84>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d12b      	bne.n	8000ffe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <HAL_I2C_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a17      	ldr	r2, [pc, #92]	; (800100c <HAL_I2C_MspInit+0x88>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_I2C_MspInit+0x88>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fc2:	23c0      	movs	r3, #192	; 0xc0
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc6:	2312      	movs	r3, #18
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <HAL_I2C_MspInit+0x8c>)
 8000fde:	f000 ff59 	bl	8001e94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_I2C_MspInit+0x88>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fea:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_I2C_MspInit+0x88>)
 8000fec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff2:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_I2C_MspInit+0x88>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40005400 	.word	0x40005400
 800100c:	40023800 	.word	0x40023800
 8001010:	40020400 	.word	0x40020400

08001014 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b090      	sub	sp, #64	; 0x40
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a6b      	ldr	r2, [pc, #428]	; (80011f0 <HAL_I2S_MspInit+0x1dc>)
 8001042:	4293      	cmp	r3, r2
 8001044:	f040 80cf 	bne.w	80011e6 <HAL_I2S_MspInit+0x1d2>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001048:	2301      	movs	r3, #1
 800104a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 258;
 800104c:	f44f 7381 	mov.w	r3, #258	; 0x102
 8001050:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 3;
 8001052:	2303      	movs	r3, #3
 8001054:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001056:	f107 0318 	add.w	r3, r7, #24
 800105a:	4618      	mov	r0, r3
 800105c:	f003 fbf4 	bl	8004848 <HAL_RCCEx_PeriphCLKConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_I2S_MspInit+0x56>
    {
      Error_Handler();
 8001066:	f7ff ff5f 	bl	8000f28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	4b61      	ldr	r3, [pc, #388]	; (80011f4 <HAL_I2S_MspInit+0x1e0>)
 8001070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001072:	4a60      	ldr	r2, [pc, #384]	; (80011f4 <HAL_I2S_MspInit+0x1e0>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6413      	str	r3, [r2, #64]	; 0x40
 800107a:	4b5e      	ldr	r3, [pc, #376]	; (80011f4 <HAL_I2S_MspInit+0x1e0>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	4b5a      	ldr	r3, [pc, #360]	; (80011f4 <HAL_I2S_MspInit+0x1e0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a59      	ldr	r2, [pc, #356]	; (80011f4 <HAL_I2S_MspInit+0x1e0>)
 8001090:	f043 0304 	orr.w	r3, r3, #4
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b57      	ldr	r3, [pc, #348]	; (80011f4 <HAL_I2S_MspInit+0x1e0>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0304 	and.w	r3, r3, #4
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <HAL_I2S_MspInit+0x1e0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_I2S_MspInit+0x1e0>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <HAL_I2S_MspInit+0x1e0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010be:	2304      	movs	r3, #4
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c2:	2302      	movs	r3, #2
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80010ce:	2306      	movs	r3, #6
 80010d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d6:	4619      	mov	r1, r3
 80010d8:	4847      	ldr	r0, [pc, #284]	; (80011f8 <HAL_I2S_MspInit+0x1e4>)
 80010da:	f000 fedb 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 80010de:	2348      	movs	r3, #72	; 0x48
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010ee:	2305      	movs	r3, #5
 80010f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f6:	4619      	mov	r1, r3
 80010f8:	483f      	ldr	r0, [pc, #252]	; (80011f8 <HAL_I2S_MspInit+0x1e4>)
 80010fa:	f000 fecb 	bl	8001e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80010fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001110:	2305      	movs	r3, #5
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001118:	4619      	mov	r1, r3
 800111a:	4838      	ldr	r0, [pc, #224]	; (80011fc <HAL_I2S_MspInit+0x1e8>)
 800111c:	f000 feba 	bl	8001e94 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001120:	4b37      	ldr	r3, [pc, #220]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 8001122:	4a38      	ldr	r2, [pc, #224]	; (8001204 <HAL_I2S_MspInit+0x1f0>)
 8001124:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001126:	4b36      	ldr	r3, [pc, #216]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800112c:	4b34      	ldr	r3, [pc, #208]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 800112e:	2240      	movs	r2, #64	; 0x40
 8001130:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001132:	4b33      	ldr	r3, [pc, #204]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 8001134:	2200      	movs	r2, #0
 8001136:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001138:	4b31      	ldr	r3, [pc, #196]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 800113a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 8001142:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001146:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001148:	4b2d      	ldr	r3, [pc, #180]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 800114a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001150:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 8001152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001156:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001158:	4b29      	ldr	r3, [pc, #164]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 800115a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800115e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001166:	4826      	ldr	r0, [pc, #152]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 8001168:	f000 fb24 	bl	80017b4 <HAL_DMA_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_I2S_MspInit+0x162>
    {
      Error_Handler();
 8001172:	f7ff fed9 	bl	8000f28 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 800117a:	639a      	str	r2, [r3, #56]	; 0x38
 800117c:	4a20      	ldr	r2, [pc, #128]	; (8001200 <HAL_I2S_MspInit+0x1ec>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001182:	4b21      	ldr	r3, [pc, #132]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 8001184:	4a21      	ldr	r2, [pc, #132]	; (800120c <HAL_I2S_MspInit+0x1f8>)
 8001186:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 800118a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800118e:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001190:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800119c:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 800119e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a2:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 80011a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011aa:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 80011ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011b2:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 80011b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011ba:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 80011be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011c2:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80011ca:	480f      	ldr	r0, [pc, #60]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 80011cc:	f000 faf2 	bl	80017b4 <HAL_DMA_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_I2S_MspInit+0x1c6>
    {
      Error_Handler();
 80011d6:	f7ff fea7 	bl	8000f28 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 80011de:	63da      	str	r2, [r3, #60]	; 0x3c
 80011e0:	4a09      	ldr	r2, [pc, #36]	; (8001208 <HAL_I2S_MspInit+0x1f4>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011e6:	bf00      	nop
 80011e8:	3740      	adds	r7, #64	; 0x40
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40003800 	.word	0x40003800
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020800 	.word	0x40020800
 80011fc:	40020400 	.word	0x40020400
 8001200:	20000124 	.word	0x20000124
 8001204:	40026070 	.word	0x40026070
 8001208:	20000184 	.word	0x20000184
 800120c:	40026058 	.word	0x40026058

08001210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_TIM_Base_MspInit+0x48>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d115      	bne.n	800124e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b0d      	ldr	r3, [pc, #52]	; (800125c <HAL_TIM_Base_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <HAL_TIM_Base_MspInit+0x4c>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <HAL_TIM_Base_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2100      	movs	r1, #0
 8001242:	201d      	movs	r0, #29
 8001244:	f000 fa7f 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001248:	201d      	movs	r0, #29
 800124a:	f000 fa98 	bl	800177e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40000400 	.word	0x40000400
 800125c:	40023800 	.word	0x40023800

08001260 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b08a      	sub	sp, #40	; 0x28
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a19      	ldr	r2, [pc, #100]	; (80012e4 <HAL_UART_MspInit+0x84>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d12b      	bne.n	80012da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_UART_MspInit+0x88>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_UART_MspInit+0x88>)
 800128c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <HAL_UART_MspInit+0x88>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	613b      	str	r3, [r7, #16]
 800129c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <HAL_UART_MspInit+0x88>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a10      	ldr	r2, [pc, #64]	; (80012e8 <HAL_UART_MspInit+0x88>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <HAL_UART_MspInit+0x88>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ba:	230c      	movs	r3, #12
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ca:	2307      	movs	r3, #7
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4805      	ldr	r0, [pc, #20]	; (80012ec <HAL_UART_MspInit+0x8c>)
 80012d6:	f000 fddd 	bl	8001e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	; 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40004400 	.word	0x40004400
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40020000 	.word	0x40020000

080012f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012f4:	e7fe      	b.n	80012f4 <NMI_Handler+0x4>

080012f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012fa:	e7fe      	b.n	80012fa <HardFault_Handler+0x4>

080012fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <MemManage_Handler+0x4>

08001302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <BusFault_Handler+0x4>

08001308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <UsageFault_Handler+0x4>

0800130e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800133c:	f000 f8e4 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001348:	4802      	ldr	r0, [pc, #8]	; (8001354 <DMA1_Stream3_IRQHandler+0x10>)
 800134a:	f000 fb39 	bl	80019c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000184 	.word	0x20000184

08001358 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800135c:	4802      	ldr	r0, [pc, #8]	; (8001368 <DMA1_Stream4_IRQHandler+0x10>)
 800135e:	f000 fb2f 	bl	80019c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000124 	.word	0x20000124

0800136c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001370:	4802      	ldr	r0, [pc, #8]	; (800137c <TIM3_IRQHandler+0x10>)
 8001372:	f003 fc67 	bl	8004c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	200001e4 	.word	0x200001e4

08001380 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001388:	4a14      	ldr	r2, [pc, #80]	; (80013dc <_sbrk+0x5c>)
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <_sbrk+0x60>)
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <_sbrk+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <_sbrk+0x64>)
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <_sbrk+0x68>)
 80013a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d207      	bcs.n	80013c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013b0:	f004 fbda 	bl	8005b68 <__errno>
 80013b4:	4603      	mov	r3, r0
 80013b6:	220c      	movs	r2, #12
 80013b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013be:	e009      	b.n	80013d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013c0:	4b08      	ldr	r3, [pc, #32]	; (80013e4 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c6:	4b07      	ldr	r3, [pc, #28]	; (80013e4 <_sbrk+0x64>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <_sbrk+0x64>)
 80013d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20018000 	.word	0x20018000
 80013e0:	00000400 	.word	0x00000400
 80013e4:	200003a8 	.word	0x200003a8
 80013e8:	200004f8 	.word	0x200004f8

080013ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <SystemInit+0x20>)
 80013f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013f6:	4a05      	ldr	r2, [pc, #20]	; (800140c <SystemInit+0x20>)
 80013f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001410:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001448 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001414:	480d      	ldr	r0, [pc, #52]	; (800144c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001416:	490e      	ldr	r1, [pc, #56]	; (8001450 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001418:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0b      	ldr	r2, [pc, #44]	; (8001458 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800142c:	4c0b      	ldr	r4, [pc, #44]	; (800145c <LoopFillZerobss+0x26>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800143a:	f7ff ffd7 	bl	80013ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800143e:	f004 fb99 	bl	8005b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001442:	f7ff faa3 	bl	800098c <main>
  bx  lr    
 8001446:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001448:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800144c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001450:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001454:	0800657c 	.word	0x0800657c
  ldr r2, =_sbss
 8001458:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800145c:	200004f8 	.word	0x200004f8

08001460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001460:	e7fe      	b.n	8001460 <ADC_IRQHandler>
	...

08001464 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <HAL_Init+0x40>)
 800146e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001472:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001474:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <HAL_Init+0x40>)
 800147a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800147e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a07      	ldr	r2, [pc, #28]	; (80014a4 <HAL_Init+0x40>)
 8001486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148c:	2003      	movs	r0, #3
 800148e:	f000 f94f 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001492:	2000      	movs	r0, #0
 8001494:	f000 f808 	bl	80014a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001498:	f7ff fd4c 	bl	8000f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023c00 	.word	0x40023c00

080014a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x54>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <HAL_InitTick+0x58>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014be:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 f967 	bl	800179a <HAL_SYSTICK_Config>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00e      	b.n	80014f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b0f      	cmp	r3, #15
 80014da:	d80a      	bhi.n	80014f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014dc:	2200      	movs	r2, #0
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014e4:	f000 f92f 	bl	8001746 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e8:	4a06      	ldr	r2, [pc, #24]	; (8001504 <HAL_InitTick+0x5c>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e000      	b.n	80014f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000010 	.word	0x20000010
 8001500:	20000018 	.word	0x20000018
 8001504:	20000014 	.word	0x20000014

08001508 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_IncTick+0x20>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x24>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4413      	add	r3, r2
 8001518:	4a04      	ldr	r2, [pc, #16]	; (800152c <HAL_IncTick+0x24>)
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	20000018 	.word	0x20000018
 800152c:	200003ac 	.word	0x200003ac

08001530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return uwTick;
 8001534:	4b03      	ldr	r3, [pc, #12]	; (8001544 <HAL_GetTick+0x14>)
 8001536:	681b      	ldr	r3, [r3, #0]
}
 8001538:	4618      	mov	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200003ac 	.word	0x200003ac

08001548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001550:	f7ff ffee 	bl	8001530 <HAL_GetTick>
 8001554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001560:	d005      	beq.n	800156e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <HAL_Delay+0x44>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	461a      	mov	r2, r3
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4413      	add	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800156e:	bf00      	nop
 8001570:	f7ff ffde 	bl	8001530 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8f7      	bhi.n	8001570 <HAL_Delay+0x28>
  {
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000018 	.word	0x20000018

08001590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015ac:	4013      	ands	r3, r2
 80015ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c2:	4a04      	ldr	r2, [pc, #16]	; (80015d4 <__NVIC_SetPriorityGrouping+0x44>)
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	60d3      	str	r3, [r2, #12]
}
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <__NVIC_GetPriorityGrouping+0x18>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	0a1b      	lsrs	r3, r3, #8
 80015e2:	f003 0307 	and.w	r3, r3, #7
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	f003 021f 	and.w	r2, r3, #31
 800160c:	4907      	ldr	r1, [pc, #28]	; (800162c <__NVIC_EnableIRQ+0x38>)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	095b      	lsrs	r3, r3, #5
 8001614:	2001      	movs	r0, #1
 8001616:	fa00 f202 	lsl.w	r2, r0, r2
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001640:	2b00      	cmp	r3, #0
 8001642:	db0a      	blt.n	800165a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	490c      	ldr	r1, [pc, #48]	; (800167c <__NVIC_SetPriority+0x4c>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	0112      	lsls	r2, r2, #4
 8001650:	b2d2      	uxtb	r2, r2
 8001652:	440b      	add	r3, r1
 8001654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001658:	e00a      	b.n	8001670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	b2da      	uxtb	r2, r3
 800165e:	4908      	ldr	r1, [pc, #32]	; (8001680 <__NVIC_SetPriority+0x50>)
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	f003 030f 	and.w	r3, r3, #15
 8001666:	3b04      	subs	r3, #4
 8001668:	0112      	lsls	r2, r2, #4
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	440b      	add	r3, r1
 800166e:	761a      	strb	r2, [r3, #24]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000e100 	.word	0xe000e100
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001684:	b480      	push	{r7}
 8001686:	b089      	sub	sp, #36	; 0x24
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f1c3 0307 	rsb	r3, r3, #7
 800169e:	2b04      	cmp	r3, #4
 80016a0:	bf28      	it	cs
 80016a2:	2304      	movcs	r3, #4
 80016a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3304      	adds	r3, #4
 80016aa:	2b06      	cmp	r3, #6
 80016ac:	d902      	bls.n	80016b4 <NVIC_EncodePriority+0x30>
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3b03      	subs	r3, #3
 80016b2:	e000      	b.n	80016b6 <NVIC_EncodePriority+0x32>
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	43da      	mvns	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	401a      	ands	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	43d9      	mvns	r1, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016dc:	4313      	orrs	r3, r2
         );
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3724      	adds	r7, #36	; 0x24
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3b01      	subs	r3, #1
 80016f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016fc:	d301      	bcc.n	8001702 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fe:	2301      	movs	r3, #1
 8001700:	e00f      	b.n	8001722 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001702:	4a0a      	ldr	r2, [pc, #40]	; (800172c <SysTick_Config+0x40>)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	3b01      	subs	r3, #1
 8001708:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170a:	210f      	movs	r1, #15
 800170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001710:	f7ff ff8e 	bl	8001630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <SysTick_Config+0x40>)
 8001716:	2200      	movs	r2, #0
 8001718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171a:	4b04      	ldr	r3, [pc, #16]	; (800172c <SysTick_Config+0x40>)
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	e000e010 	.word	0xe000e010

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff29 	bl	8001590 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001758:	f7ff ff3e 	bl	80015d8 <__NVIC_GetPriorityGrouping>
 800175c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	6978      	ldr	r0, [r7, #20]
 8001764:	f7ff ff8e 	bl	8001684 <NVIC_EncodePriority>
 8001768:	4602      	mov	r2, r0
 800176a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ff5d 	bl	8001630 <__NVIC_SetPriority>
}
 8001776:	bf00      	nop
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b082      	sub	sp, #8
 8001782:	af00      	add	r7, sp, #0
 8001784:	4603      	mov	r3, r0
 8001786:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff31 	bl	80015f4 <__NVIC_EnableIRQ>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffa2 	bl	80016ec <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff feb6 	bl	8001530 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e099      	b.n	8001904 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2202      	movs	r2, #2
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0201 	bic.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017f0:	e00f      	b.n	8001812 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017f2:	f7ff fe9d 	bl	8001530 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b05      	cmp	r3, #5
 80017fe:	d908      	bls.n	8001812 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2220      	movs	r2, #32
 8001804:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2203      	movs	r2, #3
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e078      	b.n	8001904 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1e8      	bne.n	80017f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4b38      	ldr	r3, [pc, #224]	; (800190c <HAL_DMA_Init+0x158>)
 800182c:	4013      	ands	r3, r2
 800182e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800183e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	699b      	ldr	r3, [r3, #24]
 8001850:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800185e:	697a      	ldr	r2, [r7, #20]
 8001860:	4313      	orrs	r3, r2
 8001862:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	2b04      	cmp	r3, #4
 800186a:	d107      	bne.n	800187c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4313      	orrs	r3, r2
 8001876:	697a      	ldr	r2, [r7, #20]
 8001878:	4313      	orrs	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f023 0307 	bic.w	r3, r3, #7
 8001892:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	697a      	ldr	r2, [r7, #20]
 800189a:	4313      	orrs	r3, r2
 800189c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d117      	bne.n	80018d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d00e      	beq.n	80018d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 fa6f 	bl	8001d9c <DMA_CheckFifoParam>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d008      	beq.n	80018d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2240      	movs	r2, #64	; 0x40
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018d2:	2301      	movs	r3, #1
 80018d4:	e016      	b.n	8001904 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fa26 	bl	8001d30 <DMA_CalcBaseAndBitshift>
 80018e4:	4603      	mov	r3, r0
 80018e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	223f      	movs	r2, #63	; 0x3f
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	f010803f 	.word	0xf010803f

08001910 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
 800191c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_DMA_Start_IT+0x26>
 8001932:	2302      	movs	r3, #2
 8001934:	e040      	b.n	80019b8 <HAL_DMA_Start_IT+0xa8>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d12f      	bne.n	80019aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2202      	movs	r2, #2
 800194e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2200      	movs	r2, #0
 8001956:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	68b9      	ldr	r1, [r7, #8]
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 f9b8 	bl	8001cd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	223f      	movs	r2, #63	; 0x3f
 800196a:	409a      	lsls	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0216 	orr.w	r2, r2, #22
 800197e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0208 	orr.w	r2, r2, #8
 8001996:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0201 	orr.w	r2, r2, #1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e005      	b.n	80019b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
 80019b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019cc:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <HAL_DMA_IRQHandler+0x248>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a8e      	ldr	r2, [pc, #568]	; (8001c0c <HAL_DMA_IRQHandler+0x24c>)
 80019d2:	fba2 2303 	umull	r2, r3, r2, r3
 80019d6:	0a9b      	lsrs	r3, r3, #10
 80019d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ea:	2208      	movs	r2, #8
 80019ec:	409a      	lsls	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d01a      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0204 	bic.w	r2, r2, #4
 8001a12:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a18:	2208      	movs	r2, #8
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	f043 0201 	orr.w	r2, r3, #1
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a30:	2201      	movs	r2, #1
 8001a32:	409a      	lsls	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d012      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4e:	2201      	movs	r2, #1
 8001a50:	409a      	lsls	r2, r3
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5a:	f043 0202 	orr.w	r2, r3, #2
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a66:	2204      	movs	r2, #4
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d012      	beq.n	8001a98 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00b      	beq.n	8001a98 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	2204      	movs	r2, #4
 8001a86:	409a      	lsls	r2, r3
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a90:	f043 0204 	orr.w	r2, r3, #4
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9c:	2210      	movs	r2, #16
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d043      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d03c      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aba:	2210      	movs	r2, #16
 8001abc:	409a      	lsls	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d018      	beq.n	8001b02 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d108      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d024      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	4798      	blx	r3
 8001aee:	e01f      	b.n	8001b30 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d01b      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	4798      	blx	r3
 8001b00:	e016      	b.n	8001b30 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0208 	bic.w	r2, r2, #8
 8001b1e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b34:	2220      	movs	r2, #32
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 808f 	beq.w	8001c60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	f000 8087 	beq.w	8001c60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b56:	2220      	movs	r2, #32
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d136      	bne.n	8001bd8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0216 	bic.w	r2, r2, #22
 8001b78:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	695a      	ldr	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b88:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d103      	bne.n	8001b9a <HAL_DMA_IRQHandler+0x1da>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0208 	bic.w	r2, r2, #8
 8001ba8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	223f      	movs	r2, #63	; 0x3f
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d07e      	beq.n	8001ccc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
        }
        return;
 8001bd6:	e079      	b.n	8001ccc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01d      	beq.n	8001c22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10d      	bne.n	8001c10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d031      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
 8001c04:	e02c      	b.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
 8001c06:	bf00      	nop
 8001c08:	20000010 	.word	0x20000010
 8001c0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d023      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	4798      	blx	r3
 8001c20:	e01e      	b.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d10f      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0210 	bic.w	r2, r2, #16
 8001c3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d032      	beq.n	8001cce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d022      	beq.n	8001cba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2205      	movs	r2, #5
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d307      	bcc.n	8001ca8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f2      	bne.n	8001c8c <HAL_DMA_IRQHandler+0x2cc>
 8001ca6:	e000      	b.n	8001caa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ca8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
 8001cca:	e000      	b.n	8001cce <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ccc:	bf00      	nop
    }
  }
}
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	d108      	bne.n	8001d14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d12:	e007      	b.n	8001d24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	60da      	str	r2, [r3, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	3b10      	subs	r3, #16
 8001d40:	4a14      	ldr	r2, [pc, #80]	; (8001d94 <DMA_CalcBaseAndBitshift+0x64>)
 8001d42:	fba2 2303 	umull	r2, r3, r2, r3
 8001d46:	091b      	lsrs	r3, r3, #4
 8001d48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d4a:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <DMA_CalcBaseAndBitshift+0x68>)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2b03      	cmp	r3, #3
 8001d5c:	d909      	bls.n	8001d72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d66:	f023 0303 	bic.w	r3, r3, #3
 8001d6a:	1d1a      	adds	r2, r3, #4
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	659a      	str	r2, [r3, #88]	; 0x58
 8001d70:	e007      	b.n	8001d82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001d7a:	f023 0303 	bic.w	r3, r3, #3
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	aaaaaaab 	.word	0xaaaaaaab
 8001d98:	08006530 	.word	0x08006530

08001d9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d11f      	bne.n	8001df6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b03      	cmp	r3, #3
 8001dba:	d856      	bhi.n	8001e6a <DMA_CheckFifoParam+0xce>
 8001dbc:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <DMA_CheckFifoParam+0x28>)
 8001dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc2:	bf00      	nop
 8001dc4:	08001dd5 	.word	0x08001dd5
 8001dc8:	08001de7 	.word	0x08001de7
 8001dcc:	08001dd5 	.word	0x08001dd5
 8001dd0:	08001e6b 	.word	0x08001e6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d046      	beq.n	8001e6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de4:	e043      	b.n	8001e6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dee:	d140      	bne.n	8001e72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001df4:	e03d      	b.n	8001e72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dfe:	d121      	bne.n	8001e44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d837      	bhi.n	8001e76 <DMA_CheckFifoParam+0xda>
 8001e06:	a201      	add	r2, pc, #4	; (adr r2, 8001e0c <DMA_CheckFifoParam+0x70>)
 8001e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e0c:	08001e1d 	.word	0x08001e1d
 8001e10:	08001e23 	.word	0x08001e23
 8001e14:	08001e1d 	.word	0x08001e1d
 8001e18:	08001e35 	.word	0x08001e35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e20:	e030      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d025      	beq.n	8001e7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e32:	e022      	b.n	8001e7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001e3c:	d11f      	bne.n	8001e7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e42:	e01c      	b.n	8001e7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d903      	bls.n	8001e52 <DMA_CheckFifoParam+0xb6>
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d003      	beq.n	8001e58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e50:	e018      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
      break;
 8001e56:	e015      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00e      	beq.n	8001e82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	73fb      	strb	r3, [r7, #15]
      break;
 8001e68:	e00b      	b.n	8001e82 <DMA_CheckFifoParam+0xe6>
      break;
 8001e6a:	bf00      	nop
 8001e6c:	e00a      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e6e:	bf00      	nop
 8001e70:	e008      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e72:	bf00      	nop
 8001e74:	e006      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e76:	bf00      	nop
 8001e78:	e004      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e7a:	bf00      	nop
 8001e7c:	e002      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e7e:	bf00      	nop
 8001e80:	e000      	b.n	8001e84 <DMA_CheckFifoParam+0xe8>
      break;
 8001e82:	bf00      	nop
    }
  } 
  
  return status; 
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop

08001e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e159      	b.n	8002164 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	f040 8148 	bne.w	800215e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d005      	beq.n	8001ee6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d130      	bne.n	8001f48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	2203      	movs	r2, #3
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	4013      	ands	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 0201 	and.w	r2, r3, #1
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0303 	and.w	r3, r3, #3
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d017      	beq.n	8001f84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	2203      	movs	r2, #3
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	005b      	lsls	r3, r3, #1
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 0303 	and.w	r3, r3, #3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d123      	bne.n	8001fd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	08da      	lsrs	r2, r3, #3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3208      	adds	r2, #8
 8001f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	220f      	movs	r2, #15
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	08da      	lsrs	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3208      	adds	r2, #8
 8001fd2:	69b9      	ldr	r1, [r7, #24]
 8001fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0203 	and.w	r2, r3, #3
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4313      	orrs	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a2 	beq.w	800215e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b57      	ldr	r3, [pc, #348]	; (800217c <HAL_GPIO_Init+0x2e8>)
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	4a56      	ldr	r2, [pc, #344]	; (800217c <HAL_GPIO_Init+0x2e8>)
 8002024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002028:	6453      	str	r3, [r2, #68]	; 0x44
 800202a:	4b54      	ldr	r3, [pc, #336]	; (800217c <HAL_GPIO_Init+0x2e8>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002036:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_GPIO_Init+0x2ec>)
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	3302      	adds	r3, #2
 800203e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	220f      	movs	r2, #15
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	4013      	ands	r3, r2
 8002058:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a49      	ldr	r2, [pc, #292]	; (8002184 <HAL_GPIO_Init+0x2f0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x202>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a48      	ldr	r2, [pc, #288]	; (8002188 <HAL_GPIO_Init+0x2f4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x1fe>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a47      	ldr	r2, [pc, #284]	; (800218c <HAL_GPIO_Init+0x2f8>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x1fa>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a46      	ldr	r2, [pc, #280]	; (8002190 <HAL_GPIO_Init+0x2fc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x1f6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a45      	ldr	r2, [pc, #276]	; (8002194 <HAL_GPIO_Init+0x300>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x1f2>
 8002082:	2304      	movs	r3, #4
 8002084:	e008      	b.n	8002098 <HAL_GPIO_Init+0x204>
 8002086:	2307      	movs	r3, #7
 8002088:	e006      	b.n	8002098 <HAL_GPIO_Init+0x204>
 800208a:	2303      	movs	r3, #3
 800208c:	e004      	b.n	8002098 <HAL_GPIO_Init+0x204>
 800208e:	2302      	movs	r3, #2
 8002090:	e002      	b.n	8002098 <HAL_GPIO_Init+0x204>
 8002092:	2301      	movs	r3, #1
 8002094:	e000      	b.n	8002098 <HAL_GPIO_Init+0x204>
 8002096:	2300      	movs	r3, #0
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f002 0203 	and.w	r2, r2, #3
 800209e:	0092      	lsls	r2, r2, #2
 80020a0:	4093      	lsls	r3, r2
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020a8:	4935      	ldr	r1, [pc, #212]	; (8002180 <HAL_GPIO_Init+0x2ec>)
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	3302      	adds	r3, #2
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b6:	4b38      	ldr	r3, [pc, #224]	; (8002198 <HAL_GPIO_Init+0x304>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020da:	4a2f      	ldr	r2, [pc, #188]	; (8002198 <HAL_GPIO_Init+0x304>)
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020e0:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_GPIO_Init+0x304>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4013      	ands	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d003      	beq.n	8002104 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002104:	4a24      	ldr	r2, [pc, #144]	; (8002198 <HAL_GPIO_Init+0x304>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <HAL_GPIO_Init+0x304>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800212e:	4a1a      	ldr	r2, [pc, #104]	; (8002198 <HAL_GPIO_Init+0x304>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_GPIO_Init+0x304>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002158:	4a0f      	ldr	r2, [pc, #60]	; (8002198 <HAL_GPIO_Init+0x304>)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b0f      	cmp	r3, #15
 8002168:	f67f aea2 	bls.w	8001eb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800216c:	bf00      	nop
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40013800 	.word	0x40013800
 8002184:	40020000 	.word	0x40020000
 8002188:	40020400 	.word	0x40020400
 800218c:	40020800 	.word	0x40020800
 8002190:	40020c00 	.word	0x40020c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40013c00 	.word	0x40013c00

0800219c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
 80021a8:	4613      	mov	r3, r2
 80021aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b8:	e003      	b.n	80021c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b085      	sub	sp, #20
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021e0:	887a      	ldrh	r2, [r7, #2]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	041a      	lsls	r2, r3, #16
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	400b      	ands	r3, r1
 80021f0:	431a      	orrs	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	619a      	str	r2, [r3, #24]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e12b      	b.n	800246e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe feaa 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2224      	movs	r2, #36	; 0x24
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 0201 	bic.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002256:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002266:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002268:	f002 fac6 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 800226c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	4a81      	ldr	r2, [pc, #516]	; (8002478 <HAL_I2C_Init+0x274>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d807      	bhi.n	8002288 <HAL_I2C_Init+0x84>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4a80      	ldr	r2, [pc, #512]	; (800247c <HAL_I2C_Init+0x278>)
 800227c:	4293      	cmp	r3, r2
 800227e:	bf94      	ite	ls
 8002280:	2301      	movls	r3, #1
 8002282:	2300      	movhi	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e006      	b.n	8002296 <HAL_I2C_Init+0x92>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4a7d      	ldr	r2, [pc, #500]	; (8002480 <HAL_I2C_Init+0x27c>)
 800228c:	4293      	cmp	r3, r2
 800228e:	bf94      	ite	ls
 8002290:	2301      	movls	r3, #1
 8002292:	2300      	movhi	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0e7      	b.n	800246e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	4a78      	ldr	r2, [pc, #480]	; (8002484 <HAL_I2C_Init+0x280>)
 80022a2:	fba2 2303 	umull	r2, r3, r2, r3
 80022a6:	0c9b      	lsrs	r3, r3, #18
 80022a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4a6a      	ldr	r2, [pc, #424]	; (8002478 <HAL_I2C_Init+0x274>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d802      	bhi.n	80022d8 <HAL_I2C_Init+0xd4>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	3301      	adds	r3, #1
 80022d6:	e009      	b.n	80022ec <HAL_I2C_Init+0xe8>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022de:	fb02 f303 	mul.w	r3, r2, r3
 80022e2:	4a69      	ldr	r2, [pc, #420]	; (8002488 <HAL_I2C_Init+0x284>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	099b      	lsrs	r3, r3, #6
 80022ea:	3301      	adds	r3, #1
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	430b      	orrs	r3, r1
 80022f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	495c      	ldr	r1, [pc, #368]	; (8002478 <HAL_I2C_Init+0x274>)
 8002308:	428b      	cmp	r3, r1
 800230a:	d819      	bhi.n	8002340 <HAL_I2C_Init+0x13c>
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1e59      	subs	r1, r3, #1
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	fbb1 f3f3 	udiv	r3, r1, r3
 800231a:	1c59      	adds	r1, r3, #1
 800231c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002320:	400b      	ands	r3, r1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_I2C_Init+0x138>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	1e59      	subs	r1, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	fbb1 f3f3 	udiv	r3, r1, r3
 8002334:	3301      	adds	r3, #1
 8002336:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233a:	e051      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 800233c:	2304      	movs	r3, #4
 800233e:	e04f      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d111      	bne.n	800236c <HAL_I2C_Init+0x168>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e58      	subs	r0, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	440b      	add	r3, r1
 8002356:	fbb0 f3f3 	udiv	r3, r0, r3
 800235a:	3301      	adds	r3, #1
 800235c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002360:	2b00      	cmp	r3, #0
 8002362:	bf0c      	ite	eq
 8002364:	2301      	moveq	r3, #1
 8002366:	2300      	movne	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e012      	b.n	8002392 <HAL_I2C_Init+0x18e>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1e58      	subs	r0, r3, #1
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	0099      	lsls	r1, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002382:	3301      	adds	r3, #1
 8002384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002388:	2b00      	cmp	r3, #0
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_I2C_Init+0x196>
 8002396:	2301      	movs	r3, #1
 8002398:	e022      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10e      	bne.n	80023c0 <HAL_I2C_Init+0x1bc>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1e58      	subs	r0, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6859      	ldr	r1, [r3, #4]
 80023aa:	460b      	mov	r3, r1
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	440b      	add	r3, r1
 80023b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023be:	e00f      	b.n	80023e0 <HAL_I2C_Init+0x1dc>
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1e58      	subs	r0, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6859      	ldr	r1, [r3, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	0099      	lsls	r1, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d6:	3301      	adds	r3, #1
 80023d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	6809      	ldr	r1, [r1, #0]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800240e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6911      	ldr	r1, [r2, #16]
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68d2      	ldr	r2, [r2, #12]
 800241a:	4311      	orrs	r1, r2
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	430b      	orrs	r3, r1
 8002422:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	430a      	orrs	r2, r1
 800243e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2220      	movs	r2, #32
 800245a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	000186a0 	.word	0x000186a0
 800247c:	001e847f 	.word	0x001e847f
 8002480:	003d08ff 	.word	0x003d08ff
 8002484:	431bde83 	.word	0x431bde83
 8002488:	10624dd3 	.word	0x10624dd3

0800248c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af02      	add	r7, sp, #8
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	461a      	mov	r2, r3
 8002498:	460b      	mov	r3, r1
 800249a:	817b      	strh	r3, [r7, #10]
 800249c:	4613      	mov	r3, r2
 800249e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff f846 	bl	8001530 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b20      	cmp	r3, #32
 80024b0:	f040 80e0 	bne.w	8002674 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2319      	movs	r3, #25
 80024ba:	2201      	movs	r2, #1
 80024bc:	4970      	ldr	r1, [pc, #448]	; (8002680 <HAL_I2C_Master_Transmit+0x1f4>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fc72 	bl	8002da8 <I2C_WaitOnFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024ca:	2302      	movs	r3, #2
 80024cc:	e0d3      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_I2C_Master_Transmit+0x50>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0cc      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d007      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002510:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2221      	movs	r2, #33	; 0x21
 8002516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2210      	movs	r2, #16
 800251e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	893a      	ldrh	r2, [r7, #8]
 8002532:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a50      	ldr	r2, [pc, #320]	; (8002684 <HAL_I2C_Master_Transmit+0x1f8>)
 8002542:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002544:	8979      	ldrh	r1, [r7, #10]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	6a3a      	ldr	r2, [r7, #32]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 fac2 	bl	8002ad4 <I2C_MasterRequestWrite>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e08d      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800255a:	2300      	movs	r3, #0
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002570:	e066      	b.n	8002640 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	6a39      	ldr	r1, [r7, #32]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fcec 	bl	8002f54 <I2C_WaitOnTXEFlagUntilTimeout>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	2b04      	cmp	r3, #4
 8002588:	d107      	bne.n	800259a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002598:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e06b      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	781a      	ldrb	r2, [r3, #0]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	1c5a      	adds	r2, r3, #1
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	695b      	ldr	r3, [r3, #20]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d11b      	bne.n	8002614 <HAL_I2C_Master_Transmit+0x188>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d017      	beq.n	8002614 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	6a39      	ldr	r1, [r7, #32]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fcdc 	bl	8002fd6 <I2C_WaitOnBTFFlagUntilTimeout>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	2b04      	cmp	r3, #4
 800262a:	d107      	bne.n	800263c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e01a      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002644:	2b00      	cmp	r3, #0
 8002646:	d194      	bne.n	8002572 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e000      	b.n	8002676 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002674:	2302      	movs	r3, #2
  }
}
 8002676:	4618      	mov	r0, r3
 8002678:	3718      	adds	r7, #24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	00100002 	.word	0x00100002
 8002684:	ffff0000 	.word	0xffff0000

08002688 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08c      	sub	sp, #48	; 0x30
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4603      	mov	r3, r0
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	460b      	mov	r3, r1
 800269c:	813b      	strh	r3, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026a2:	f7fe ff45 	bl	8001530 <HAL_GetTick>
 80026a6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	f040 8208 	bne.w	8002ac6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2319      	movs	r3, #25
 80026bc:	2201      	movs	r2, #1
 80026be:	497b      	ldr	r1, [pc, #492]	; (80028ac <HAL_I2C_Mem_Read+0x224>)
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f000 fb71 	bl	8002da8 <I2C_WaitOnFlagUntilTimeout>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
 80026ce:	e1fb      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_I2C_Mem_Read+0x56>
 80026da:	2302      	movs	r3, #2
 80026dc:	e1f4      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d007      	beq.n	8002704 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f042 0201 	orr.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002712:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2222      	movs	r2, #34	; 0x22
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2240      	movs	r2, #64	; 0x40
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800273a:	b29a      	uxth	r2, r3
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4a5b      	ldr	r2, [pc, #364]	; (80028b0 <HAL_I2C_Mem_Read+0x228>)
 8002744:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002746:	88f8      	ldrh	r0, [r7, #6]
 8002748:	893a      	ldrh	r2, [r7, #8]
 800274a:	8979      	ldrh	r1, [r7, #10]
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	9301      	str	r3, [sp, #4]
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4603      	mov	r3, r0
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fa3e 	bl	8002bd8 <I2C_RequestMemoryRead>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e1b0      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276a:	2b00      	cmp	r3, #0
 800276c:	d113      	bne.n	8002796 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800276e:	2300      	movs	r3, #0
 8002770:	623b      	str	r3, [r7, #32]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	623b      	str	r3, [r7, #32]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	623b      	str	r3, [r7, #32]
 8002782:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	e184      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279a:	2b01      	cmp	r3, #1
 800279c:	d11b      	bne.n	80027d6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	61fb      	str	r3, [r7, #28]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	e164      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d11b      	bne.n	8002816 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	61bb      	str	r3, [r7, #24]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	e144      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002816:	2300      	movs	r3, #0
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	695b      	ldr	r3, [r3, #20]
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800282c:	e138      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	2b03      	cmp	r3, #3
 8002834:	f200 80f1 	bhi.w	8002a1a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800283c:	2b01      	cmp	r3, #1
 800283e:	d123      	bne.n	8002888 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 fc07 	bl	8003058 <I2C_WaitOnRXNEFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e139      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002886:	e10b      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288c:	2b02      	cmp	r3, #2
 800288e:	d14e      	bne.n	800292e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002896:	2200      	movs	r2, #0
 8002898:	4906      	ldr	r1, [pc, #24]	; (80028b4 <HAL_I2C_Mem_Read+0x22c>)
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fa84 	bl	8002da8 <I2C_WaitOnFlagUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d008      	beq.n	80028b8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e10e      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
 80028aa:	bf00      	nop
 80028ac:	00100002 	.word	0x00100002
 80028b0:	ffff0000 	.word	0xffff0000
 80028b4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691a      	ldr	r2, [r3, #16]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	b2d2      	uxtb	r2, r2
 80028d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691a      	ldr	r2, [r3, #16]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b29a      	uxth	r2, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800292c:	e0b8      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002934:	2200      	movs	r2, #0
 8002936:	4966      	ldr	r1, [pc, #408]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 fa35 	bl	8002da8 <I2C_WaitOnFlagUntilTimeout>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0bf      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002990:	2200      	movs	r2, #0
 8002992:	494f      	ldr	r1, [pc, #316]	; (8002ad0 <HAL_I2C_Mem_Read+0x448>)
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fa07 	bl	8002da8 <I2C_WaitOnFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e091      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	1c5a      	adds	r2, r3, #1
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b29a      	uxth	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a18:	e042      	b.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 fb1a 	bl	8003058 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e04c      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	691a      	ldr	r2, [r3, #16]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0304 	and.w	r3, r3, #4
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d118      	bne.n	8002aa0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f47f aec2 	bne.w	800282e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2220      	movs	r2, #32
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e000      	b.n	8002ac8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002ac6:	2302      	movs	r3, #2
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3728      	adds	r7, #40	; 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	00010004 	.word	0x00010004

08002ad4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d006      	beq.n	8002afe <I2C_MasterRequestWrite+0x2a>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d003      	beq.n	8002afe <I2C_MasterRequestWrite+0x2a>
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002afc:	d108      	bne.n	8002b10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	e00b      	b.n	8002b28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	2b12      	cmp	r3, #18
 8002b16:	d107      	bne.n	8002b28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	f000 f937 	bl	8002da8 <I2C_WaitOnFlagUntilTimeout>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00d      	beq.n	8002b5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b4e:	d103      	bne.n	8002b58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e035      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b64:	d108      	bne.n	8002b78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b74:	611a      	str	r2, [r3, #16]
 8002b76:	e01b      	b.n	8002bb0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b78:	897b      	ldrh	r3, [r7, #10]
 8002b7a:	11db      	asrs	r3, r3, #7
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	f003 0306 	and.w	r3, r3, #6
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	f063 030f 	orn	r3, r3, #15
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <I2C_MasterRequestWrite+0xfc>)
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f95d 	bl	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e010      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ba6:	897b      	ldrh	r3, [r7, #10]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4907      	ldr	r1, [pc, #28]	; (8002bd4 <I2C_MasterRequestWrite+0x100>)
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f94d 	bl	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	00010008 	.word	0x00010008
 8002bd4:	00010002 	.word	0x00010002

08002bd8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	4608      	mov	r0, r1
 8002be2:	4611      	mov	r1, r2
 8002be4:	461a      	mov	r2, r3
 8002be6:	4603      	mov	r3, r0
 8002be8:	817b      	strh	r3, [r7, #10]
 8002bea:	460b      	mov	r3, r1
 8002bec:	813b      	strh	r3, [r7, #8]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f8c2 	bl	8002da8 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c38:	d103      	bne.n	8002c42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e0aa      	b.n	8002d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	4952      	ldr	r1, [pc, #328]	; (8002da4 <I2C_RequestMemoryRead+0x1cc>)
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f8fa 	bl	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e097      	b.n	8002d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	6a39      	ldr	r1, [r7, #32]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f964 	bl	8002f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d107      	bne.n	8002caa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e076      	b.n	8002d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb4:	893b      	ldrh	r3, [r7, #8]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	611a      	str	r2, [r3, #16]
 8002cbe:	e021      	b.n	8002d04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cc0:	893b      	ldrh	r3, [r7, #8]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f93e 	bl	8002f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e050      	b.n	8002d9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d06:	6a39      	ldr	r1, [r7, #32]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f923 	bl	8002f54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00d      	beq.n	8002d30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d107      	bne.n	8002d2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e035      	b.n	8002d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f82b 	bl	8002da8 <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00d      	beq.n	8002d74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d66:	d103      	bne.n	8002d70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e013      	b.n	8002d9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d74:	897b      	ldrh	r3, [r7, #10]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	f043 0301 	orr.w	r3, r3, #1
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	6a3a      	ldr	r2, [r7, #32]
 8002d88:	4906      	ldr	r1, [pc, #24]	; (8002da4 <I2C_RequestMemoryRead+0x1cc>)
 8002d8a:	68f8      	ldr	r0, [r7, #12]
 8002d8c:	f000 f863 	bl	8002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	00010002 	.word	0x00010002

08002da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	603b      	str	r3, [r7, #0]
 8002db4:	4613      	mov	r3, r2
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db8:	e025      	b.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dc0:	d021      	beq.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc2:	f7fe fbb5 	bl	8001530 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d302      	bcc.n	8002dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d116      	bne.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	f043 0220 	orr.w	r2, r3, #32
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e023      	b.n	8002e4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d10d      	bne.n	8002e2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	43da      	mvns	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	e00c      	b.n	8002e46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4013      	ands	r3, r2
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2301      	moveq	r3, #1
 8002e40:	2300      	movne	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d0b6      	beq.n	8002dba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e64:	e051      	b.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e74:	d123      	bne.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f043 0204 	orr.w	r2, r3, #4
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e046      	b.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ec4:	d021      	beq.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec6:	f7fe fb33 	bl	8001530 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d302      	bcc.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d116      	bne.n	8002f0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f043 0220 	orr.w	r2, r3, #32
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e020      	b.n	8002f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	0c1b      	lsrs	r3, r3, #16
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d10c      	bne.n	8002f2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf14      	ite	ne
 8002f26:	2301      	movne	r3, #1
 8002f28:	2300      	moveq	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	e00b      	b.n	8002f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	43da      	mvns	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	bf14      	ite	ne
 8002f40:	2301      	movne	r3, #1
 8002f42:	2300      	moveq	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d18d      	bne.n	8002e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f60:	e02d      	b.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f8ce 	bl	8003104 <I2C_IsAcknowledgeFailed>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e02d      	b.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f78:	d021      	beq.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7a:	f7fe fad9 	bl	8001530 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d302      	bcc.n	8002f90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f043 0220 	orr.w	r2, r3, #32
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e007      	b.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b80      	cmp	r3, #128	; 0x80
 8002fca:	d1ca      	bne.n	8002f62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fe2:	e02d      	b.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f88d 	bl	8003104 <I2C_IsAcknowledgeFailed>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e02d      	b.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ffa:	d021      	beq.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffc:	f7fe fa98 	bl	8001530 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	68ba      	ldr	r2, [r7, #8]
 8003008:	429a      	cmp	r2, r3
 800300a:	d302      	bcc.n	8003012 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d116      	bne.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e007      	b.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d1ca      	bne.n	8002fe4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003064:	e042      	b.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b10      	cmp	r3, #16
 8003072:	d119      	bne.n	80030a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f06f 0210 	mvn.w	r2, #16
 800307c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e029      	b.n	80030fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a8:	f7fe fa42 	bl	8001530 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d302      	bcc.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2220      	movs	r2, #32
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	f043 0220 	orr.w	r2, r3, #32
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e007      	b.n	80030fc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f6:	2b40      	cmp	r3, #64	; 0x40
 80030f8:	d1b5      	bne.n	8003066 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311a:	d11b      	bne.n	8003154 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003124:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f043 0204 	orr.w	r2, r3, #4
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
	...

08003164 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e128      	b.n	80033c8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a90      	ldr	r2, [pc, #576]	; (80033d0 <HAL_I2S_Init+0x26c>)
 800318e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7fd ff3f 	bl	8001014 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2202      	movs	r2, #2
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	69db      	ldr	r3, [r3, #28]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031ac:	f023 030f 	bic.w	r3, r3, #15
 80031b0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2202      	movs	r2, #2
 80031b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d060      	beq.n	8003284 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d102      	bne.n	80031d0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80031ca:	2310      	movs	r3, #16
 80031cc:	617b      	str	r3, [r7, #20]
 80031ce:	e001      	b.n	80031d4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031d0:	2320      	movs	r3, #32
 80031d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d802      	bhi.n	80031e2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031e2:	2001      	movs	r0, #1
 80031e4:	f001 fc1e 	bl	8004a24 <HAL_RCCEx_GetPeriphCLKFreq>
 80031e8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f2:	d125      	bne.n	8003240 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d010      	beq.n	800321e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	68fa      	ldr	r2, [r7, #12]
 8003202:	fbb2 f2f3 	udiv	r2, r2, r3
 8003206:	4613      	mov	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	4413      	add	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	3305      	adds	r3, #5
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e01f      	b.n	800325e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	fbb2 f2f3 	udiv	r2, r2, r3
 8003228:	4613      	mov	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4413      	add	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	461a      	mov	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	fbb2 f3f3 	udiv	r3, r2, r3
 800323a:	3305      	adds	r3, #5
 800323c:	613b      	str	r3, [r7, #16]
 800323e:	e00e      	b.n	800325e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	fbb2 f2f3 	udiv	r2, r2, r3
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	461a      	mov	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	fbb2 f3f3 	udiv	r3, r2, r3
 800325a:	3305      	adds	r3, #5
 800325c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4a5c      	ldr	r2, [pc, #368]	; (80033d4 <HAL_I2S_Init+0x270>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	08db      	lsrs	r3, r3, #3
 8003268:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	e003      	b.n	800328c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003284:	2302      	movs	r3, #2
 8003286:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d902      	bls.n	8003298 <HAL_I2S_Init+0x134>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2bff      	cmp	r3, #255	; 0xff
 8003296:	d907      	bls.n	80032a8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	f043 0210 	orr.w	r2, r3, #16
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e08f      	b.n	80033c8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	ea42 0103 	orr.w	r1, r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032c6:	f023 030f 	bic.w	r3, r3, #15
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6851      	ldr	r1, [r2, #4]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6892      	ldr	r2, [r2, #8]
 80032d2:	4311      	orrs	r1, r2
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68d2      	ldr	r2, [r2, #12]
 80032d8:	4311      	orrs	r1, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6992      	ldr	r2, [r2, #24]
 80032de:	430a      	orrs	r2, r1
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d161      	bne.n	80033b8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a38      	ldr	r2, [pc, #224]	; (80033d8 <HAL_I2S_Init+0x274>)
 80032f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a37      	ldr	r2, [pc, #220]	; (80033dc <HAL_I2S_Init+0x278>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d101      	bne.n	8003308 <HAL_I2S_Init+0x1a4>
 8003304:	4b36      	ldr	r3, [pc, #216]	; (80033e0 <HAL_I2S_Init+0x27c>)
 8003306:	e001      	b.n	800330c <HAL_I2S_Init+0x1a8>
 8003308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800330c:	69db      	ldr	r3, [r3, #28]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	4932      	ldr	r1, [pc, #200]	; (80033dc <HAL_I2S_Init+0x278>)
 8003314:	428a      	cmp	r2, r1
 8003316:	d101      	bne.n	800331c <HAL_I2S_Init+0x1b8>
 8003318:	4a31      	ldr	r2, [pc, #196]	; (80033e0 <HAL_I2S_Init+0x27c>)
 800331a:	e001      	b.n	8003320 <HAL_I2S_Init+0x1bc>
 800331c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003320:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003324:	f023 030f 	bic.w	r3, r3, #15
 8003328:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <HAL_I2S_Init+0x278>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d101      	bne.n	8003338 <HAL_I2S_Init+0x1d4>
 8003334:	4b2a      	ldr	r3, [pc, #168]	; (80033e0 <HAL_I2S_Init+0x27c>)
 8003336:	e001      	b.n	800333c <HAL_I2S_Init+0x1d8>
 8003338:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800333c:	2202      	movs	r2, #2
 800333e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a25      	ldr	r2, [pc, #148]	; (80033dc <HAL_I2S_Init+0x278>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_I2S_Init+0x1ea>
 800334a:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <HAL_I2S_Init+0x27c>)
 800334c:	e001      	b.n	8003352 <HAL_I2S_Init+0x1ee>
 800334e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335e:	d003      	beq.n	8003368 <HAL_I2S_Init+0x204>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d103      	bne.n	8003370 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003368:	f44f 7380 	mov.w	r3, #256	; 0x100
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	e001      	b.n	8003374 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003370:	2300      	movs	r3, #0
 8003372:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800337e:	4313      	orrs	r3, r2
 8003380:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003388:	4313      	orrs	r3, r2
 800338a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003392:	4313      	orrs	r3, r2
 8003394:	b29a      	uxth	r2, r3
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	4313      	orrs	r3, r2
 800339a:	b29b      	uxth	r3, r3
 800339c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033a0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a0d      	ldr	r2, [pc, #52]	; (80033dc <HAL_I2S_Init+0x278>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_I2S_Init+0x24c>
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <HAL_I2S_Init+0x27c>)
 80033ae:	e001      	b.n	80033b4 <HAL_I2S_Init+0x250>
 80033b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b4:	897a      	ldrh	r2, [r7, #10]
 80033b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3720      	adds	r7, #32
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	080034db 	.word	0x080034db
 80033d4:	cccccccd 	.word	0xcccccccd
 80033d8:	08003905 	.word	0x08003905
 80033dc:	40003800 	.word	0x40003800
 80033e0:	40003400 	.word	0x40003400

080033e4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	881a      	ldrh	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	1c9a      	adds	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003450:	b29b      	uxth	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10e      	bne.n	8003474 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685a      	ldr	r2, [r3, #4]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003464:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ffb8 	bl	80033e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003474:	bf00      	nop
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348e:	b292      	uxth	r2, r2
 8003490:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	1c9a      	adds	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10e      	bne.n	80034d2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff93 	bl	80033f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034d2:	bf00      	nop
 80034d4:	3708      	adds	r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}

080034da <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	b086      	sub	sp, #24
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d13a      	bne.n	800356c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d109      	bne.n	8003514 <I2S_IRQHandler+0x3a>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350a:	2b40      	cmp	r3, #64	; 0x40
 800350c:	d102      	bne.n	8003514 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffb4 	bl	800347c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b40      	cmp	r3, #64	; 0x40
 800351c:	d126      	bne.n	800356c <I2S_IRQHandler+0x92>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0320 	and.w	r3, r3, #32
 8003528:	2b20      	cmp	r3, #32
 800352a:	d11f      	bne.n	800356c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800353a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800353c:	2300      	movs	r3, #0
 800353e:	613b      	str	r3, [r7, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	613b      	str	r3, [r7, #16]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f043 0202 	orr.w	r2, r3, #2
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff ff50 	bl	800340c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b03      	cmp	r3, #3
 8003576:	d136      	bne.n	80035e6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b02      	cmp	r3, #2
 8003580:	d109      	bne.n	8003596 <I2S_IRQHandler+0xbc>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b80      	cmp	r3, #128	; 0x80
 800358e:	d102      	bne.n	8003596 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7ff ff45 	bl	8003420 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0308 	and.w	r3, r3, #8
 800359c:	2b08      	cmp	r3, #8
 800359e:	d122      	bne.n	80035e6 <I2S_IRQHandler+0x10c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d11b      	bne.n	80035e6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035bc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d8:	f043 0204 	orr.w	r2, r3, #4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff ff13 	bl	800340c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b01      	cmp	r3, #1
 8003614:	d002      	beq.n	800361c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003616:	2302      	movs	r3, #2
 8003618:	77fb      	strb	r3, [r7, #31]
    goto error;
 800361a:	e160      	b.n	80038de <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003628:	887b      	ldrh	r3, [r7, #2]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e15a      	b.n	80038e8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800363e:	2302      	movs	r3, #2
 8003640:	e152      	b.n	80038e8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	69db      	ldr	r3, [r3, #28]
 800365c:	f003 0307 	and.w	r3, r3, #7
 8003660:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d002      	beq.n	800366e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	2b05      	cmp	r3, #5
 800366c:	d114      	bne.n	8003698 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800366e:	887b      	ldrh	r3, [r7, #2]
 8003670:	005b      	lsls	r3, r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003678:	887b      	ldrh	r3, [r7, #2]
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8003682:	887b      	ldrh	r3, [r7, #2]
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800368c:	887b      	ldrh	r3, [r7, #2]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	865a      	strh	r2, [r3, #50]	; 0x32
 8003696:	e00b      	b.n	80036b0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	887a      	ldrh	r2, [r7, #2]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	887a      	ldrh	r2, [r7, #2]
 80036a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	887a      	ldrh	r2, [r7, #2]
 80036ae:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2205      	movs	r2, #5
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c2:	4a8b      	ldr	r2, [pc, #556]	; (80038f0 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80036c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	4a8a      	ldr	r2, [pc, #552]	; (80038f4 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80036cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d2:	4a89      	ldr	r2, [pc, #548]	; (80038f8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80036d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	2200      	movs	r2, #0
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	2200      	movs	r2, #0
 80036e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	4a83      	ldr	r2, [pc, #524]	; (80038f8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80036ec:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69db      	ldr	r3, [r3, #28]
 80036f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f8:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003700:	d002      	beq.n	8003708 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d16b      	bne.n	80037e0 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003708:	1d3b      	adds	r3, r7, #4
 800370a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a79      	ldr	r2, [pc, #484]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800371a:	4b79      	ldr	r3, [pc, #484]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800371c:	e001      	b.n	8003722 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800371e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003722:	330c      	adds	r3, #12
 8003724:	4619      	mov	r1, r3
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800372e:	b29b      	uxth	r3, r3
 8003730:	f7fe f8ee 	bl	8001910 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a70      	ldr	r2, [pc, #448]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d101      	bne.n	8003742 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800373e:	4b70      	ldr	r3, [pc, #448]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003740:	e001      	b.n	8003746 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003742:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	496b      	ldr	r1, [pc, #428]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800374e:	428b      	cmp	r3, r1
 8003750:	d101      	bne.n	8003756 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8003752:	4b6b      	ldr	r3, [pc, #428]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003754:	e001      	b.n	800375a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003760:	f107 0308 	add.w	r3, r7, #8
 8003764:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800376a:	69bb      	ldr	r3, [r7, #24]
 800376c:	6819      	ldr	r1, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	330c      	adds	r3, #12
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377a:	b29b      	uxth	r3, r3
 800377c:	f7fe f8c8 	bl	8001910 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0202 	orr.w	r2, r2, #2
 800378e:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379e:	f000 809e 	beq.w	80038de <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a55      	ldr	r2, [pc, #340]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80037ac:	4b54      	ldr	r3, [pc, #336]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80037ae:	e001      	b.n	80037b4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80037b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4950      	ldr	r1, [pc, #320]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80037bc:	428b      	cmp	r3, r1
 80037be:	d101      	bne.n	80037c4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80037c0:	4b4f      	ldr	r3, [pc, #316]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80037c2:	e001      	b.n	80037c8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80037c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037cc:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69da      	ldr	r2, [r3, #28]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037dc:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80037de:	e07e      	b.n	80038de <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ee:	d10a      	bne.n	8003806 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	6819      	ldr	r1, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a38      	ldr	r2, [pc, #224]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800381e:	4b38      	ldr	r3, [pc, #224]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003820:	e001      	b.n	8003826 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003826:	330c      	adds	r3, #12
 8003828:	461a      	mov	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382e:	b29b      	uxth	r3, r3
 8003830:	f7fe f86e 	bl	8001910 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a30      	ldr	r2, [pc, #192]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800383e:	4b30      	ldr	r3, [pc, #192]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003840:	e001      	b.n	8003846 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003842:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	492b      	ldr	r1, [pc, #172]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800384e:	428b      	cmp	r3, r1
 8003850:	d101      	bne.n	8003856 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8003852:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003854:	e001      	b.n	800385a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003856:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800385a:	f042 0202 	orr.w	r2, r2, #2
 800385e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003860:	1d3b      	adds	r3, r7, #4
 8003862:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	4619      	mov	r1, r3
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003878:	b29b      	uxth	r3, r3
 800387a:	f7fe f849 	bl	8001910 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0201 	orr.w	r2, r2, #1
 800388c:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800389c:	d01e      	beq.n	80038dc <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d101      	bne.n	80038ac <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80038aa:	e001      	b.n	80038b0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80038ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4911      	ldr	r1, [pc, #68]	; (80038fc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80038b8:	428b      	cmp	r3, r1
 80038ba:	d101      	bne.n	80038c0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80038bc:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80038be:	e001      	b.n	80038c4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80038c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038c8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038d8:	61da      	str	r2, [r3, #28]
 80038da:	e000      	b.n	80038de <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80038dc:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80038e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3720      	adds	r7, #32
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	08003bad 	.word	0x08003bad
 80038f4:	08003bc9 	.word	0x08003bc9
 80038f8:	08003ca1 	.word	0x08003ca1
 80038fc:	40003800 	.word	0x40003800
 8003900:	40003400 	.word	0x40003400

08003904 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a92      	ldr	r2, [pc, #584]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d101      	bne.n	8003922 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800391e:	4b92      	ldr	r3, [pc, #584]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003920:	e001      	b.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003922:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a8b      	ldr	r2, [pc, #556]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800393c:	4b8a      	ldr	r3, [pc, #552]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800393e:	e001      	b.n	8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003940:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003950:	d004      	beq.n	800395c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f040 8099 	bne.w	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b02      	cmp	r3, #2
 8003964:	d107      	bne.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f9d5 	bl	8003d20 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d107      	bne.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003986:	2b00      	cmp	r3, #0
 8003988:	d002      	beq.n	8003990 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fa78 	bl	8003e80 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d13a      	bne.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d035      	beq.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a6e      	ldr	r2, [pc, #440]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039ae:	4b6e      	ldr	r3, [pc, #440]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039b0:	e001      	b.n	80039b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4969      	ldr	r1, [pc, #420]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039be:	428b      	cmp	r3, r1
 80039c0:	d101      	bne.n	80039c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039c2:	4b69      	ldr	r3, [pc, #420]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039c4:	e001      	b.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ce:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039de:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fcfe 	bl	800340c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	f040 80c3 	bne.w	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80bd 	beq.w	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a36:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a49      	ldr	r2, [pc, #292]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d101      	bne.n	8003a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a42:	4b49      	ldr	r3, [pc, #292]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a44:	e001      	b.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4944      	ldr	r1, [pc, #272]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a52:	428b      	cmp	r3, r1
 8003a54:	d101      	bne.n	8003a5a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a56:	4b44      	ldr	r3, [pc, #272]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a58:	e001      	b.n	8003a5e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a62:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a64:	2300      	movs	r3, #0
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7e:	f043 0204 	orr.w	r2, r3, #4
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff fcc0 	bl	800340c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a8c:	e089      	b.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f003 0302 	and.w	r3, r3, #2
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d107      	bne.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d002      	beq.n	8003aa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f96e 	bl	8003d84 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d002      	beq.n	8003ac2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f9ad 	bl	8003e1c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d12f      	bne.n	8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f003 0320 	and.w	r3, r3, #32
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d02a      	beq.n	8003b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ae4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1e      	ldr	r2, [pc, #120]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d101      	bne.n	8003af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003af2:	e001      	b.n	8003af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003af4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4919      	ldr	r1, [pc, #100]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d101      	bne.n	8003b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b04:	4b18      	ldr	r3, [pc, #96]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b06:	e001      	b.n	8003b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b10:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f043 0202 	orr.w	r2, r3, #2
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff fc70 	bl	800340c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f003 0308 	and.w	r3, r3, #8
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d136      	bne.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d031      	beq.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d101      	bne.n	8003b4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b4c:	e001      	b.n	8003b52 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4902      	ldr	r1, [pc, #8]	; (8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b5a:	428b      	cmp	r3, r1
 8003b5c:	d106      	bne.n	8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003b5e:	4b02      	ldr	r3, [pc, #8]	; (8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b60:	e006      	b.n	8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003b62:	bf00      	nop
 8003b64:	40003800 	.word	0x40003800
 8003b68:	40003400 	.word	0x40003400
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b74:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	685a      	ldr	r2, [r3, #4]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b84:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f043 0204 	orr.w	r2, r3, #4
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff fc36 	bl	800340c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba0:	e000      	b.n	8003ba4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ba2:	bf00      	nop
}
 8003ba4:	bf00      	nop
 8003ba6:	3720      	adds	r7, #32
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7fc fea0 	bl	8000900 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003bc0:	bf00      	nop
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d155      	bne.n	8003c8a <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bec:	d006      	beq.n	8003bfc <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d11e      	bne.n	8003c3a <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a25      	ldr	r2, [pc, #148]	; (8003c98 <I2SEx_TxRxDMACplt+0xd0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <I2SEx_TxRxDMACplt+0x42>
 8003c06:	4b25      	ldr	r3, [pc, #148]	; (8003c9c <I2SEx_TxRxDMACplt+0xd4>)
 8003c08:	e001      	b.n	8003c0e <I2SEx_TxRxDMACplt+0x46>
 8003c0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4920      	ldr	r1, [pc, #128]	; (8003c98 <I2SEx_TxRxDMACplt+0xd0>)
 8003c16:	428b      	cmp	r3, r1
 8003c18:	d101      	bne.n	8003c1e <I2SEx_TxRxDMACplt+0x56>
 8003c1a:	4b20      	ldr	r3, [pc, #128]	; (8003c9c <I2SEx_TxRxDMACplt+0xd4>)
 8003c1c:	e001      	b.n	8003c22 <I2SEx_TxRxDMACplt+0x5a>
 8003c1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0202 	bic.w	r2, r2, #2
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	e01d      	b.n	8003c76 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a12      	ldr	r2, [pc, #72]	; (8003c98 <I2SEx_TxRxDMACplt+0xd0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d101      	bne.n	8003c58 <I2SEx_TxRxDMACplt+0x90>
 8003c54:	4b11      	ldr	r3, [pc, #68]	; (8003c9c <I2SEx_TxRxDMACplt+0xd4>)
 8003c56:	e001      	b.n	8003c5c <I2SEx_TxRxDMACplt+0x94>
 8003c58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	490d      	ldr	r1, [pc, #52]	; (8003c98 <I2SEx_TxRxDMACplt+0xd0>)
 8003c64:	428b      	cmp	r3, r1
 8003c66:	d101      	bne.n	8003c6c <I2SEx_TxRxDMACplt+0xa4>
 8003c68:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <I2SEx_TxRxDMACplt+0xd4>)
 8003c6a:	e001      	b.n	8003c70 <I2SEx_TxRxDMACplt+0xa8>
 8003c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c70:	f022 0202 	bic.w	r2, r2, #2
 8003c74:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7fc fe50 	bl	8000930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40003800 	.word	0x40003800
 8003c9c:	40003400 	.word	0x40003400

08003ca0 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0203 	bic.w	r2, r2, #3
 8003cbc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <I2SEx_TxRxDMAError+0x78>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d101      	bne.n	8003ccc <I2SEx_TxRxDMAError+0x2c>
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <I2SEx_TxRxDMAError+0x7c>)
 8003cca:	e001      	b.n	8003cd0 <I2SEx_TxRxDMAError+0x30>
 8003ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4910      	ldr	r1, [pc, #64]	; (8003d18 <I2SEx_TxRxDMAError+0x78>)
 8003cd8:	428b      	cmp	r3, r1
 8003cda:	d101      	bne.n	8003ce0 <I2SEx_TxRxDMAError+0x40>
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <I2SEx_TxRxDMAError+0x7c>)
 8003cde:	e001      	b.n	8003ce4 <I2SEx_TxRxDMAError+0x44>
 8003ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce4:	f022 0203 	bic.w	r2, r2, #3
 8003ce8:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	f043 0208 	orr.w	r2, r3, #8
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f7ff fb7e 	bl	800340c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}
 8003d18:	40003800 	.word	0x40003800
 8003d1c:	40003400 	.word	0x40003400

08003d20 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	1c99      	adds	r1, r3, #2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6251      	str	r1, [r2, #36]	; 0x24
 8003d32:	881a      	ldrh	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d113      	bne.n	8003d7a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fc fddb 	bl	8000930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	1c99      	adds	r1, r3, #2
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6251      	str	r1, [r2, #36]	; 0x24
 8003d96:	8819      	ldrh	r1, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <I2SEx_TxISR_I2SExt+0x90>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <I2SEx_TxISR_I2SExt+0x22>
 8003da2:	4b1d      	ldr	r3, [pc, #116]	; (8003e18 <I2SEx_TxISR_I2SExt+0x94>)
 8003da4:	e001      	b.n	8003daa <I2SEx_TxISR_I2SExt+0x26>
 8003da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003daa:	460a      	mov	r2, r1
 8003dac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d121      	bne.n	8003e0a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <I2SEx_TxISR_I2SExt+0x90>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d101      	bne.n	8003dd4 <I2SEx_TxISR_I2SExt+0x50>
 8003dd0:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <I2SEx_TxISR_I2SExt+0x94>)
 8003dd2:	e001      	b.n	8003dd8 <I2SEx_TxISR_I2SExt+0x54>
 8003dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	490d      	ldr	r1, [pc, #52]	; (8003e14 <I2SEx_TxISR_I2SExt+0x90>)
 8003de0:	428b      	cmp	r3, r1
 8003de2:	d101      	bne.n	8003de8 <I2SEx_TxISR_I2SExt+0x64>
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <I2SEx_TxISR_I2SExt+0x94>)
 8003de6:	e001      	b.n	8003dec <I2SEx_TxISR_I2SExt+0x68>
 8003de8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003df0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fc fd93 	bl	8000930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40003800 	.word	0x40003800
 8003e18:	40003400 	.word	0x40003400

08003e1c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68d8      	ldr	r0, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	1c99      	adds	r1, r3, #2
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e34:	b282      	uxth	r2, r0
 8003e36:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d113      	bne.n	8003e78 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e5e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fc fd5c 	bl	8000930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e78:	bf00      	nop
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a20      	ldr	r2, [pc, #128]	; (8003f10 <I2SEx_RxISR_I2SExt+0x90>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <I2SEx_RxISR_I2SExt+0x16>
 8003e92:	4b20      	ldr	r3, [pc, #128]	; (8003f14 <I2SEx_RxISR_I2SExt+0x94>)
 8003e94:	e001      	b.n	8003e9a <I2SEx_RxISR_I2SExt+0x1a>
 8003e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9a:	68d8      	ldr	r0, [r3, #12]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	1c99      	adds	r1, r3, #2
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003ea6:	b282      	uxth	r2, r0
 8003ea8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d121      	bne.n	8003f06 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <I2SEx_RxISR_I2SExt+0x90>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d101      	bne.n	8003ed0 <I2SEx_RxISR_I2SExt+0x50>
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <I2SEx_RxISR_I2SExt+0x94>)
 8003ece:	e001      	b.n	8003ed4 <I2SEx_RxISR_I2SExt+0x54>
 8003ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	490d      	ldr	r1, [pc, #52]	; (8003f10 <I2SEx_RxISR_I2SExt+0x90>)
 8003edc:	428b      	cmp	r3, r1
 8003ede:	d101      	bne.n	8003ee4 <I2SEx_RxISR_I2SExt+0x64>
 8003ee0:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <I2SEx_RxISR_I2SExt+0x94>)
 8003ee2:	e001      	b.n	8003ee8 <I2SEx_RxISR_I2SExt+0x68>
 8003ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003eec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d106      	bne.n	8003f06 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fc fd15 	bl	8000930 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40003800 	.word	0x40003800
 8003f14:	40003400 	.word	0x40003400

08003f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e267      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d075      	beq.n	8004022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f36:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d00c      	beq.n	8003f5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f42:	4b85      	ldr	r3, [pc, #532]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d112      	bne.n	8003f74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f4e:	4b82      	ldr	r3, [pc, #520]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f5a:	d10b      	bne.n	8003f74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5c:	4b7e      	ldr	r3, [pc, #504]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d05b      	beq.n	8004020 <HAL_RCC_OscConfig+0x108>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d157      	bne.n	8004020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e242      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f7c:	d106      	bne.n	8003f8c <HAL_RCC_OscConfig+0x74>
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a75      	ldr	r2, [pc, #468]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003f84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	e01d      	b.n	8003fc8 <HAL_RCC_OscConfig+0xb0>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x98>
 8003f96:	4b70      	ldr	r3, [pc, #448]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a6f      	ldr	r2, [pc, #444]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4b6d      	ldr	r3, [pc, #436]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a6c      	ldr	r2, [pc, #432]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCC_OscConfig+0xb0>
 8003fb0:	4b69      	ldr	r3, [pc, #420]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a68      	ldr	r2, [pc, #416]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	4b66      	ldr	r3, [pc, #408]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a65      	ldr	r2, [pc, #404]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003fc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d013      	beq.n	8003ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd0:	f7fd faae 	bl	8001530 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd6:	e008      	b.n	8003fea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fd8:	f7fd faaa 	bl	8001530 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	2b64      	cmp	r3, #100	; 0x64
 8003fe4:	d901      	bls.n	8003fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e207      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	4b5b      	ldr	r3, [pc, #364]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0f0      	beq.n	8003fd8 <HAL_RCC_OscConfig+0xc0>
 8003ff6:	e014      	b.n	8004022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fa9a 	bl	8001530 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004000:	f7fd fa96 	bl	8001530 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e1f3      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004012:	4b51      	ldr	r3, [pc, #324]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0xe8>
 800401e:	e000      	b.n	8004022 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d063      	beq.n	80040f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800402e:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403a:	4b47      	ldr	r3, [pc, #284]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004042:	2b08      	cmp	r3, #8
 8004044:	d11c      	bne.n	8004080 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004046:	4b44      	ldr	r3, [pc, #272]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d116      	bne.n	8004080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004052:	4b41      	ldr	r3, [pc, #260]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_RCC_OscConfig+0x152>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d001      	beq.n	800406a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e1c7      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406a:	4b3b      	ldr	r3, [pc, #236]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4937      	ldr	r1, [pc, #220]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407e:	e03a      	b.n	80040f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d020      	beq.n	80040ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004088:	4b34      	ldr	r3, [pc, #208]	; (800415c <HAL_RCC_OscConfig+0x244>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fd fa4f 	bl	8001530 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004096:	f7fd fa4b 	bl	8001530 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e1a8      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4925      	ldr	r1, [pc, #148]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]
 80040c8:	e015      	b.n	80040f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <HAL_RCC_OscConfig+0x244>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd fa2e 	bl	8001530 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d8:	f7fd fa2a 	bl	8001530 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e187      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ea:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d036      	beq.n	8004170 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <HAL_RCC_OscConfig+0x248>)
 800410c:	2201      	movs	r2, #1
 800410e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fd fa0e 	bl	8001530 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004118:	f7fd fa0a 	bl	8001530 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e167      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_RCC_OscConfig+0x240>)
 800412c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x200>
 8004136:	e01b      	b.n	8004170 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_OscConfig+0x248>)
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413e:	f7fd f9f7 	bl	8001530 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004144:	e00e      	b.n	8004164 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004146:	f7fd f9f3 	bl	8001530 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d907      	bls.n	8004164 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e150      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
 8004158:	40023800 	.word	0x40023800
 800415c:	42470000 	.word	0x42470000
 8004160:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004164:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ea      	bne.n	8004146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8097 	beq.w	80042ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004182:	4b81      	ldr	r3, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10f      	bne.n	80041ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	4b7d      	ldr	r3, [pc, #500]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a7c      	ldr	r2, [pc, #496]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
 800419e:	4b7a      	ldr	r3, [pc, #488]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041aa:	2301      	movs	r3, #1
 80041ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ae:	4b77      	ldr	r3, [pc, #476]	; (800438c <HAL_RCC_OscConfig+0x474>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d118      	bne.n	80041ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ba:	4b74      	ldr	r3, [pc, #464]	; (800438c <HAL_RCC_OscConfig+0x474>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a73      	ldr	r2, [pc, #460]	; (800438c <HAL_RCC_OscConfig+0x474>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c6:	f7fd f9b3 	bl	8001530 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ce:	f7fd f9af 	bl	8001530 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e10c      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e0:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_RCC_OscConfig+0x474>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d106      	bne.n	8004202 <HAL_RCC_OscConfig+0x2ea>
 80041f4:	4b64      	ldr	r3, [pc, #400]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	4a63      	ldr	r2, [pc, #396]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004200:	e01c      	b.n	800423c <HAL_RCC_OscConfig+0x324>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b05      	cmp	r3, #5
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0x30c>
 800420a:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a5e      	ldr	r2, [pc, #376]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
 8004216:	4b5c      	ldr	r3, [pc, #368]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4a5b      	ldr	r2, [pc, #364]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6713      	str	r3, [r2, #112]	; 0x70
 8004222:	e00b      	b.n	800423c <HAL_RCC_OscConfig+0x324>
 8004224:	4b58      	ldr	r3, [pc, #352]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a57      	ldr	r2, [pc, #348]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	4b55      	ldr	r3, [pc, #340]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	4a54      	ldr	r2, [pc, #336]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004236:	f023 0304 	bic.w	r3, r3, #4
 800423a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004244:	f7fd f974 	bl	8001530 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424a:	e00a      	b.n	8004262 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f7fd f970 	bl	8001530 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	; 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e0cb      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	4b49      	ldr	r3, [pc, #292]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ee      	beq.n	800424c <HAL_RCC_OscConfig+0x334>
 800426e:	e014      	b.n	800429a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004270:	f7fd f95e 	bl	8001530 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004276:	e00a      	b.n	800428e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fd f95a 	bl	8001530 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0b5      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428e:	4b3e      	ldr	r3, [pc, #248]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1ee      	bne.n	8004278 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a0:	4b39      	ldr	r3, [pc, #228]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	4a38      	ldr	r2, [pc, #224]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80a1 	beq.w	80043f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b6:	4b34      	ldr	r3, [pc, #208]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d05c      	beq.n	800437c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d141      	bne.n	800434e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ca:	4b31      	ldr	r3, [pc, #196]	; (8004390 <HAL_RCC_OscConfig+0x478>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7fd f92e 	bl	8001530 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fd f92a 	bl	8001530 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e087      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	4b27      	ldr	r3, [pc, #156]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	3b01      	subs	r3, #1
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	491b      	ldr	r1, [pc, #108]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 800431c:	4313      	orrs	r3, r2
 800431e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_RCC_OscConfig+0x478>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004326:	f7fd f903 	bl	8001530 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800432e:	f7fd f8ff 	bl	8001530 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e05c      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCC_OscConfig+0x416>
 800434c:	e054      	b.n	80043f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800434e:	4b10      	ldr	r3, [pc, #64]	; (8004390 <HAL_RCC_OscConfig+0x478>)
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fd f8ec 	bl	8001530 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435c:	f7fd f8e8 	bl	8001530 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e045      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <HAL_RCC_OscConfig+0x470>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x444>
 800437a:	e03d      	b.n	80043f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d107      	bne.n	8004394 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e038      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
 8004388:	40023800 	.word	0x40023800
 800438c:	40007000 	.word	0x40007000
 8004390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x4ec>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d028      	beq.n	80043f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d121      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d11a      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d111      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	3b01      	subs	r3, #1
 80043de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800

08004408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0cc      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800441c:	4b68      	ldr	r3, [pc, #416]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d90c      	bls.n	8004444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b65      	ldr	r3, [pc, #404]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b63      	ldr	r3, [pc, #396]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e0b8      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d020      	beq.n	8004492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d005      	beq.n	8004468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800445c:	4b59      	ldr	r3, [pc, #356]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	4a58      	ldr	r2, [pc, #352]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004462:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004466:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0308 	and.w	r3, r3, #8
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004474:	4b53      	ldr	r3, [pc, #332]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a52      	ldr	r2, [pc, #328]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800447e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	494d      	ldr	r1, [pc, #308]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	4313      	orrs	r3, r2
 8004490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d044      	beq.n	8004528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d107      	bne.n	80044b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	4b47      	ldr	r3, [pc, #284]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d119      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e07f      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d107      	bne.n	80044d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c6:	4b3f      	ldr	r3, [pc, #252]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e06f      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d6:	4b3b      	ldr	r3, [pc, #236]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e067      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044e6:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f023 0203 	bic.w	r2, r3, #3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4934      	ldr	r1, [pc, #208]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	4313      	orrs	r3, r2
 80044f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044f8:	f7fd f81a 	bl	8001530 <HAL_GetTick>
 80044fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004500:	f7fd f816 	bl	8001530 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e04f      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004516:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 020c 	and.w	r2, r3, #12
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	429a      	cmp	r2, r3
 8004526:	d1eb      	bne.n	8004500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d20c      	bcs.n	8004550 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004536:	4b22      	ldr	r3, [pc, #136]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453e:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d001      	beq.n	8004550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e032      	b.n	80045b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0304 	and.w	r3, r3, #4
 8004558:	2b00      	cmp	r3, #0
 800455a:	d008      	beq.n	800456e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800455c:	4b19      	ldr	r3, [pc, #100]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4916      	ldr	r1, [pc, #88]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	4313      	orrs	r3, r2
 800456c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d009      	beq.n	800458e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	490e      	ldr	r1, [pc, #56]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800458e:	f000 f821 	bl	80045d4 <HAL_RCC_GetSysClockFreq>
 8004592:	4602      	mov	r2, r0
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	091b      	lsrs	r3, r3, #4
 800459a:	f003 030f 	and.w	r3, r3, #15
 800459e:	490a      	ldr	r1, [pc, #40]	; (80045c8 <HAL_RCC_ClockConfig+0x1c0>)
 80045a0:	5ccb      	ldrb	r3, [r1, r3]
 80045a2:	fa22 f303 	lsr.w	r3, r2, r3
 80045a6:	4a09      	ldr	r2, [pc, #36]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 80045a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045aa:	4b09      	ldr	r3, [pc, #36]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fc ff7a 	bl	80014a8 <HAL_InitTick>

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}
 80045be:	bf00      	nop
 80045c0:	40023c00 	.word	0x40023c00
 80045c4:	40023800 	.word	0x40023800
 80045c8:	08006518 	.word	0x08006518
 80045cc:	20000010 	.word	0x20000010
 80045d0:	20000014 	.word	0x20000014

080045d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045d8:	b094      	sub	sp, #80	; 0x50
 80045da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045dc:	2300      	movs	r3, #0
 80045de:	647b      	str	r3, [r7, #68]	; 0x44
 80045e0:	2300      	movs	r3, #0
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e4:	2300      	movs	r3, #0
 80045e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045ec:	4b79      	ldr	r3, [pc, #484]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f003 030c 	and.w	r3, r3, #12
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d00d      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x40>
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	f200 80e1 	bhi.w	80047c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <HAL_RCC_GetSysClockFreq+0x34>
 8004602:	2b04      	cmp	r3, #4
 8004604:	d003      	beq.n	800460e <HAL_RCC_GetSysClockFreq+0x3a>
 8004606:	e0db      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004608:	4b73      	ldr	r3, [pc, #460]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800460c:	e0db      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800460e:	4b73      	ldr	r3, [pc, #460]	; (80047dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004610:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004612:	e0d8      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004614:	4b6f      	ldr	r3, [pc, #444]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800461c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800461e:	4b6d      	ldr	r3, [pc, #436]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d063      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462a:	4b6a      	ldr	r3, [pc, #424]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	099b      	lsrs	r3, r3, #6
 8004630:	2200      	movs	r2, #0
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38
 8004634:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463c:	633b      	str	r3, [r7, #48]	; 0x30
 800463e:	2300      	movs	r3, #0
 8004640:	637b      	str	r3, [r7, #52]	; 0x34
 8004642:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004646:	4622      	mov	r2, r4
 8004648:	462b      	mov	r3, r5
 800464a:	f04f 0000 	mov.w	r0, #0
 800464e:	f04f 0100 	mov.w	r1, #0
 8004652:	0159      	lsls	r1, r3, #5
 8004654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004658:	0150      	lsls	r0, r2, #5
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4621      	mov	r1, r4
 8004660:	1a51      	subs	r1, r2, r1
 8004662:	6139      	str	r1, [r7, #16]
 8004664:	4629      	mov	r1, r5
 8004666:	eb63 0301 	sbc.w	r3, r3, r1
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004678:	4659      	mov	r1, fp
 800467a:	018b      	lsls	r3, r1, #6
 800467c:	4651      	mov	r1, sl
 800467e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004682:	4651      	mov	r1, sl
 8004684:	018a      	lsls	r2, r1, #6
 8004686:	4651      	mov	r1, sl
 8004688:	ebb2 0801 	subs.w	r8, r2, r1
 800468c:	4659      	mov	r1, fp
 800468e:	eb63 0901 	sbc.w	r9, r3, r1
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800469e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046a6:	4690      	mov	r8, r2
 80046a8:	4699      	mov	r9, r3
 80046aa:	4623      	mov	r3, r4
 80046ac:	eb18 0303 	adds.w	r3, r8, r3
 80046b0:	60bb      	str	r3, [r7, #8]
 80046b2:	462b      	mov	r3, r5
 80046b4:	eb49 0303 	adc.w	r3, r9, r3
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046c6:	4629      	mov	r1, r5
 80046c8:	024b      	lsls	r3, r1, #9
 80046ca:	4621      	mov	r1, r4
 80046cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046d0:	4621      	mov	r1, r4
 80046d2:	024a      	lsls	r2, r1, #9
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046da:	2200      	movs	r2, #0
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80046de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046e4:	f7fb fdcc 	bl	8000280 <__aeabi_uldivmod>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4613      	mov	r3, r2
 80046ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046f0:	e058      	b.n	80047a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046f2:	4b38      	ldr	r3, [pc, #224]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	099b      	lsrs	r3, r3, #6
 80046f8:	2200      	movs	r2, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	4611      	mov	r1, r2
 80046fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004702:	623b      	str	r3, [r7, #32]
 8004704:	2300      	movs	r3, #0
 8004706:	627b      	str	r3, [r7, #36]	; 0x24
 8004708:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800470c:	4642      	mov	r2, r8
 800470e:	464b      	mov	r3, r9
 8004710:	f04f 0000 	mov.w	r0, #0
 8004714:	f04f 0100 	mov.w	r1, #0
 8004718:	0159      	lsls	r1, r3, #5
 800471a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800471e:	0150      	lsls	r0, r2, #5
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4641      	mov	r1, r8
 8004726:	ebb2 0a01 	subs.w	sl, r2, r1
 800472a:	4649      	mov	r1, r9
 800472c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800473c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004740:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004744:	ebb2 040a 	subs.w	r4, r2, sl
 8004748:	eb63 050b 	sbc.w	r5, r3, fp
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	00eb      	lsls	r3, r5, #3
 8004756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800475a:	00e2      	lsls	r2, r4, #3
 800475c:	4614      	mov	r4, r2
 800475e:	461d      	mov	r5, r3
 8004760:	4643      	mov	r3, r8
 8004762:	18e3      	adds	r3, r4, r3
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	464b      	mov	r3, r9
 8004768:	eb45 0303 	adc.w	r3, r5, r3
 800476c:	607b      	str	r3, [r7, #4]
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800477a:	4629      	mov	r1, r5
 800477c:	028b      	lsls	r3, r1, #10
 800477e:	4621      	mov	r1, r4
 8004780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004784:	4621      	mov	r1, r4
 8004786:	028a      	lsls	r2, r1, #10
 8004788:	4610      	mov	r0, r2
 800478a:	4619      	mov	r1, r3
 800478c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800478e:	2200      	movs	r2, #0
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	61fa      	str	r2, [r7, #28]
 8004794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004798:	f7fb fd72 	bl	8000280 <__aeabi_uldivmod>
 800479c:	4602      	mov	r2, r0
 800479e:	460b      	mov	r3, r1
 80047a0:	4613      	mov	r3, r2
 80047a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047a4:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	3301      	adds	r3, #1
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047be:	e002      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c0:	4b05      	ldr	r3, [pc, #20]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80047c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3750      	adds	r7, #80	; 0x50
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047d2:	bf00      	nop
 80047d4:	40023800 	.word	0x40023800
 80047d8:	00f42400 	.word	0x00f42400
 80047dc:	007a1200 	.word	0x007a1200

080047e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047e6:	681b      	ldr	r3, [r3, #0]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20000010 	.word	0x20000010

080047f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80047fc:	f7ff fff0 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004800:	4602      	mov	r2, r0
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	0a9b      	lsrs	r3, r3, #10
 8004808:	f003 0307 	and.w	r3, r3, #7
 800480c:	4903      	ldr	r1, [pc, #12]	; (800481c <HAL_RCC_GetPCLK1Freq+0x24>)
 800480e:	5ccb      	ldrb	r3, [r1, r3]
 8004810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004814:	4618      	mov	r0, r3
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40023800 	.word	0x40023800
 800481c:	08006528 	.word	0x08006528

08004820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004824:	f7ff ffdc 	bl	80047e0 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0b5b      	lsrs	r3, r3, #13
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4903      	ldr	r1, [pc, #12]	; (8004844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800483c:	4618      	mov	r0, r3
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40023800 	.word	0x40023800
 8004844:	08006528 	.word	0x08006528

08004848 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800486c:	2b00      	cmp	r3, #0
 800486e:	d035      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004870:	4b67      	ldr	r3, [pc, #412]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004876:	f7fc fe5b 	bl	8001530 <HAL_GetTick>
 800487a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800487c:	e008      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800487e:	f7fc fe57 	bl	8001530 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d901      	bls.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e0ba      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004890:	4b60      	ldr	r3, [pc, #384]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f0      	bne.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	019a      	lsls	r2, r3, #6
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	071b      	lsls	r3, r3, #28
 80048a8:	495a      	ldr	r1, [pc, #360]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80048b0:	4b57      	ldr	r3, [pc, #348]	; (8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80048b6:	f7fc fe3b 	bl	8001530 <HAL_GetTick>
 80048ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048bc:	e008      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80048be:	f7fc fe37 	bl	8001530 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d901      	bls.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	e09a      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80048d0:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0f0      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0302 	and.w	r3, r3, #2
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 8083 	beq.w	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4b49      	ldr	r3, [pc, #292]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	4a48      	ldr	r2, [pc, #288]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048f8:	6413      	str	r3, [r2, #64]	; 0x40
 80048fa:	4b46      	ldr	r3, [pc, #280]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004902:	60fb      	str	r3, [r7, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004906:	4b44      	ldr	r3, [pc, #272]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a43      	ldr	r2, [pc, #268]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800490c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004910:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004912:	f7fc fe0d 	bl	8001530 <HAL_GetTick>
 8004916:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800491a:	f7fc fe09 	bl	8001530 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e06c      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800492c:	4b3a      	ldr	r3, [pc, #232]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004938:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004940:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	429a      	cmp	r2, r3
 8004954:	d028      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004956:	4b2f      	ldr	r3, [pc, #188]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800495a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004960:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004962:	2201      	movs	r2, #1
 8004964:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004966:	4b2d      	ldr	r3, [pc, #180]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800496c:	4a29      	ldr	r2, [pc, #164]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004972:	4b28      	ldr	r3, [pc, #160]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b01      	cmp	r3, #1
 800497c:	d114      	bne.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800497e:	f7fc fdd7 	bl	8001530 <HAL_GetTick>
 8004982:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fc fdd3 	bl	8001530 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e034      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0ee      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b4:	d10d      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80049b6:	4b17      	ldr	r3, [pc, #92]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	4912      	ldr	r1, [pc, #72]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	608b      	str	r3, [r1, #8]
 80049d0:	e005      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80049d2:	4b10      	ldr	r3, [pc, #64]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	4a0f      	ldr	r2, [pc, #60]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049d8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80049dc:	6093      	str	r3, [r2, #8]
 80049de:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ea:	490a      	ldr	r1, [pc, #40]	; (8004a14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	7c1a      	ldrb	r2, [r3, #16]
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004a02:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	42470068 	.word	0x42470068
 8004a14:	40023800 	.word	0x40023800
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	42470e40 	.word	0x42470e40
 8004a20:	424711e0 	.word	0x424711e0

08004a24 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b087      	sub	sp, #28
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d13e      	bne.n	8004ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004a42:	4b23      	ldr	r3, [pc, #140]	; (8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d12f      	bne.n	8004ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004a58:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004a5a:	617b      	str	r3, [r7, #20]
          break;
 8004a5c:	e02f      	b.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004a5e:	4b1c      	ldr	r3, [pc, #112]	; (8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a6a:	d108      	bne.n	8004a7e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a6c:	4b18      	ldr	r3, [pc, #96]	; (8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a74:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a7a:	613b      	str	r3, [r7, #16]
 8004a7c:	e007      	b.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004a7e:	4b14      	ldr	r3, [pc, #80]	; (8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a86:	4a15      	ldr	r2, [pc, #84]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a94:	099b      	lsrs	r3, r3, #6
 8004a96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	fb02 f303 	mul.w	r3, r2, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	; (8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004aa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa8:	0f1b      	lsrs	r3, r3, #28
 8004aaa:	f003 0307 	and.w	r3, r3, #7
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]
          break;
 8004ab6:	e002      	b.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
          break;
 8004abc:	bf00      	nop
        }
      }
      break;
 8004abe:	bf00      	nop
    }
  }
  return frequency;
 8004ac0:	697b      	ldr	r3, [r7, #20]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	00bb8000 	.word	0x00bb8000
 8004ad8:	007a1200 	.word	0x007a1200
 8004adc:	00f42400 	.word	0x00f42400

08004ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e041      	b.n	8004b76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fc fb82 	bl	8001210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	4610      	mov	r0, r2
 8004b20:	f000 fa88 	bl	8005034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d001      	beq.n	8004b98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e044      	b.n	8004c22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1e      	ldr	r2, [pc, #120]	; (8004c30 <HAL_TIM_Base_Start_IT+0xb0>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d018      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc2:	d013      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <HAL_TIM_Base_Start_IT+0xb4>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00e      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <HAL_TIM_Base_Start_IT+0xb8>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d009      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a17      	ldr	r2, [pc, #92]	; (8004c3c <HAL_TIM_Base_Start_IT+0xbc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_Base_Start_IT+0x6c>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a16      	ldr	r2, [pc, #88]	; (8004c40 <HAL_TIM_Base_Start_IT+0xc0>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d111      	bne.n	8004c10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b06      	cmp	r3, #6
 8004bfc:	d010      	beq.n	8004c20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0201 	orr.w	r2, r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0e:	e007      	b.n	8004c20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f042 0201 	orr.w	r2, r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40000400 	.word	0x40000400
 8004c38:	40000800 	.word	0x40000800
 8004c3c:	40000c00 	.word	0x40000c00
 8004c40:	40014000 	.word	0x40014000

08004c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d122      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d11b      	bne.n	8004ca0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0202 	mvn.w	r2, #2
 8004c70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f9b5 	bl	8004ff6 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f9a7 	bl	8004fe2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f9b8 	bl	800500a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0304 	and.w	r3, r3, #4
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	d122      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d11b      	bne.n	8004cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f06f 0204 	mvn.w	r2, #4
 8004cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2202      	movs	r2, #2
 8004cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f98b 	bl	8004ff6 <HAL_TIM_IC_CaptureCallback>
 8004ce0:	e005      	b.n	8004cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f97d 	bl	8004fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f98e 	bl	800500a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f003 0308 	and.w	r3, r3, #8
 8004cfe:	2b08      	cmp	r3, #8
 8004d00:	d122      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d11b      	bne.n	8004d48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f06f 0208 	mvn.w	r2, #8
 8004d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2204      	movs	r2, #4
 8004d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 0303 	and.w	r3, r3, #3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 f961 	bl	8004ff6 <HAL_TIM_IC_CaptureCallback>
 8004d34:	e005      	b.n	8004d42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f953 	bl	8004fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f964 	bl	800500a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	f003 0310 	and.w	r3, r3, #16
 8004d52:	2b10      	cmp	r3, #16
 8004d54:	d122      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d11b      	bne.n	8004d9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0210 	mvn.w	r2, #16
 8004d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2208      	movs	r2, #8
 8004d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69db      	ldr	r3, [r3, #28]
 8004d7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f937 	bl	8004ff6 <HAL_TIM_IC_CaptureCallback>
 8004d88:	e005      	b.n	8004d96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f929 	bl	8004fe2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f93a 	bl	800500a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d10e      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d107      	bne.n	8004dc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f06f 0201 	mvn.w	r2, #1
 8004dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fb fdcc 	bl	8000960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d10e      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b80      	cmp	r3, #128	; 0x80
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fab2 	bl	8005358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfe:	2b40      	cmp	r3, #64	; 0x40
 8004e00:	d10e      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e0c:	2b40      	cmp	r3, #64	; 0x40
 8004e0e:	d107      	bne.n	8004e20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f8ff 	bl	800501e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b20      	cmp	r3, #32
 8004e2c:	d10e      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d107      	bne.n	8004e4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f06f 0220 	mvn.w	r2, #32
 8004e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fa7c 	bl	8005344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e4c:	bf00      	nop
 8004e4e:	3708      	adds	r7, #8
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_TIM_ConfigClockSource+0x1c>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e0b4      	b.n	8004fda <HAL_TIM_ConfigClockSource+0x186>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea8:	d03e      	beq.n	8004f28 <HAL_TIM_ConfigClockSource+0xd4>
 8004eaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004eae:	f200 8087 	bhi.w	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	f000 8086 	beq.w	8004fc6 <HAL_TIM_ConfigClockSource+0x172>
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebe:	d87f      	bhi.n	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec0:	2b70      	cmp	r3, #112	; 0x70
 8004ec2:	d01a      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0xa6>
 8004ec4:	2b70      	cmp	r3, #112	; 0x70
 8004ec6:	d87b      	bhi.n	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec8:	2b60      	cmp	r3, #96	; 0x60
 8004eca:	d050      	beq.n	8004f6e <HAL_TIM_ConfigClockSource+0x11a>
 8004ecc:	2b60      	cmp	r3, #96	; 0x60
 8004ece:	d877      	bhi.n	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed0:	2b50      	cmp	r3, #80	; 0x50
 8004ed2:	d03c      	beq.n	8004f4e <HAL_TIM_ConfigClockSource+0xfa>
 8004ed4:	2b50      	cmp	r3, #80	; 0x50
 8004ed6:	d873      	bhi.n	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d058      	beq.n	8004f8e <HAL_TIM_ConfigClockSource+0x13a>
 8004edc:	2b40      	cmp	r3, #64	; 0x40
 8004ede:	d86f      	bhi.n	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee0:	2b30      	cmp	r3, #48	; 0x30
 8004ee2:	d064      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0x15a>
 8004ee4:	2b30      	cmp	r3, #48	; 0x30
 8004ee6:	d86b      	bhi.n	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d060      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0x15a>
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	d867      	bhi.n	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d05c      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0x15a>
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	d05a      	beq.n	8004fae <HAL_TIM_ConfigClockSource+0x15a>
 8004ef8:	e062      	b.n	8004fc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	6899      	ldr	r1, [r3, #8]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f000 f98d 	bl	8005228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68ba      	ldr	r2, [r7, #8]
 8004f24:	609a      	str	r2, [r3, #8]
      break;
 8004f26:	e04f      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	6899      	ldr	r1, [r3, #8]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	f000 f976 	bl	8005228 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689a      	ldr	r2, [r3, #8]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f4a:	609a      	str	r2, [r3, #8]
      break;
 8004f4c:	e03c      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6818      	ldr	r0, [r3, #0]
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	f000 f8ea 	bl	8005134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2150      	movs	r1, #80	; 0x50
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 f943 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f6c:	e02c      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6818      	ldr	r0, [r3, #0]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	6859      	ldr	r1, [r3, #4]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f000 f909 	bl	8005192 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2160      	movs	r1, #96	; 0x60
 8004f86:	4618      	mov	r0, r3
 8004f88:	f000 f933 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004f8c:	e01c      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6818      	ldr	r0, [r3, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	6859      	ldr	r1, [r3, #4]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f000 f8ca 	bl	8005134 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2140      	movs	r1, #64	; 0x40
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f923 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004fac:	e00c      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4610      	mov	r0, r2
 8004fba:	f000 f91a 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004fbe:	e003      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc4:	e000      	b.n	8004fc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b083      	sub	sp, #12
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr

08004ff6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ffe:	bf00      	nop
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005012:	bf00      	nop
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
	...

08005034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a34      	ldr	r2, [pc, #208]	; (8005118 <TIM_Base_SetConfig+0xe4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00f      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005052:	d00b      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a31      	ldr	r2, [pc, #196]	; (800511c <TIM_Base_SetConfig+0xe8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d007      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a30      	ldr	r2, [pc, #192]	; (8005120 <TIM_Base_SetConfig+0xec>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d003      	beq.n	800506c <TIM_Base_SetConfig+0x38>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a2f      	ldr	r2, [pc, #188]	; (8005124 <TIM_Base_SetConfig+0xf0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d108      	bne.n	800507e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a25      	ldr	r2, [pc, #148]	; (8005118 <TIM_Base_SetConfig+0xe4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d01b      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d017      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a22      	ldr	r2, [pc, #136]	; (800511c <TIM_Base_SetConfig+0xe8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d013      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a21      	ldr	r2, [pc, #132]	; (8005120 <TIM_Base_SetConfig+0xec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00f      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a20      	ldr	r2, [pc, #128]	; (8005124 <TIM_Base_SetConfig+0xf0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00b      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <TIM_Base_SetConfig+0xf4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d007      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a1e      	ldr	r2, [pc, #120]	; (800512c <TIM_Base_SetConfig+0xf8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d003      	beq.n	80050be <TIM_Base_SetConfig+0x8a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a1d      	ldr	r2, [pc, #116]	; (8005130 <TIM_Base_SetConfig+0xfc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d108      	bne.n	80050d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a08      	ldr	r2, [pc, #32]	; (8005118 <TIM_Base_SetConfig+0xe4>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d103      	bne.n	8005104 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	691a      	ldr	r2, [r3, #16]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	615a      	str	r2, [r3, #20]
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40014000 	.word	0x40014000
 800512c:	40014400 	.word	0x40014400
 8005130:	40014800 	.word	0x40014800

08005134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0201 	bic.w	r2, r3, #1
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800515e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f023 030a 	bic.w	r3, r3, #10
 8005170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005192:	b480      	push	{r7}
 8005194:	b087      	sub	sp, #28
 8005196:	af00      	add	r7, sp, #0
 8005198:	60f8      	str	r0, [r7, #12]
 800519a:	60b9      	str	r1, [r7, #8]
 800519c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f023 0210 	bic.w	r2, r3, #16
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	031b      	lsls	r3, r3, #12
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	011b      	lsls	r3, r3, #4
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	f043 0307 	orr.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005228:	b480      	push	{r7}
 800522a:	b087      	sub	sp, #28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005242:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	021a      	lsls	r2, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	431a      	orrs	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	609a      	str	r2, [r3, #8]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005278:	2b01      	cmp	r3, #1
 800527a:	d101      	bne.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800527c:	2302      	movs	r3, #2
 800527e:	e050      	b.n	8005322 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d018      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052cc:	d013      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a18      	ldr	r2, [pc, #96]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00e      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a16      	ldr	r2, [pc, #88]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d009      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a15      	ldr	r2, [pc, #84]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d004      	beq.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a13      	ldr	r2, [pc, #76]	; (8005340 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d10c      	bne.n	8005310 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	4313      	orrs	r3, r2
 8005306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	40010000 	.word	0x40010000
 8005334:	40000400 	.word	0x40000400
 8005338:	40000800 	.word	0x40000800
 800533c:	40000c00 	.word	0x40000c00
 8005340:	40014000 	.word	0x40014000

08005344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e03f      	b.n	80053fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fb ff64 	bl	8001260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2224      	movs	r2, #36	; 0x24
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f929 	bl	8005608 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	695a      	ldr	r2, [r3, #20]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68da      	ldr	r2, [r3, #12]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b08a      	sub	sp, #40	; 0x28
 800540a:	af02      	add	r7, sp, #8
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	603b      	str	r3, [r7, #0]
 8005412:	4613      	mov	r3, r2
 8005414:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005416:	2300      	movs	r3, #0
 8005418:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b20      	cmp	r3, #32
 8005424:	d17c      	bne.n	8005520 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <HAL_UART_Transmit+0x2c>
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e075      	b.n	8005522 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_UART_Transmit+0x3e>
 8005440:	2302      	movs	r3, #2
 8005442:	e06e      	b.n	8005522 <HAL_UART_Transmit+0x11c>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2221      	movs	r2, #33	; 0x21
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800545a:	f7fc f869 	bl	8001530 <HAL_GetTick>
 800545e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	88fa      	ldrh	r2, [r7, #6]
 800546a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005474:	d108      	bne.n	8005488 <HAL_UART_Transmit+0x82>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d104      	bne.n	8005488 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e003      	b.n	8005490 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800548c:	2300      	movs	r3, #0
 800548e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005498:	e02a      	b.n	80054f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	2200      	movs	r2, #0
 80054a2:	2180      	movs	r1, #128	; 0x80
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f840 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e036      	b.n	8005522 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10b      	bne.n	80054d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	3302      	adds	r3, #2
 80054ce:	61bb      	str	r3, [r7, #24]
 80054d0:	e007      	b.n	80054e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	781a      	ldrb	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	3301      	adds	r3, #1
 80054e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	3b01      	subs	r3, #1
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1cf      	bne.n	800549a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2200      	movs	r2, #0
 8005502:	2140      	movs	r1, #64	; 0x40
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f000 f810 	bl	800552a <UART_WaitOnFlagUntilTimeout>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e006      	b.n	8005522 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2220      	movs	r2, #32
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800551c:	2300      	movs	r3, #0
 800551e:	e000      	b.n	8005522 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005520:	2302      	movs	r3, #2
  }
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b090      	sub	sp, #64	; 0x40
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800553a:	e050      	b.n	80055de <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800553e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005542:	d04c      	beq.n	80055de <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005546:	2b00      	cmp	r3, #0
 8005548:	d007      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0x30>
 800554a:	f7fb fff1 	bl	8001530 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005556:	429a      	cmp	r2, r3
 8005558:	d241      	bcs.n	80055de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005570:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800557a:	637a      	str	r2, [r7, #52]	; 0x34
 800557c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005580:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e5      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	e853 3f00 	ldrex	r3, [r3]
 800559c:	613b      	str	r3, [r7, #16]
   return(result);
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f023 0301 	bic.w	r3, r3, #1
 80055a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	3314      	adds	r3, #20
 80055ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055ae:	623a      	str	r2, [r7, #32]
 80055b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	69f9      	ldr	r1, [r7, #28]
 80055b4:	6a3a      	ldr	r2, [r7, #32]
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e5      	bne.n	800558e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2220      	movs	r2, #32
 80055ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e00f      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	4013      	ands	r3, r2
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	bf0c      	ite	eq
 80055ee:	2301      	moveq	r3, #1
 80055f0:	2300      	movne	r3, #0
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	461a      	mov	r2, r3
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d09f      	beq.n	800553c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3740      	adds	r7, #64	; 0x40
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800560c:	b0c0      	sub	sp, #256	; 0x100
 800560e:	af00      	add	r7, sp, #0
 8005610:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	68d9      	ldr	r1, [r3, #12]
 8005626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	ea40 0301 	orr.w	r3, r0, r1
 8005630:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	431a      	orrs	r2, r3
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	431a      	orrs	r2, r3
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005660:	f021 010c 	bic.w	r1, r1, #12
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800566e:	430b      	orrs	r3, r1
 8005670:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005682:	6999      	ldr	r1, [r3, #24]
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	ea40 0301 	orr.w	r3, r0, r1
 800568e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	4b8f      	ldr	r3, [pc, #572]	; (80058d4 <UART_SetConfig+0x2cc>)
 8005698:	429a      	cmp	r2, r3
 800569a:	d005      	beq.n	80056a8 <UART_SetConfig+0xa0>
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b8d      	ldr	r3, [pc, #564]	; (80058d8 <UART_SetConfig+0x2d0>)
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d104      	bne.n	80056b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056a8:	f7ff f8ba 	bl	8004820 <HAL_RCC_GetPCLK2Freq>
 80056ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056b0:	e003      	b.n	80056ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056b2:	f7ff f8a1 	bl	80047f8 <HAL_RCC_GetPCLK1Freq>
 80056b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c4:	f040 810c 	bne.w	80058e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	1891      	adds	r1, r2, r2
 80056e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80056e2:	415b      	adcs	r3, r3
 80056e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056ea:	4621      	mov	r1, r4
 80056ec:	eb12 0801 	adds.w	r8, r2, r1
 80056f0:	4629      	mov	r1, r5
 80056f2:	eb43 0901 	adc.w	r9, r3, r1
 80056f6:	f04f 0200 	mov.w	r2, #0
 80056fa:	f04f 0300 	mov.w	r3, #0
 80056fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800570a:	4690      	mov	r8, r2
 800570c:	4699      	mov	r9, r3
 800570e:	4623      	mov	r3, r4
 8005710:	eb18 0303 	adds.w	r3, r8, r3
 8005714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005718:	462b      	mov	r3, r5
 800571a:	eb49 0303 	adc.w	r3, r9, r3
 800571e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800572e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005732:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005736:	460b      	mov	r3, r1
 8005738:	18db      	adds	r3, r3, r3
 800573a:	653b      	str	r3, [r7, #80]	; 0x50
 800573c:	4613      	mov	r3, r2
 800573e:	eb42 0303 	adc.w	r3, r2, r3
 8005742:	657b      	str	r3, [r7, #84]	; 0x54
 8005744:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005748:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800574c:	f7fa fd98 	bl	8000280 <__aeabi_uldivmod>
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4b61      	ldr	r3, [pc, #388]	; (80058dc <UART_SetConfig+0x2d4>)
 8005756:	fba3 2302 	umull	r2, r3, r3, r2
 800575a:	095b      	lsrs	r3, r3, #5
 800575c:	011c      	lsls	r4, r3, #4
 800575e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005768:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800576c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005770:	4642      	mov	r2, r8
 8005772:	464b      	mov	r3, r9
 8005774:	1891      	adds	r1, r2, r2
 8005776:	64b9      	str	r1, [r7, #72]	; 0x48
 8005778:	415b      	adcs	r3, r3
 800577a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800577c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005780:	4641      	mov	r1, r8
 8005782:	eb12 0a01 	adds.w	sl, r2, r1
 8005786:	4649      	mov	r1, r9
 8005788:	eb43 0b01 	adc.w	fp, r3, r1
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005798:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800579c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057a0:	4692      	mov	sl, r2
 80057a2:	469b      	mov	fp, r3
 80057a4:	4643      	mov	r3, r8
 80057a6:	eb1a 0303 	adds.w	r3, sl, r3
 80057aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057ae:	464b      	mov	r3, r9
 80057b0:	eb4b 0303 	adc.w	r3, fp, r3
 80057b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057cc:	460b      	mov	r3, r1
 80057ce:	18db      	adds	r3, r3, r3
 80057d0:	643b      	str	r3, [r7, #64]	; 0x40
 80057d2:	4613      	mov	r3, r2
 80057d4:	eb42 0303 	adc.w	r3, r2, r3
 80057d8:	647b      	str	r3, [r7, #68]	; 0x44
 80057da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057e2:	f7fa fd4d 	bl	8000280 <__aeabi_uldivmod>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4611      	mov	r1, r2
 80057ec:	4b3b      	ldr	r3, [pc, #236]	; (80058dc <UART_SetConfig+0x2d4>)
 80057ee:	fba3 2301 	umull	r2, r3, r3, r1
 80057f2:	095b      	lsrs	r3, r3, #5
 80057f4:	2264      	movs	r2, #100	; 0x64
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	1acb      	subs	r3, r1, r3
 80057fc:	00db      	lsls	r3, r3, #3
 80057fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005802:	4b36      	ldr	r3, [pc, #216]	; (80058dc <UART_SetConfig+0x2d4>)
 8005804:	fba3 2302 	umull	r2, r3, r3, r2
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	005b      	lsls	r3, r3, #1
 800580c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005810:	441c      	add	r4, r3
 8005812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800581c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005820:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005824:	4642      	mov	r2, r8
 8005826:	464b      	mov	r3, r9
 8005828:	1891      	adds	r1, r2, r2
 800582a:	63b9      	str	r1, [r7, #56]	; 0x38
 800582c:	415b      	adcs	r3, r3
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005830:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005834:	4641      	mov	r1, r8
 8005836:	1851      	adds	r1, r2, r1
 8005838:	6339      	str	r1, [r7, #48]	; 0x30
 800583a:	4649      	mov	r1, r9
 800583c:	414b      	adcs	r3, r1
 800583e:	637b      	str	r3, [r7, #52]	; 0x34
 8005840:	f04f 0200 	mov.w	r2, #0
 8005844:	f04f 0300 	mov.w	r3, #0
 8005848:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800584c:	4659      	mov	r1, fp
 800584e:	00cb      	lsls	r3, r1, #3
 8005850:	4651      	mov	r1, sl
 8005852:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005856:	4651      	mov	r1, sl
 8005858:	00ca      	lsls	r2, r1, #3
 800585a:	4610      	mov	r0, r2
 800585c:	4619      	mov	r1, r3
 800585e:	4603      	mov	r3, r0
 8005860:	4642      	mov	r2, r8
 8005862:	189b      	adds	r3, r3, r2
 8005864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005868:	464b      	mov	r3, r9
 800586a:	460a      	mov	r2, r1
 800586c:	eb42 0303 	adc.w	r3, r2, r3
 8005870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005880:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005884:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005888:	460b      	mov	r3, r1
 800588a:	18db      	adds	r3, r3, r3
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
 800588e:	4613      	mov	r3, r2
 8005890:	eb42 0303 	adc.w	r3, r2, r3
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005896:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800589a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800589e:	f7fa fcef 	bl	8000280 <__aeabi_uldivmod>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <UART_SetConfig+0x2d4>)
 80058a8:	fba3 1302 	umull	r1, r3, r3, r2
 80058ac:	095b      	lsrs	r3, r3, #5
 80058ae:	2164      	movs	r1, #100	; 0x64
 80058b0:	fb01 f303 	mul.w	r3, r1, r3
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	3332      	adds	r3, #50	; 0x32
 80058ba:	4a08      	ldr	r2, [pc, #32]	; (80058dc <UART_SetConfig+0x2d4>)
 80058bc:	fba2 2303 	umull	r2, r3, r2, r3
 80058c0:	095b      	lsrs	r3, r3, #5
 80058c2:	f003 0207 	and.w	r2, r3, #7
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4422      	add	r2, r4
 80058ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058d0:	e106      	b.n	8005ae0 <UART_SetConfig+0x4d8>
 80058d2:	bf00      	nop
 80058d4:	40011000 	.word	0x40011000
 80058d8:	40011400 	.word	0x40011400
 80058dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058f2:	4642      	mov	r2, r8
 80058f4:	464b      	mov	r3, r9
 80058f6:	1891      	adds	r1, r2, r2
 80058f8:	6239      	str	r1, [r7, #32]
 80058fa:	415b      	adcs	r3, r3
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
 80058fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005902:	4641      	mov	r1, r8
 8005904:	1854      	adds	r4, r2, r1
 8005906:	4649      	mov	r1, r9
 8005908:	eb43 0501 	adc.w	r5, r3, r1
 800590c:	f04f 0200 	mov.w	r2, #0
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	00eb      	lsls	r3, r5, #3
 8005916:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800591a:	00e2      	lsls	r2, r4, #3
 800591c:	4614      	mov	r4, r2
 800591e:	461d      	mov	r5, r3
 8005920:	4643      	mov	r3, r8
 8005922:	18e3      	adds	r3, r4, r3
 8005924:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005928:	464b      	mov	r3, r9
 800592a:	eb45 0303 	adc.w	r3, r5, r3
 800592e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800593e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800594e:	4629      	mov	r1, r5
 8005950:	008b      	lsls	r3, r1, #2
 8005952:	4621      	mov	r1, r4
 8005954:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005958:	4621      	mov	r1, r4
 800595a:	008a      	lsls	r2, r1, #2
 800595c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005960:	f7fa fc8e 	bl	8000280 <__aeabi_uldivmod>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4b60      	ldr	r3, [pc, #384]	; (8005aec <UART_SetConfig+0x4e4>)
 800596a:	fba3 2302 	umull	r2, r3, r3, r2
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	011c      	lsls	r4, r3, #4
 8005972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005976:	2200      	movs	r2, #0
 8005978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800597c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005980:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005984:	4642      	mov	r2, r8
 8005986:	464b      	mov	r3, r9
 8005988:	1891      	adds	r1, r2, r2
 800598a:	61b9      	str	r1, [r7, #24]
 800598c:	415b      	adcs	r3, r3
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005994:	4641      	mov	r1, r8
 8005996:	1851      	adds	r1, r2, r1
 8005998:	6139      	str	r1, [r7, #16]
 800599a:	4649      	mov	r1, r9
 800599c:	414b      	adcs	r3, r1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	f04f 0200 	mov.w	r2, #0
 80059a4:	f04f 0300 	mov.w	r3, #0
 80059a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059ac:	4659      	mov	r1, fp
 80059ae:	00cb      	lsls	r3, r1, #3
 80059b0:	4651      	mov	r1, sl
 80059b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059b6:	4651      	mov	r1, sl
 80059b8:	00ca      	lsls	r2, r1, #3
 80059ba:	4610      	mov	r0, r2
 80059bc:	4619      	mov	r1, r3
 80059be:	4603      	mov	r3, r0
 80059c0:	4642      	mov	r2, r8
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059c8:	464b      	mov	r3, r9
 80059ca:	460a      	mov	r2, r1
 80059cc:	eb42 0303 	adc.w	r3, r2, r3
 80059d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80059de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059ec:	4649      	mov	r1, r9
 80059ee:	008b      	lsls	r3, r1, #2
 80059f0:	4641      	mov	r1, r8
 80059f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059f6:	4641      	mov	r1, r8
 80059f8:	008a      	lsls	r2, r1, #2
 80059fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059fe:	f7fa fc3f 	bl	8000280 <__aeabi_uldivmod>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	4b38      	ldr	r3, [pc, #224]	; (8005aec <UART_SetConfig+0x4e4>)
 8005a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	2264      	movs	r2, #100	; 0x64
 8005a12:	fb02 f303 	mul.w	r3, r2, r3
 8005a16:	1acb      	subs	r3, r1, r3
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	3332      	adds	r3, #50	; 0x32
 8005a1c:	4a33      	ldr	r2, [pc, #204]	; (8005aec <UART_SetConfig+0x4e4>)
 8005a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a22:	095b      	lsrs	r3, r3, #5
 8005a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a28:	441c      	add	r4, r3
 8005a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2e:	2200      	movs	r2, #0
 8005a30:	673b      	str	r3, [r7, #112]	; 0x70
 8005a32:	677a      	str	r2, [r7, #116]	; 0x74
 8005a34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a38:	4642      	mov	r2, r8
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	1891      	adds	r1, r2, r2
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	415b      	adcs	r3, r3
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a48:	4641      	mov	r1, r8
 8005a4a:	1851      	adds	r1, r2, r1
 8005a4c:	6039      	str	r1, [r7, #0]
 8005a4e:	4649      	mov	r1, r9
 8005a50:	414b      	adcs	r3, r1
 8005a52:	607b      	str	r3, [r7, #4]
 8005a54:	f04f 0200 	mov.w	r2, #0
 8005a58:	f04f 0300 	mov.w	r3, #0
 8005a5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a60:	4659      	mov	r1, fp
 8005a62:	00cb      	lsls	r3, r1, #3
 8005a64:	4651      	mov	r1, sl
 8005a66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a6a:	4651      	mov	r1, sl
 8005a6c:	00ca      	lsls	r2, r1, #3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	4619      	mov	r1, r3
 8005a72:	4603      	mov	r3, r0
 8005a74:	4642      	mov	r2, r8
 8005a76:	189b      	adds	r3, r3, r2
 8005a78:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	460a      	mov	r2, r1
 8005a7e:	eb42 0303 	adc.w	r3, r2, r3
 8005a82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a8e:	667a      	str	r2, [r7, #100]	; 0x64
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	008b      	lsls	r3, r1, #2
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa6:	4641      	mov	r1, r8
 8005aa8:	008a      	lsls	r2, r1, #2
 8005aaa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005aae:	f7fa fbe7 	bl	8000280 <__aeabi_uldivmod>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <UART_SetConfig+0x4e4>)
 8005ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	2164      	movs	r1, #100	; 0x64
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	3332      	adds	r3, #50	; 0x32
 8005aca:	4a08      	ldr	r2, [pc, #32]	; (8005aec <UART_SetConfig+0x4e4>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	f003 020f 	and.w	r2, r3, #15
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4422      	add	r2, r4
 8005ade:	609a      	str	r2, [r3, #8]
}
 8005ae0:	bf00      	nop
 8005ae2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aec:	51eb851f 	.word	0x51eb851f

08005af0 <sniprintf>:
 8005af0:	b40c      	push	{r2, r3}
 8005af2:	b530      	push	{r4, r5, lr}
 8005af4:	4b17      	ldr	r3, [pc, #92]	; (8005b54 <sniprintf+0x64>)
 8005af6:	1e0c      	subs	r4, r1, #0
 8005af8:	681d      	ldr	r5, [r3, #0]
 8005afa:	b09d      	sub	sp, #116	; 0x74
 8005afc:	da08      	bge.n	8005b10 <sniprintf+0x20>
 8005afe:	238b      	movs	r3, #139	; 0x8b
 8005b00:	602b      	str	r3, [r5, #0]
 8005b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b06:	b01d      	add	sp, #116	; 0x74
 8005b08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b0c:	b002      	add	sp, #8
 8005b0e:	4770      	bx	lr
 8005b10:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005b14:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005b18:	bf14      	ite	ne
 8005b1a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005b1e:	4623      	moveq	r3, r4
 8005b20:	9304      	str	r3, [sp, #16]
 8005b22:	9307      	str	r3, [sp, #28]
 8005b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005b28:	9002      	str	r0, [sp, #8]
 8005b2a:	9006      	str	r0, [sp, #24]
 8005b2c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005b30:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005b32:	ab21      	add	r3, sp, #132	; 0x84
 8005b34:	a902      	add	r1, sp, #8
 8005b36:	4628      	mov	r0, r5
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	f000 f993 	bl	8005e64 <_svfiprintf_r>
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	bfbc      	itt	lt
 8005b42:	238b      	movlt	r3, #139	; 0x8b
 8005b44:	602b      	strlt	r3, [r5, #0]
 8005b46:	2c00      	cmp	r4, #0
 8005b48:	d0dd      	beq.n	8005b06 <sniprintf+0x16>
 8005b4a:	9b02      	ldr	r3, [sp, #8]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	701a      	strb	r2, [r3, #0]
 8005b50:	e7d9      	b.n	8005b06 <sniprintf+0x16>
 8005b52:	bf00      	nop
 8005b54:	20000068 	.word	0x20000068

08005b58 <memset>:
 8005b58:	4402      	add	r2, r0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d100      	bne.n	8005b62 <memset+0xa>
 8005b60:	4770      	bx	lr
 8005b62:	f803 1b01 	strb.w	r1, [r3], #1
 8005b66:	e7f9      	b.n	8005b5c <memset+0x4>

08005b68 <__errno>:
 8005b68:	4b01      	ldr	r3, [pc, #4]	; (8005b70 <__errno+0x8>)
 8005b6a:	6818      	ldr	r0, [r3, #0]
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	20000068 	.word	0x20000068

08005b74 <__libc_init_array>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	4d0d      	ldr	r5, [pc, #52]	; (8005bac <__libc_init_array+0x38>)
 8005b78:	4c0d      	ldr	r4, [pc, #52]	; (8005bb0 <__libc_init_array+0x3c>)
 8005b7a:	1b64      	subs	r4, r4, r5
 8005b7c:	10a4      	asrs	r4, r4, #2
 8005b7e:	2600      	movs	r6, #0
 8005b80:	42a6      	cmp	r6, r4
 8005b82:	d109      	bne.n	8005b98 <__libc_init_array+0x24>
 8005b84:	4d0b      	ldr	r5, [pc, #44]	; (8005bb4 <__libc_init_array+0x40>)
 8005b86:	4c0c      	ldr	r4, [pc, #48]	; (8005bb8 <__libc_init_array+0x44>)
 8005b88:	f000 fc6a 	bl	8006460 <_init>
 8005b8c:	1b64      	subs	r4, r4, r5
 8005b8e:	10a4      	asrs	r4, r4, #2
 8005b90:	2600      	movs	r6, #0
 8005b92:	42a6      	cmp	r6, r4
 8005b94:	d105      	bne.n	8005ba2 <__libc_init_array+0x2e>
 8005b96:	bd70      	pop	{r4, r5, r6, pc}
 8005b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9c:	4798      	blx	r3
 8005b9e:	3601      	adds	r6, #1
 8005ba0:	e7ee      	b.n	8005b80 <__libc_init_array+0xc>
 8005ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba6:	4798      	blx	r3
 8005ba8:	3601      	adds	r6, #1
 8005baa:	e7f2      	b.n	8005b92 <__libc_init_array+0x1e>
 8005bac:	08006574 	.word	0x08006574
 8005bb0:	08006574 	.word	0x08006574
 8005bb4:	08006574 	.word	0x08006574
 8005bb8:	08006578 	.word	0x08006578

08005bbc <__retarget_lock_acquire_recursive>:
 8005bbc:	4770      	bx	lr

08005bbe <__retarget_lock_release_recursive>:
 8005bbe:	4770      	bx	lr

08005bc0 <_free_r>:
 8005bc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	d044      	beq.n	8005c50 <_free_r+0x90>
 8005bc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bca:	9001      	str	r0, [sp, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f1a1 0404 	sub.w	r4, r1, #4
 8005bd2:	bfb8      	it	lt
 8005bd4:	18e4      	addlt	r4, r4, r3
 8005bd6:	f000 f8df 	bl	8005d98 <__malloc_lock>
 8005bda:	4a1e      	ldr	r2, [pc, #120]	; (8005c54 <_free_r+0x94>)
 8005bdc:	9801      	ldr	r0, [sp, #4]
 8005bde:	6813      	ldr	r3, [r2, #0]
 8005be0:	b933      	cbnz	r3, 8005bf0 <_free_r+0x30>
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	6014      	str	r4, [r2, #0]
 8005be6:	b003      	add	sp, #12
 8005be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005bec:	f000 b8da 	b.w	8005da4 <__malloc_unlock>
 8005bf0:	42a3      	cmp	r3, r4
 8005bf2:	d908      	bls.n	8005c06 <_free_r+0x46>
 8005bf4:	6825      	ldr	r5, [r4, #0]
 8005bf6:	1961      	adds	r1, r4, r5
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf01      	itttt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	1949      	addeq	r1, r1, r5
 8005c02:	6021      	streq	r1, [r4, #0]
 8005c04:	e7ed      	b.n	8005be2 <_free_r+0x22>
 8005c06:	461a      	mov	r2, r3
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	b10b      	cbz	r3, 8005c10 <_free_r+0x50>
 8005c0c:	42a3      	cmp	r3, r4
 8005c0e:	d9fa      	bls.n	8005c06 <_free_r+0x46>
 8005c10:	6811      	ldr	r1, [r2, #0]
 8005c12:	1855      	adds	r5, r2, r1
 8005c14:	42a5      	cmp	r5, r4
 8005c16:	d10b      	bne.n	8005c30 <_free_r+0x70>
 8005c18:	6824      	ldr	r4, [r4, #0]
 8005c1a:	4421      	add	r1, r4
 8005c1c:	1854      	adds	r4, r2, r1
 8005c1e:	42a3      	cmp	r3, r4
 8005c20:	6011      	str	r1, [r2, #0]
 8005c22:	d1e0      	bne.n	8005be6 <_free_r+0x26>
 8005c24:	681c      	ldr	r4, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	6053      	str	r3, [r2, #4]
 8005c2a:	440c      	add	r4, r1
 8005c2c:	6014      	str	r4, [r2, #0]
 8005c2e:	e7da      	b.n	8005be6 <_free_r+0x26>
 8005c30:	d902      	bls.n	8005c38 <_free_r+0x78>
 8005c32:	230c      	movs	r3, #12
 8005c34:	6003      	str	r3, [r0, #0]
 8005c36:	e7d6      	b.n	8005be6 <_free_r+0x26>
 8005c38:	6825      	ldr	r5, [r4, #0]
 8005c3a:	1961      	adds	r1, r4, r5
 8005c3c:	428b      	cmp	r3, r1
 8005c3e:	bf04      	itt	eq
 8005c40:	6819      	ldreq	r1, [r3, #0]
 8005c42:	685b      	ldreq	r3, [r3, #4]
 8005c44:	6063      	str	r3, [r4, #4]
 8005c46:	bf04      	itt	eq
 8005c48:	1949      	addeq	r1, r1, r5
 8005c4a:	6021      	streq	r1, [r4, #0]
 8005c4c:	6054      	str	r4, [r2, #4]
 8005c4e:	e7ca      	b.n	8005be6 <_free_r+0x26>
 8005c50:	b003      	add	sp, #12
 8005c52:	bd30      	pop	{r4, r5, pc}
 8005c54:	200004f0 	.word	0x200004f0

08005c58 <sbrk_aligned>:
 8005c58:	b570      	push	{r4, r5, r6, lr}
 8005c5a:	4e0e      	ldr	r6, [pc, #56]	; (8005c94 <sbrk_aligned+0x3c>)
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	6831      	ldr	r1, [r6, #0]
 8005c60:	4605      	mov	r5, r0
 8005c62:	b911      	cbnz	r1, 8005c6a <sbrk_aligned+0x12>
 8005c64:	f000 fba6 	bl	80063b4 <_sbrk_r>
 8005c68:	6030      	str	r0, [r6, #0]
 8005c6a:	4621      	mov	r1, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 fba1 	bl	80063b4 <_sbrk_r>
 8005c72:	1c43      	adds	r3, r0, #1
 8005c74:	d00a      	beq.n	8005c8c <sbrk_aligned+0x34>
 8005c76:	1cc4      	adds	r4, r0, #3
 8005c78:	f024 0403 	bic.w	r4, r4, #3
 8005c7c:	42a0      	cmp	r0, r4
 8005c7e:	d007      	beq.n	8005c90 <sbrk_aligned+0x38>
 8005c80:	1a21      	subs	r1, r4, r0
 8005c82:	4628      	mov	r0, r5
 8005c84:	f000 fb96 	bl	80063b4 <_sbrk_r>
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d101      	bne.n	8005c90 <sbrk_aligned+0x38>
 8005c8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c90:	4620      	mov	r0, r4
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	200004f4 	.word	0x200004f4

08005c98 <_malloc_r>:
 8005c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c9c:	1ccd      	adds	r5, r1, #3
 8005c9e:	f025 0503 	bic.w	r5, r5, #3
 8005ca2:	3508      	adds	r5, #8
 8005ca4:	2d0c      	cmp	r5, #12
 8005ca6:	bf38      	it	cc
 8005ca8:	250c      	movcc	r5, #12
 8005caa:	2d00      	cmp	r5, #0
 8005cac:	4607      	mov	r7, r0
 8005cae:	db01      	blt.n	8005cb4 <_malloc_r+0x1c>
 8005cb0:	42a9      	cmp	r1, r5
 8005cb2:	d905      	bls.n	8005cc0 <_malloc_r+0x28>
 8005cb4:	230c      	movs	r3, #12
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	2600      	movs	r6, #0
 8005cba:	4630      	mov	r0, r6
 8005cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d94 <_malloc_r+0xfc>
 8005cc4:	f000 f868 	bl	8005d98 <__malloc_lock>
 8005cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ccc:	461c      	mov	r4, r3
 8005cce:	bb5c      	cbnz	r4, 8005d28 <_malloc_r+0x90>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f7ff ffc0 	bl	8005c58 <sbrk_aligned>
 8005cd8:	1c43      	adds	r3, r0, #1
 8005cda:	4604      	mov	r4, r0
 8005cdc:	d155      	bne.n	8005d8a <_malloc_r+0xf2>
 8005cde:	f8d8 4000 	ldr.w	r4, [r8]
 8005ce2:	4626      	mov	r6, r4
 8005ce4:	2e00      	cmp	r6, #0
 8005ce6:	d145      	bne.n	8005d74 <_malloc_r+0xdc>
 8005ce8:	2c00      	cmp	r4, #0
 8005cea:	d048      	beq.n	8005d7e <_malloc_r+0xe6>
 8005cec:	6823      	ldr	r3, [r4, #0]
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4638      	mov	r0, r7
 8005cf2:	eb04 0903 	add.w	r9, r4, r3
 8005cf6:	f000 fb5d 	bl	80063b4 <_sbrk_r>
 8005cfa:	4581      	cmp	r9, r0
 8005cfc:	d13f      	bne.n	8005d7e <_malloc_r+0xe6>
 8005cfe:	6821      	ldr	r1, [r4, #0]
 8005d00:	1a6d      	subs	r5, r5, r1
 8005d02:	4629      	mov	r1, r5
 8005d04:	4638      	mov	r0, r7
 8005d06:	f7ff ffa7 	bl	8005c58 <sbrk_aligned>
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	d037      	beq.n	8005d7e <_malloc_r+0xe6>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	442b      	add	r3, r5
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	f8d8 3000 	ldr.w	r3, [r8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d038      	beq.n	8005d8e <_malloc_r+0xf6>
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	42a2      	cmp	r2, r4
 8005d20:	d12b      	bne.n	8005d7a <_malloc_r+0xe2>
 8005d22:	2200      	movs	r2, #0
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	e00f      	b.n	8005d48 <_malloc_r+0xb0>
 8005d28:	6822      	ldr	r2, [r4, #0]
 8005d2a:	1b52      	subs	r2, r2, r5
 8005d2c:	d41f      	bmi.n	8005d6e <_malloc_r+0xd6>
 8005d2e:	2a0b      	cmp	r2, #11
 8005d30:	d917      	bls.n	8005d62 <_malloc_r+0xca>
 8005d32:	1961      	adds	r1, r4, r5
 8005d34:	42a3      	cmp	r3, r4
 8005d36:	6025      	str	r5, [r4, #0]
 8005d38:	bf18      	it	ne
 8005d3a:	6059      	strne	r1, [r3, #4]
 8005d3c:	6863      	ldr	r3, [r4, #4]
 8005d3e:	bf08      	it	eq
 8005d40:	f8c8 1000 	streq.w	r1, [r8]
 8005d44:	5162      	str	r2, [r4, r5]
 8005d46:	604b      	str	r3, [r1, #4]
 8005d48:	4638      	mov	r0, r7
 8005d4a:	f104 060b 	add.w	r6, r4, #11
 8005d4e:	f000 f829 	bl	8005da4 <__malloc_unlock>
 8005d52:	f026 0607 	bic.w	r6, r6, #7
 8005d56:	1d23      	adds	r3, r4, #4
 8005d58:	1af2      	subs	r2, r6, r3
 8005d5a:	d0ae      	beq.n	8005cba <_malloc_r+0x22>
 8005d5c:	1b9b      	subs	r3, r3, r6
 8005d5e:	50a3      	str	r3, [r4, r2]
 8005d60:	e7ab      	b.n	8005cba <_malloc_r+0x22>
 8005d62:	42a3      	cmp	r3, r4
 8005d64:	6862      	ldr	r2, [r4, #4]
 8005d66:	d1dd      	bne.n	8005d24 <_malloc_r+0x8c>
 8005d68:	f8c8 2000 	str.w	r2, [r8]
 8005d6c:	e7ec      	b.n	8005d48 <_malloc_r+0xb0>
 8005d6e:	4623      	mov	r3, r4
 8005d70:	6864      	ldr	r4, [r4, #4]
 8005d72:	e7ac      	b.n	8005cce <_malloc_r+0x36>
 8005d74:	4634      	mov	r4, r6
 8005d76:	6876      	ldr	r6, [r6, #4]
 8005d78:	e7b4      	b.n	8005ce4 <_malloc_r+0x4c>
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	e7cc      	b.n	8005d18 <_malloc_r+0x80>
 8005d7e:	230c      	movs	r3, #12
 8005d80:	603b      	str	r3, [r7, #0]
 8005d82:	4638      	mov	r0, r7
 8005d84:	f000 f80e 	bl	8005da4 <__malloc_unlock>
 8005d88:	e797      	b.n	8005cba <_malloc_r+0x22>
 8005d8a:	6025      	str	r5, [r4, #0]
 8005d8c:	e7dc      	b.n	8005d48 <_malloc_r+0xb0>
 8005d8e:	605b      	str	r3, [r3, #4]
 8005d90:	deff      	udf	#255	; 0xff
 8005d92:	bf00      	nop
 8005d94:	200004f0 	.word	0x200004f0

08005d98 <__malloc_lock>:
 8005d98:	4801      	ldr	r0, [pc, #4]	; (8005da0 <__malloc_lock+0x8>)
 8005d9a:	f7ff bf0f 	b.w	8005bbc <__retarget_lock_acquire_recursive>
 8005d9e:	bf00      	nop
 8005da0:	200004ec 	.word	0x200004ec

08005da4 <__malloc_unlock>:
 8005da4:	4801      	ldr	r0, [pc, #4]	; (8005dac <__malloc_unlock+0x8>)
 8005da6:	f7ff bf0a 	b.w	8005bbe <__retarget_lock_release_recursive>
 8005daa:	bf00      	nop
 8005dac:	200004ec 	.word	0x200004ec

08005db0 <__ssputs_r>:
 8005db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	688e      	ldr	r6, [r1, #8]
 8005db6:	461f      	mov	r7, r3
 8005db8:	42be      	cmp	r6, r7
 8005dba:	680b      	ldr	r3, [r1, #0]
 8005dbc:	4682      	mov	sl, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	4690      	mov	r8, r2
 8005dc2:	d82c      	bhi.n	8005e1e <__ssputs_r+0x6e>
 8005dc4:	898a      	ldrh	r2, [r1, #12]
 8005dc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005dca:	d026      	beq.n	8005e1a <__ssputs_r+0x6a>
 8005dcc:	6965      	ldr	r5, [r4, #20]
 8005dce:	6909      	ldr	r1, [r1, #16]
 8005dd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dd4:	eba3 0901 	sub.w	r9, r3, r1
 8005dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ddc:	1c7b      	adds	r3, r7, #1
 8005dde:	444b      	add	r3, r9
 8005de0:	106d      	asrs	r5, r5, #1
 8005de2:	429d      	cmp	r5, r3
 8005de4:	bf38      	it	cc
 8005de6:	461d      	movcc	r5, r3
 8005de8:	0553      	lsls	r3, r2, #21
 8005dea:	d527      	bpl.n	8005e3c <__ssputs_r+0x8c>
 8005dec:	4629      	mov	r1, r5
 8005dee:	f7ff ff53 	bl	8005c98 <_malloc_r>
 8005df2:	4606      	mov	r6, r0
 8005df4:	b360      	cbz	r0, 8005e50 <__ssputs_r+0xa0>
 8005df6:	6921      	ldr	r1, [r4, #16]
 8005df8:	464a      	mov	r2, r9
 8005dfa:	f000 faeb 	bl	80063d4 <memcpy>
 8005dfe:	89a3      	ldrh	r3, [r4, #12]
 8005e00:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e08:	81a3      	strh	r3, [r4, #12]
 8005e0a:	6126      	str	r6, [r4, #16]
 8005e0c:	6165      	str	r5, [r4, #20]
 8005e0e:	444e      	add	r6, r9
 8005e10:	eba5 0509 	sub.w	r5, r5, r9
 8005e14:	6026      	str	r6, [r4, #0]
 8005e16:	60a5      	str	r5, [r4, #8]
 8005e18:	463e      	mov	r6, r7
 8005e1a:	42be      	cmp	r6, r7
 8005e1c:	d900      	bls.n	8005e20 <__ssputs_r+0x70>
 8005e1e:	463e      	mov	r6, r7
 8005e20:	6820      	ldr	r0, [r4, #0]
 8005e22:	4632      	mov	r2, r6
 8005e24:	4641      	mov	r1, r8
 8005e26:	f000 faab 	bl	8006380 <memmove>
 8005e2a:	68a3      	ldr	r3, [r4, #8]
 8005e2c:	1b9b      	subs	r3, r3, r6
 8005e2e:	60a3      	str	r3, [r4, #8]
 8005e30:	6823      	ldr	r3, [r4, #0]
 8005e32:	4433      	add	r3, r6
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	2000      	movs	r0, #0
 8005e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3c:	462a      	mov	r2, r5
 8005e3e:	f000 fad7 	bl	80063f0 <_realloc_r>
 8005e42:	4606      	mov	r6, r0
 8005e44:	2800      	cmp	r0, #0
 8005e46:	d1e0      	bne.n	8005e0a <__ssputs_r+0x5a>
 8005e48:	6921      	ldr	r1, [r4, #16]
 8005e4a:	4650      	mov	r0, sl
 8005e4c:	f7ff feb8 	bl	8005bc0 <_free_r>
 8005e50:	230c      	movs	r3, #12
 8005e52:	f8ca 3000 	str.w	r3, [sl]
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e5c:	81a3      	strh	r3, [r4, #12]
 8005e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e62:	e7e9      	b.n	8005e38 <__ssputs_r+0x88>

08005e64 <_svfiprintf_r>:
 8005e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	4698      	mov	r8, r3
 8005e6a:	898b      	ldrh	r3, [r1, #12]
 8005e6c:	061b      	lsls	r3, r3, #24
 8005e6e:	b09d      	sub	sp, #116	; 0x74
 8005e70:	4607      	mov	r7, r0
 8005e72:	460d      	mov	r5, r1
 8005e74:	4614      	mov	r4, r2
 8005e76:	d50e      	bpl.n	8005e96 <_svfiprintf_r+0x32>
 8005e78:	690b      	ldr	r3, [r1, #16]
 8005e7a:	b963      	cbnz	r3, 8005e96 <_svfiprintf_r+0x32>
 8005e7c:	2140      	movs	r1, #64	; 0x40
 8005e7e:	f7ff ff0b 	bl	8005c98 <_malloc_r>
 8005e82:	6028      	str	r0, [r5, #0]
 8005e84:	6128      	str	r0, [r5, #16]
 8005e86:	b920      	cbnz	r0, 8005e92 <_svfiprintf_r+0x2e>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e90:	e0d0      	b.n	8006034 <_svfiprintf_r+0x1d0>
 8005e92:	2340      	movs	r3, #64	; 0x40
 8005e94:	616b      	str	r3, [r5, #20]
 8005e96:	2300      	movs	r3, #0
 8005e98:	9309      	str	r3, [sp, #36]	; 0x24
 8005e9a:	2320      	movs	r3, #32
 8005e9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005ea0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ea4:	2330      	movs	r3, #48	; 0x30
 8005ea6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800604c <_svfiprintf_r+0x1e8>
 8005eaa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eae:	f04f 0901 	mov.w	r9, #1
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	469a      	mov	sl, r3
 8005eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eba:	b10a      	cbz	r2, 8005ec0 <_svfiprintf_r+0x5c>
 8005ebc:	2a25      	cmp	r2, #37	; 0x25
 8005ebe:	d1f9      	bne.n	8005eb4 <_svfiprintf_r+0x50>
 8005ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ec4:	d00b      	beq.n	8005ede <_svfiprintf_r+0x7a>
 8005ec6:	465b      	mov	r3, fp
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f7ff ff6f 	bl	8005db0 <__ssputs_r>
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	f000 80a9 	beq.w	800602a <_svfiprintf_r+0x1c6>
 8005ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eda:	445a      	add	r2, fp
 8005edc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ede:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a1 	beq.w	800602a <_svfiprintf_r+0x1c6>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ef2:	f10a 0a01 	add.w	sl, sl, #1
 8005ef6:	9304      	str	r3, [sp, #16]
 8005ef8:	9307      	str	r3, [sp, #28]
 8005efa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005efe:	931a      	str	r3, [sp, #104]	; 0x68
 8005f00:	4654      	mov	r4, sl
 8005f02:	2205      	movs	r2, #5
 8005f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f08:	4850      	ldr	r0, [pc, #320]	; (800604c <_svfiprintf_r+0x1e8>)
 8005f0a:	f7fa f969 	bl	80001e0 <memchr>
 8005f0e:	9a04      	ldr	r2, [sp, #16]
 8005f10:	b9d8      	cbnz	r0, 8005f4a <_svfiprintf_r+0xe6>
 8005f12:	06d0      	lsls	r0, r2, #27
 8005f14:	bf44      	itt	mi
 8005f16:	2320      	movmi	r3, #32
 8005f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f1c:	0711      	lsls	r1, r2, #28
 8005f1e:	bf44      	itt	mi
 8005f20:	232b      	movmi	r3, #43	; 0x2b
 8005f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f26:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f2c:	d015      	beq.n	8005f5a <_svfiprintf_r+0xf6>
 8005f2e:	9a07      	ldr	r2, [sp, #28]
 8005f30:	4654      	mov	r4, sl
 8005f32:	2000      	movs	r0, #0
 8005f34:	f04f 0c0a 	mov.w	ip, #10
 8005f38:	4621      	mov	r1, r4
 8005f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f3e:	3b30      	subs	r3, #48	; 0x30
 8005f40:	2b09      	cmp	r3, #9
 8005f42:	d94d      	bls.n	8005fe0 <_svfiprintf_r+0x17c>
 8005f44:	b1b0      	cbz	r0, 8005f74 <_svfiprintf_r+0x110>
 8005f46:	9207      	str	r2, [sp, #28]
 8005f48:	e014      	b.n	8005f74 <_svfiprintf_r+0x110>
 8005f4a:	eba0 0308 	sub.w	r3, r0, r8
 8005f4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005f52:	4313      	orrs	r3, r2
 8005f54:	9304      	str	r3, [sp, #16]
 8005f56:	46a2      	mov	sl, r4
 8005f58:	e7d2      	b.n	8005f00 <_svfiprintf_r+0x9c>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	1d19      	adds	r1, r3, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	9103      	str	r1, [sp, #12]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bfbb      	ittet	lt
 8005f66:	425b      	neglt	r3, r3
 8005f68:	f042 0202 	orrlt.w	r2, r2, #2
 8005f6c:	9307      	strge	r3, [sp, #28]
 8005f6e:	9307      	strlt	r3, [sp, #28]
 8005f70:	bfb8      	it	lt
 8005f72:	9204      	strlt	r2, [sp, #16]
 8005f74:	7823      	ldrb	r3, [r4, #0]
 8005f76:	2b2e      	cmp	r3, #46	; 0x2e
 8005f78:	d10c      	bne.n	8005f94 <_svfiprintf_r+0x130>
 8005f7a:	7863      	ldrb	r3, [r4, #1]
 8005f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7e:	d134      	bne.n	8005fea <_svfiprintf_r+0x186>
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	1d1a      	adds	r2, r3, #4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	9203      	str	r2, [sp, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bfb8      	it	lt
 8005f8c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f90:	3402      	adds	r4, #2
 8005f92:	9305      	str	r3, [sp, #20]
 8005f94:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800605c <_svfiprintf_r+0x1f8>
 8005f98:	7821      	ldrb	r1, [r4, #0]
 8005f9a:	2203      	movs	r2, #3
 8005f9c:	4650      	mov	r0, sl
 8005f9e:	f7fa f91f 	bl	80001e0 <memchr>
 8005fa2:	b138      	cbz	r0, 8005fb4 <_svfiprintf_r+0x150>
 8005fa4:	9b04      	ldr	r3, [sp, #16]
 8005fa6:	eba0 000a 	sub.w	r0, r0, sl
 8005faa:	2240      	movs	r2, #64	; 0x40
 8005fac:	4082      	lsls	r2, r0
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	3401      	adds	r4, #1
 8005fb2:	9304      	str	r3, [sp, #16]
 8005fb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fb8:	4825      	ldr	r0, [pc, #148]	; (8006050 <_svfiprintf_r+0x1ec>)
 8005fba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fbe:	2206      	movs	r2, #6
 8005fc0:	f7fa f90e 	bl	80001e0 <memchr>
 8005fc4:	2800      	cmp	r0, #0
 8005fc6:	d038      	beq.n	800603a <_svfiprintf_r+0x1d6>
 8005fc8:	4b22      	ldr	r3, [pc, #136]	; (8006054 <_svfiprintf_r+0x1f0>)
 8005fca:	bb1b      	cbnz	r3, 8006014 <_svfiprintf_r+0x1b0>
 8005fcc:	9b03      	ldr	r3, [sp, #12]
 8005fce:	3307      	adds	r3, #7
 8005fd0:	f023 0307 	bic.w	r3, r3, #7
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	9303      	str	r3, [sp, #12]
 8005fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fda:	4433      	add	r3, r6
 8005fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8005fde:	e768      	b.n	8005eb2 <_svfiprintf_r+0x4e>
 8005fe0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	e7a6      	b.n	8005f38 <_svfiprintf_r+0xd4>
 8005fea:	2300      	movs	r3, #0
 8005fec:	3401      	adds	r4, #1
 8005fee:	9305      	str	r3, [sp, #20]
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	f04f 0c0a 	mov.w	ip, #10
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ffc:	3a30      	subs	r2, #48	; 0x30
 8005ffe:	2a09      	cmp	r2, #9
 8006000:	d903      	bls.n	800600a <_svfiprintf_r+0x1a6>
 8006002:	2b00      	cmp	r3, #0
 8006004:	d0c6      	beq.n	8005f94 <_svfiprintf_r+0x130>
 8006006:	9105      	str	r1, [sp, #20]
 8006008:	e7c4      	b.n	8005f94 <_svfiprintf_r+0x130>
 800600a:	fb0c 2101 	mla	r1, ip, r1, r2
 800600e:	4604      	mov	r4, r0
 8006010:	2301      	movs	r3, #1
 8006012:	e7f0      	b.n	8005ff6 <_svfiprintf_r+0x192>
 8006014:	ab03      	add	r3, sp, #12
 8006016:	9300      	str	r3, [sp, #0]
 8006018:	462a      	mov	r2, r5
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <_svfiprintf_r+0x1f4>)
 800601c:	a904      	add	r1, sp, #16
 800601e:	4638      	mov	r0, r7
 8006020:	f3af 8000 	nop.w
 8006024:	1c42      	adds	r2, r0, #1
 8006026:	4606      	mov	r6, r0
 8006028:	d1d6      	bne.n	8005fd8 <_svfiprintf_r+0x174>
 800602a:	89ab      	ldrh	r3, [r5, #12]
 800602c:	065b      	lsls	r3, r3, #25
 800602e:	f53f af2d 	bmi.w	8005e8c <_svfiprintf_r+0x28>
 8006032:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006034:	b01d      	add	sp, #116	; 0x74
 8006036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603a:	ab03      	add	r3, sp, #12
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	462a      	mov	r2, r5
 8006040:	4b05      	ldr	r3, [pc, #20]	; (8006058 <_svfiprintf_r+0x1f4>)
 8006042:	a904      	add	r1, sp, #16
 8006044:	4638      	mov	r0, r7
 8006046:	f000 f879 	bl	800613c <_printf_i>
 800604a:	e7eb      	b.n	8006024 <_svfiprintf_r+0x1c0>
 800604c:	08006538 	.word	0x08006538
 8006050:	08006542 	.word	0x08006542
 8006054:	00000000 	.word	0x00000000
 8006058:	08005db1 	.word	0x08005db1
 800605c:	0800653e 	.word	0x0800653e

08006060 <_printf_common>:
 8006060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006064:	4616      	mov	r6, r2
 8006066:	4699      	mov	r9, r3
 8006068:	688a      	ldr	r2, [r1, #8]
 800606a:	690b      	ldr	r3, [r1, #16]
 800606c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006070:	4293      	cmp	r3, r2
 8006072:	bfb8      	it	lt
 8006074:	4613      	movlt	r3, r2
 8006076:	6033      	str	r3, [r6, #0]
 8006078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800607c:	4607      	mov	r7, r0
 800607e:	460c      	mov	r4, r1
 8006080:	b10a      	cbz	r2, 8006086 <_printf_common+0x26>
 8006082:	3301      	adds	r3, #1
 8006084:	6033      	str	r3, [r6, #0]
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	0699      	lsls	r1, r3, #26
 800608a:	bf42      	ittt	mi
 800608c:	6833      	ldrmi	r3, [r6, #0]
 800608e:	3302      	addmi	r3, #2
 8006090:	6033      	strmi	r3, [r6, #0]
 8006092:	6825      	ldr	r5, [r4, #0]
 8006094:	f015 0506 	ands.w	r5, r5, #6
 8006098:	d106      	bne.n	80060a8 <_printf_common+0x48>
 800609a:	f104 0a19 	add.w	sl, r4, #25
 800609e:	68e3      	ldr	r3, [r4, #12]
 80060a0:	6832      	ldr	r2, [r6, #0]
 80060a2:	1a9b      	subs	r3, r3, r2
 80060a4:	42ab      	cmp	r3, r5
 80060a6:	dc26      	bgt.n	80060f6 <_printf_common+0x96>
 80060a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060ac:	1e13      	subs	r3, r2, #0
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	bf18      	it	ne
 80060b2:	2301      	movne	r3, #1
 80060b4:	0692      	lsls	r2, r2, #26
 80060b6:	d42b      	bmi.n	8006110 <_printf_common+0xb0>
 80060b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060bc:	4649      	mov	r1, r9
 80060be:	4638      	mov	r0, r7
 80060c0:	47c0      	blx	r8
 80060c2:	3001      	adds	r0, #1
 80060c4:	d01e      	beq.n	8006104 <_printf_common+0xa4>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	6922      	ldr	r2, [r4, #16]
 80060ca:	f003 0306 	and.w	r3, r3, #6
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	bf02      	ittt	eq
 80060d2:	68e5      	ldreq	r5, [r4, #12]
 80060d4:	6833      	ldreq	r3, [r6, #0]
 80060d6:	1aed      	subeq	r5, r5, r3
 80060d8:	68a3      	ldr	r3, [r4, #8]
 80060da:	bf0c      	ite	eq
 80060dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060e0:	2500      	movne	r5, #0
 80060e2:	4293      	cmp	r3, r2
 80060e4:	bfc4      	itt	gt
 80060e6:	1a9b      	subgt	r3, r3, r2
 80060e8:	18ed      	addgt	r5, r5, r3
 80060ea:	2600      	movs	r6, #0
 80060ec:	341a      	adds	r4, #26
 80060ee:	42b5      	cmp	r5, r6
 80060f0:	d11a      	bne.n	8006128 <_printf_common+0xc8>
 80060f2:	2000      	movs	r0, #0
 80060f4:	e008      	b.n	8006108 <_printf_common+0xa8>
 80060f6:	2301      	movs	r3, #1
 80060f8:	4652      	mov	r2, sl
 80060fa:	4649      	mov	r1, r9
 80060fc:	4638      	mov	r0, r7
 80060fe:	47c0      	blx	r8
 8006100:	3001      	adds	r0, #1
 8006102:	d103      	bne.n	800610c <_printf_common+0xac>
 8006104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800610c:	3501      	adds	r5, #1
 800610e:	e7c6      	b.n	800609e <_printf_common+0x3e>
 8006110:	18e1      	adds	r1, r4, r3
 8006112:	1c5a      	adds	r2, r3, #1
 8006114:	2030      	movs	r0, #48	; 0x30
 8006116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800611a:	4422      	add	r2, r4
 800611c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006124:	3302      	adds	r3, #2
 8006126:	e7c7      	b.n	80060b8 <_printf_common+0x58>
 8006128:	2301      	movs	r3, #1
 800612a:	4622      	mov	r2, r4
 800612c:	4649      	mov	r1, r9
 800612e:	4638      	mov	r0, r7
 8006130:	47c0      	blx	r8
 8006132:	3001      	adds	r0, #1
 8006134:	d0e6      	beq.n	8006104 <_printf_common+0xa4>
 8006136:	3601      	adds	r6, #1
 8006138:	e7d9      	b.n	80060ee <_printf_common+0x8e>
	...

0800613c <_printf_i>:
 800613c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	7e0f      	ldrb	r7, [r1, #24]
 8006142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006144:	2f78      	cmp	r7, #120	; 0x78
 8006146:	4691      	mov	r9, r2
 8006148:	4680      	mov	r8, r0
 800614a:	460c      	mov	r4, r1
 800614c:	469a      	mov	sl, r3
 800614e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006152:	d807      	bhi.n	8006164 <_printf_i+0x28>
 8006154:	2f62      	cmp	r7, #98	; 0x62
 8006156:	d80a      	bhi.n	800616e <_printf_i+0x32>
 8006158:	2f00      	cmp	r7, #0
 800615a:	f000 80d4 	beq.w	8006306 <_printf_i+0x1ca>
 800615e:	2f58      	cmp	r7, #88	; 0x58
 8006160:	f000 80c0 	beq.w	80062e4 <_printf_i+0x1a8>
 8006164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800616c:	e03a      	b.n	80061e4 <_printf_i+0xa8>
 800616e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006172:	2b15      	cmp	r3, #21
 8006174:	d8f6      	bhi.n	8006164 <_printf_i+0x28>
 8006176:	a101      	add	r1, pc, #4	; (adr r1, 800617c <_printf_i+0x40>)
 8006178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800617c:	080061d5 	.word	0x080061d5
 8006180:	080061e9 	.word	0x080061e9
 8006184:	08006165 	.word	0x08006165
 8006188:	08006165 	.word	0x08006165
 800618c:	08006165 	.word	0x08006165
 8006190:	08006165 	.word	0x08006165
 8006194:	080061e9 	.word	0x080061e9
 8006198:	08006165 	.word	0x08006165
 800619c:	08006165 	.word	0x08006165
 80061a0:	08006165 	.word	0x08006165
 80061a4:	08006165 	.word	0x08006165
 80061a8:	080062ed 	.word	0x080062ed
 80061ac:	08006215 	.word	0x08006215
 80061b0:	080062a7 	.word	0x080062a7
 80061b4:	08006165 	.word	0x08006165
 80061b8:	08006165 	.word	0x08006165
 80061bc:	0800630f 	.word	0x0800630f
 80061c0:	08006165 	.word	0x08006165
 80061c4:	08006215 	.word	0x08006215
 80061c8:	08006165 	.word	0x08006165
 80061cc:	08006165 	.word	0x08006165
 80061d0:	080062af 	.word	0x080062af
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	1d1a      	adds	r2, r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	602a      	str	r2, [r5, #0]
 80061dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061e4:	2301      	movs	r3, #1
 80061e6:	e09f      	b.n	8006328 <_printf_i+0x1ec>
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	682b      	ldr	r3, [r5, #0]
 80061ec:	0607      	lsls	r7, r0, #24
 80061ee:	f103 0104 	add.w	r1, r3, #4
 80061f2:	6029      	str	r1, [r5, #0]
 80061f4:	d501      	bpl.n	80061fa <_printf_i+0xbe>
 80061f6:	681e      	ldr	r6, [r3, #0]
 80061f8:	e003      	b.n	8006202 <_printf_i+0xc6>
 80061fa:	0646      	lsls	r6, r0, #25
 80061fc:	d5fb      	bpl.n	80061f6 <_printf_i+0xba>
 80061fe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006202:	2e00      	cmp	r6, #0
 8006204:	da03      	bge.n	800620e <_printf_i+0xd2>
 8006206:	232d      	movs	r3, #45	; 0x2d
 8006208:	4276      	negs	r6, r6
 800620a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800620e:	485a      	ldr	r0, [pc, #360]	; (8006378 <_printf_i+0x23c>)
 8006210:	230a      	movs	r3, #10
 8006212:	e012      	b.n	800623a <_printf_i+0xfe>
 8006214:	682b      	ldr	r3, [r5, #0]
 8006216:	6820      	ldr	r0, [r4, #0]
 8006218:	1d19      	adds	r1, r3, #4
 800621a:	6029      	str	r1, [r5, #0]
 800621c:	0605      	lsls	r5, r0, #24
 800621e:	d501      	bpl.n	8006224 <_printf_i+0xe8>
 8006220:	681e      	ldr	r6, [r3, #0]
 8006222:	e002      	b.n	800622a <_printf_i+0xee>
 8006224:	0641      	lsls	r1, r0, #25
 8006226:	d5fb      	bpl.n	8006220 <_printf_i+0xe4>
 8006228:	881e      	ldrh	r6, [r3, #0]
 800622a:	4853      	ldr	r0, [pc, #332]	; (8006378 <_printf_i+0x23c>)
 800622c:	2f6f      	cmp	r7, #111	; 0x6f
 800622e:	bf0c      	ite	eq
 8006230:	2308      	moveq	r3, #8
 8006232:	230a      	movne	r3, #10
 8006234:	2100      	movs	r1, #0
 8006236:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800623a:	6865      	ldr	r5, [r4, #4]
 800623c:	60a5      	str	r5, [r4, #8]
 800623e:	2d00      	cmp	r5, #0
 8006240:	bfa2      	ittt	ge
 8006242:	6821      	ldrge	r1, [r4, #0]
 8006244:	f021 0104 	bicge.w	r1, r1, #4
 8006248:	6021      	strge	r1, [r4, #0]
 800624a:	b90e      	cbnz	r6, 8006250 <_printf_i+0x114>
 800624c:	2d00      	cmp	r5, #0
 800624e:	d04b      	beq.n	80062e8 <_printf_i+0x1ac>
 8006250:	4615      	mov	r5, r2
 8006252:	fbb6 f1f3 	udiv	r1, r6, r3
 8006256:	fb03 6711 	mls	r7, r3, r1, r6
 800625a:	5dc7      	ldrb	r7, [r0, r7]
 800625c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006260:	4637      	mov	r7, r6
 8006262:	42bb      	cmp	r3, r7
 8006264:	460e      	mov	r6, r1
 8006266:	d9f4      	bls.n	8006252 <_printf_i+0x116>
 8006268:	2b08      	cmp	r3, #8
 800626a:	d10b      	bne.n	8006284 <_printf_i+0x148>
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	07de      	lsls	r6, r3, #31
 8006270:	d508      	bpl.n	8006284 <_printf_i+0x148>
 8006272:	6923      	ldr	r3, [r4, #16]
 8006274:	6861      	ldr	r1, [r4, #4]
 8006276:	4299      	cmp	r1, r3
 8006278:	bfde      	ittt	le
 800627a:	2330      	movle	r3, #48	; 0x30
 800627c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006280:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006284:	1b52      	subs	r2, r2, r5
 8006286:	6122      	str	r2, [r4, #16]
 8006288:	f8cd a000 	str.w	sl, [sp]
 800628c:	464b      	mov	r3, r9
 800628e:	aa03      	add	r2, sp, #12
 8006290:	4621      	mov	r1, r4
 8006292:	4640      	mov	r0, r8
 8006294:	f7ff fee4 	bl	8006060 <_printf_common>
 8006298:	3001      	adds	r0, #1
 800629a:	d14a      	bne.n	8006332 <_printf_i+0x1f6>
 800629c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a0:	b004      	add	sp, #16
 80062a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	f043 0320 	orr.w	r3, r3, #32
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	4833      	ldr	r0, [pc, #204]	; (800637c <_printf_i+0x240>)
 80062b0:	2778      	movs	r7, #120	; 0x78
 80062b2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	6829      	ldr	r1, [r5, #0]
 80062ba:	061f      	lsls	r7, r3, #24
 80062bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80062c0:	d402      	bmi.n	80062c8 <_printf_i+0x18c>
 80062c2:	065f      	lsls	r7, r3, #25
 80062c4:	bf48      	it	mi
 80062c6:	b2b6      	uxthmi	r6, r6
 80062c8:	07df      	lsls	r7, r3, #31
 80062ca:	bf48      	it	mi
 80062cc:	f043 0320 	orrmi.w	r3, r3, #32
 80062d0:	6029      	str	r1, [r5, #0]
 80062d2:	bf48      	it	mi
 80062d4:	6023      	strmi	r3, [r4, #0]
 80062d6:	b91e      	cbnz	r6, 80062e0 <_printf_i+0x1a4>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	f023 0320 	bic.w	r3, r3, #32
 80062de:	6023      	str	r3, [r4, #0]
 80062e0:	2310      	movs	r3, #16
 80062e2:	e7a7      	b.n	8006234 <_printf_i+0xf8>
 80062e4:	4824      	ldr	r0, [pc, #144]	; (8006378 <_printf_i+0x23c>)
 80062e6:	e7e4      	b.n	80062b2 <_printf_i+0x176>
 80062e8:	4615      	mov	r5, r2
 80062ea:	e7bd      	b.n	8006268 <_printf_i+0x12c>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	6826      	ldr	r6, [r4, #0]
 80062f0:	6961      	ldr	r1, [r4, #20]
 80062f2:	1d18      	adds	r0, r3, #4
 80062f4:	6028      	str	r0, [r5, #0]
 80062f6:	0635      	lsls	r5, r6, #24
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	d501      	bpl.n	8006300 <_printf_i+0x1c4>
 80062fc:	6019      	str	r1, [r3, #0]
 80062fe:	e002      	b.n	8006306 <_printf_i+0x1ca>
 8006300:	0670      	lsls	r0, r6, #25
 8006302:	d5fb      	bpl.n	80062fc <_printf_i+0x1c0>
 8006304:	8019      	strh	r1, [r3, #0]
 8006306:	2300      	movs	r3, #0
 8006308:	6123      	str	r3, [r4, #16]
 800630a:	4615      	mov	r5, r2
 800630c:	e7bc      	b.n	8006288 <_printf_i+0x14c>
 800630e:	682b      	ldr	r3, [r5, #0]
 8006310:	1d1a      	adds	r2, r3, #4
 8006312:	602a      	str	r2, [r5, #0]
 8006314:	681d      	ldr	r5, [r3, #0]
 8006316:	6862      	ldr	r2, [r4, #4]
 8006318:	2100      	movs	r1, #0
 800631a:	4628      	mov	r0, r5
 800631c:	f7f9 ff60 	bl	80001e0 <memchr>
 8006320:	b108      	cbz	r0, 8006326 <_printf_i+0x1ea>
 8006322:	1b40      	subs	r0, r0, r5
 8006324:	6060      	str	r0, [r4, #4]
 8006326:	6863      	ldr	r3, [r4, #4]
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	2300      	movs	r3, #0
 800632c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006330:	e7aa      	b.n	8006288 <_printf_i+0x14c>
 8006332:	6923      	ldr	r3, [r4, #16]
 8006334:	462a      	mov	r2, r5
 8006336:	4649      	mov	r1, r9
 8006338:	4640      	mov	r0, r8
 800633a:	47d0      	blx	sl
 800633c:	3001      	adds	r0, #1
 800633e:	d0ad      	beq.n	800629c <_printf_i+0x160>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	079b      	lsls	r3, r3, #30
 8006344:	d413      	bmi.n	800636e <_printf_i+0x232>
 8006346:	68e0      	ldr	r0, [r4, #12]
 8006348:	9b03      	ldr	r3, [sp, #12]
 800634a:	4298      	cmp	r0, r3
 800634c:	bfb8      	it	lt
 800634e:	4618      	movlt	r0, r3
 8006350:	e7a6      	b.n	80062a0 <_printf_i+0x164>
 8006352:	2301      	movs	r3, #1
 8006354:	4632      	mov	r2, r6
 8006356:	4649      	mov	r1, r9
 8006358:	4640      	mov	r0, r8
 800635a:	47d0      	blx	sl
 800635c:	3001      	adds	r0, #1
 800635e:	d09d      	beq.n	800629c <_printf_i+0x160>
 8006360:	3501      	adds	r5, #1
 8006362:	68e3      	ldr	r3, [r4, #12]
 8006364:	9903      	ldr	r1, [sp, #12]
 8006366:	1a5b      	subs	r3, r3, r1
 8006368:	42ab      	cmp	r3, r5
 800636a:	dcf2      	bgt.n	8006352 <_printf_i+0x216>
 800636c:	e7eb      	b.n	8006346 <_printf_i+0x20a>
 800636e:	2500      	movs	r5, #0
 8006370:	f104 0619 	add.w	r6, r4, #25
 8006374:	e7f5      	b.n	8006362 <_printf_i+0x226>
 8006376:	bf00      	nop
 8006378:	08006549 	.word	0x08006549
 800637c:	0800655a 	.word	0x0800655a

08006380 <memmove>:
 8006380:	4288      	cmp	r0, r1
 8006382:	b510      	push	{r4, lr}
 8006384:	eb01 0402 	add.w	r4, r1, r2
 8006388:	d902      	bls.n	8006390 <memmove+0x10>
 800638a:	4284      	cmp	r4, r0
 800638c:	4623      	mov	r3, r4
 800638e:	d807      	bhi.n	80063a0 <memmove+0x20>
 8006390:	1e43      	subs	r3, r0, #1
 8006392:	42a1      	cmp	r1, r4
 8006394:	d008      	beq.n	80063a8 <memmove+0x28>
 8006396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800639a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800639e:	e7f8      	b.n	8006392 <memmove+0x12>
 80063a0:	4402      	add	r2, r0
 80063a2:	4601      	mov	r1, r0
 80063a4:	428a      	cmp	r2, r1
 80063a6:	d100      	bne.n	80063aa <memmove+0x2a>
 80063a8:	bd10      	pop	{r4, pc}
 80063aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063b2:	e7f7      	b.n	80063a4 <memmove+0x24>

080063b4 <_sbrk_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	4d06      	ldr	r5, [pc, #24]	; (80063d0 <_sbrk_r+0x1c>)
 80063b8:	2300      	movs	r3, #0
 80063ba:	4604      	mov	r4, r0
 80063bc:	4608      	mov	r0, r1
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	f7fa ffde 	bl	8001380 <_sbrk>
 80063c4:	1c43      	adds	r3, r0, #1
 80063c6:	d102      	bne.n	80063ce <_sbrk_r+0x1a>
 80063c8:	682b      	ldr	r3, [r5, #0]
 80063ca:	b103      	cbz	r3, 80063ce <_sbrk_r+0x1a>
 80063cc:	6023      	str	r3, [r4, #0]
 80063ce:	bd38      	pop	{r3, r4, r5, pc}
 80063d0:	200004e8 	.word	0x200004e8

080063d4 <memcpy>:
 80063d4:	440a      	add	r2, r1
 80063d6:	4291      	cmp	r1, r2
 80063d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063dc:	d100      	bne.n	80063e0 <memcpy+0xc>
 80063de:	4770      	bx	lr
 80063e0:	b510      	push	{r4, lr}
 80063e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ea:	4291      	cmp	r1, r2
 80063ec:	d1f9      	bne.n	80063e2 <memcpy+0xe>
 80063ee:	bd10      	pop	{r4, pc}

080063f0 <_realloc_r>:
 80063f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f4:	4680      	mov	r8, r0
 80063f6:	4614      	mov	r4, r2
 80063f8:	460e      	mov	r6, r1
 80063fa:	b921      	cbnz	r1, 8006406 <_realloc_r+0x16>
 80063fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006400:	4611      	mov	r1, r2
 8006402:	f7ff bc49 	b.w	8005c98 <_malloc_r>
 8006406:	b92a      	cbnz	r2, 8006414 <_realloc_r+0x24>
 8006408:	f7ff fbda 	bl	8005bc0 <_free_r>
 800640c:	4625      	mov	r5, r4
 800640e:	4628      	mov	r0, r5
 8006410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006414:	f000 f81b 	bl	800644e <_malloc_usable_size_r>
 8006418:	4284      	cmp	r4, r0
 800641a:	4607      	mov	r7, r0
 800641c:	d802      	bhi.n	8006424 <_realloc_r+0x34>
 800641e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006422:	d812      	bhi.n	800644a <_realloc_r+0x5a>
 8006424:	4621      	mov	r1, r4
 8006426:	4640      	mov	r0, r8
 8006428:	f7ff fc36 	bl	8005c98 <_malloc_r>
 800642c:	4605      	mov	r5, r0
 800642e:	2800      	cmp	r0, #0
 8006430:	d0ed      	beq.n	800640e <_realloc_r+0x1e>
 8006432:	42bc      	cmp	r4, r7
 8006434:	4622      	mov	r2, r4
 8006436:	4631      	mov	r1, r6
 8006438:	bf28      	it	cs
 800643a:	463a      	movcs	r2, r7
 800643c:	f7ff ffca 	bl	80063d4 <memcpy>
 8006440:	4631      	mov	r1, r6
 8006442:	4640      	mov	r0, r8
 8006444:	f7ff fbbc 	bl	8005bc0 <_free_r>
 8006448:	e7e1      	b.n	800640e <_realloc_r+0x1e>
 800644a:	4635      	mov	r5, r6
 800644c:	e7df      	b.n	800640e <_realloc_r+0x1e>

0800644e <_malloc_usable_size_r>:
 800644e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006452:	1f18      	subs	r0, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	bfbc      	itt	lt
 8006458:	580b      	ldrlt	r3, [r1, r0]
 800645a:	18c0      	addlt	r0, r0, r3
 800645c:	4770      	bx	lr
	...

08006460 <_init>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr

0800646c <_fini>:
 800646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646e:	bf00      	nop
 8006470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006472:	bc08      	pop	{r3}
 8006474:	469e      	mov	lr, r3
 8006476:	4770      	bx	lr
