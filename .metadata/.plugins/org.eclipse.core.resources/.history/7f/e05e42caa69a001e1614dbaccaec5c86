#include "main.h"
#include "stm32f4xx_it.h"
#include "TLV320AIC3101_Codec.h"

HAL_StatusTypeDef Codec_Init(Codec *codec, I2C_HandleTypeDef *I2Chandle){

	//assign I2C handler
	codec->I2Chandle = I2Chandle;

	HAL_StatusTypeDef status;

	//Wait power on reset for the CODEC
	HAL_Delay(RESET_TIME);

	//(1) software reset
	status = Codec_WriteRegister(codec, 0x01, 0b10000000);
	HAL_Delay(10);

	//(2) codec ADC/DAC sample rate
	status = Codec_WriteRegister(codec, 0x02, 0b00000000);

	//(3)We want fs_ref=48kHz, MCLK = 12.288 MHz, CODEC_CLK=fs_ref*256=12.288MHz, with  CODEC_CLK = MCLK*2/Q -> Q=2
	//status = Codec_WriteRegister(codec, 0x03, 0b01000000);
	status = Codec_WriteRegister(codec, 0x03, 0b00010001);

	//(7) fs=48kHz, ADC-DAC dual rate OFF, left-DAC data path plays left-channel input data, right-DAC data path plays right-channel input data
	status = Codec_WriteRegister(codec, 0x07, 0b00001010);

	//(12) Input HP filter disabled, DAC filters bypassed
	status = Codec_WriteRegister(codec, 0x0c, 0b01010000);

	//(14) high-power outputs ac-coupled driver configuration, pseudo-differential
	status = Codec_WriteRegister(codec, 0x0e, 0b10001000);

	//(15) un-mute left ADC PGA (6dB) (TESTED, WITH HIGHER GAIN SATURATES)
	status = Codec_WriteRegister(codec, 0x0f, 0b00001100);

	//(16) un-mute right ADC PGA (6dB) (TESTED, WITH HIGHER GAIN SATURATES)
	status = Codec_WriteRegister(codec, 0x10, 0b00001100);

	//LET'S USE JACK CH2 FOR THE TESTS!
	//(17) MIC2L connected to LEFT ADC (0dB), MIC2R not connected to LEFT ADC
	status = Codec_WriteRegister(codec, 0x11, 0b00001111);
	//(18) MIC2R connected to RIGTH ADC (0dB), MIC2L not connected to RIGHT ADC
	status = Codec_WriteRegister(codec, 0x12, 0b11110000);

	//(19) Turn ON LEFT ADC - PGA soft stepping disabled
	status = Codec_WriteRegister(codec, 0x13, 0b01111111);

	//(22) Turn ON RIGHT ADC - PGA soft stepping disabled
	status = Codec_WriteRegister(codec, 0x16, 0b01111111);

	//(37) Turn ON RIGHT and LEFT DACs, HPLCOM set as independent VCM output
	status = Codec_WriteRegister(codec, 0x25, 0b11010000);
	//status = Codec_WriteRegister(codec, 0x25, 0b11010000);//Gieff

	//(38) HPRCOM set as independent VCM output, short circuit protection activated with curr limit
	status = Codec_WriteRegister(codec, 0x26, 0b00001000);
	//status = Codec_WriteRegister(codec, 0x26, 0b00100000);//Gieff

	//(40) output common-mode voltage = 1.35 V - output soft stepping each fs
	status = Codec_WriteRegister(codec, 0x28, 0b00000000);

	//(41) set DAC path, DAC_L2 to left high power, DAC_R2 to right high power
	status = Codec_WriteRegister(codec, 0x29, 0b10100010);
	//if commented, DAC_L1/DAC_R1 is used to HPLOUT, HPROUT

	//(42) Pop-reduction register, voltage divider
	status = Codec_WriteRegister(codec, 0x2a, 0b10101110);

	//(43) un-mute left DAC, gain 0dB
	status = Codec_WriteRegister(codec, 0x2b, 0b00000000);

	//(44) un-mute right DAC, gain 0dB
	status = Codec_WriteRegister(codec, 0x2c, 0b00000000);

	//(46) PGA_L to HPLOUT ON, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x2e, 0b10000000);

	//(47) DAC_L1 to HPLOUT ON, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x2f, 0b10000000);

	//(51) un-mute HPLOUT, 9dB, high impedance when powered down, HPLOUT fully powered
	status = Codec_WriteRegister(codec, 0x33, 0b10011111);
	//status = Codec_WriteRegister(codec, 0x33, 0b00001101);//Gieff

	//(58) un-mute HPLCOM, high impedance when powered down, HPLCOM ON
	//status = Codec_WriteRegister(codec, 0x3A, 0b10011111);

	//(63) PGA_R to HPROUT ON, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x3f, 0b10000000);

	//(64) DAC_R1 to HPROUT OFF, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x3f, 0b00000000);

	//(65) un-mute HPROUT, 9dB, high impedance when powered down, HPROUT fully powered
	status = Codec_WriteRegister(codec, 0x41, 0b10011111);
	//status = Codec_WriteRegister(codec, 0x41, 0b00001101); //gieff

	//(72) un-mute HPRCOM, high impedance when powered down, HPRCOM fully powered
	//status = Codec_WriteRegister(codec, 0x48, 0b10011111);

	//(101) CLK source selection, CLKDIV_OUT
	status = Codec_WriteRegister(codec, 0x65, 0b00000001);

	//(102) CLK source selection, MCLK
	status = Codec_WriteRegister(codec, 0x66, 0b00000010);

	//(109) DAC quiescent current 50% increase
	status = Codec_WriteRegister(codec, 0x6d, 0b00000000);

	return status;
}

HAL_StatusTypeDef Codec_WriteRegister(Codec *codec, uint8_t reg_addr, uint8_t val){
	//uint8_t data[2]={reg_addr,val};
	//HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(codec->I2Chandle, CODEC_I2C_ADDR, data, 2, 100);
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(codec->I2Chandle, CODEC_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE, &val, sizeof(val), 10);
	return status;
}


HAL_StatusTypeDef Codec_ReadRegister(Codec *codec, uint8_t reg_addr, uint8_t *val){
	//HAL_I2C_Master_Transmit(codec->I2Chandle, CODEC_I2C_ADDR, &reg_addr, sizeof(reg_addr), 100);
	//HAL_StatusTypeDef status = HAL_I2C_Master_Receive(codec->I2Chandle, CODEC_I2C_ADDR, val, I2C_MEMADD_SIZE, 100);
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(codec->I2Chandle, CODEC_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE, val, sizeof(val), 10);
	return status;
}
