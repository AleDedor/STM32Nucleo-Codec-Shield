
NAS_periph_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08005450  08005450  00015450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054d0  080054d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054d8  080054d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054d8  080054d8  000154d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054dc  080054dc  000154dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080054e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000074  08005554  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08005554  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013256  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275c  00000000  00000000  000332fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00035a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00036b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000177a2  00000000  00000000  00037ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f18  00000000  00000000  0004f34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f5d  00000000  00000000  00065262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f71bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cd0  00000000  00000000  000f7210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005438 	.word	0x08005438

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08005438 	.word	0x08005438

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Codec_Init>:
#include "main.h"
#include "stm32f4xx_it.h"
#include "TLV320AIC3101_Codec.h"

HAL_StatusTypeDef Codec_Init(Codec *codec, I2C_HandleTypeDef *I2Chandle){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]

	//assign I2C handler
	codec->I2Chandle = I2Chandle;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	601a      	str	r2, [r3, #0]

	HAL_StatusTypeDef status;

	//Wait power on reset for the CODEC
	HAL_Delay(RESET_TIME);
 8000594:	200a      	movs	r0, #10
 8000596:	f000 fe09 	bl	80011ac <HAL_Delay>

	//(1) software reset
	status = Codec_WriteRegister(codec, 0x01, 0b10000000);
 800059a:	2280      	movs	r2, #128	; 0x80
 800059c:	2101      	movs	r1, #1
 800059e:	6878      	ldr	r0, [r7, #4]
 80005a0:	f000 f8a4 	bl	80006ec <Codec_WriteRegister>
 80005a4:	4603      	mov	r3, r0
 80005a6:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80005a8:	200a      	movs	r0, #10
 80005aa:	f000 fdff 	bl	80011ac <HAL_Delay>

	//(2) codec ADC/DAC sample rate
	status = Codec_WriteRegister(codec, 0x02, 0b00000000);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2102      	movs	r1, #2
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f89a 	bl	80006ec <Codec_WriteRegister>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73fb      	strb	r3, [r7, #15]

	//(3)We want fs_ref=48kHz, MCLK = 12.288 MHz, CODEC_CLK=fs_ref*256=12.288MHz, with  CODEC_CLK = MCLK*2/Q -> Q=2
	//status = Codec_WriteRegister(codec, 0x03, 0b01000000);
	status = Codec_WriteRegister(codec, 0x03, 0b10010000);
 80005bc:	2290      	movs	r2, #144	; 0x90
 80005be:	2103      	movs	r1, #3
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 f893 	bl	80006ec <Codec_WriteRegister>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73fb      	strb	r3, [r7, #15]

	//(7) fs=48kHz, ADC-DAC dual rate OFF, left-DAC data path plays left-channel input data, right-DAC data path plays right-channel input data
	status = Codec_WriteRegister(codec, 0x07, 0b00001010);
 80005ca:	220a      	movs	r2, #10
 80005cc:	2107      	movs	r1, #7
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f88c 	bl	80006ec <Codec_WriteRegister>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]

	//(12) Input HP filter disabled, DAC filters bypassed
	status = Codec_WriteRegister(codec, 0x0c, 0b00000000);
 80005d8:	2200      	movs	r2, #0
 80005da:	210c      	movs	r1, #12
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f885 	bl	80006ec <Codec_WriteRegister>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]

	//(14) high-power outputs ac-coupled driver configuration, pseudo-differential
	status = Codec_WriteRegister(codec, 0x0e, 0b10001000);
 80005e6:	2288      	movs	r2, #136	; 0x88
 80005e8:	210e      	movs	r1, #14
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f87e 	bl	80006ec <Codec_WriteRegister>
 80005f0:	4603      	mov	r3, r0
 80005f2:	73fb      	strb	r3, [r7, #15]

	//(15) un-mute left ADC PGA
	status = Codec_WriteRegister(codec, 0x0f, 0b00000000);
 80005f4:	2200      	movs	r2, #0
 80005f6:	210f      	movs	r1, #15
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f877 	bl	80006ec <Codec_WriteRegister>
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]

	//(16) un-mute right ADC PGA
	status = Codec_WriteRegister(codec, 0x10, 0b00000000);
 8000602:	2200      	movs	r2, #0
 8000604:	2110      	movs	r1, #16
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f870 	bl	80006ec <Codec_WriteRegister>
 800060c:	4603      	mov	r3, r0
 800060e:	73fb      	strb	r3, [r7, #15]

	//LET'S USE JACK CH2 FOR THE TESTS!
	//(17) MIC2L connected to LEFT ADC (0dB), MIC2R not connected to LEFT ADC
	status = Codec_WriteRegister(codec, 0x11, 0b00001111);
 8000610:	220f      	movs	r2, #15
 8000612:	2111      	movs	r1, #17
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f869 	bl	80006ec <Codec_WriteRegister>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]
	//(18) MIC2R connected to RIGTH ADC (0dB), MIC2L not connected to RIGHT ADC
	status = Codec_WriteRegister(codec, 0x12, 0b11110000);
 800061e:	22f0      	movs	r2, #240	; 0xf0
 8000620:	2112      	movs	r1, #18
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f862 	bl	80006ec <Codec_WriteRegister>
 8000628:	4603      	mov	r3, r0
 800062a:	73fb      	strb	r3, [r7, #15]

	//(19) Turn ON LEFT ADC - PGA soft stepping disabled
	status = Codec_WriteRegister(codec, 0x13, 0b01111111);
 800062c:	227f      	movs	r2, #127	; 0x7f
 800062e:	2113      	movs	r1, #19
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f85b 	bl	80006ec <Codec_WriteRegister>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]

	//(22) Turn ON RIGHT ADC - PGA soft stepping disabled
	status = Codec_WriteRegister(codec, 0x16, 0b01111111);
 800063a:	227f      	movs	r2, #127	; 0x7f
 800063c:	2116      	movs	r1, #22
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f854 	bl	80006ec <Codec_WriteRegister>
 8000644:	4603      	mov	r3, r0
 8000646:	73fb      	strb	r3, [r7, #15]

	//(37) Turn ON RIGHT and LEFT DACs, HPLCOM set as independent VCM output
	status = Codec_WriteRegister(codec, 0x25, 0b11010000);
 8000648:	22d0      	movs	r2, #208	; 0xd0
 800064a:	2125      	movs	r1, #37	; 0x25
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f000 f84d 	bl	80006ec <Codec_WriteRegister>
 8000652:	4603      	mov	r3, r0
 8000654:	73fb      	strb	r3, [r7, #15]
	//status = Codec_WriteRegister(codec, 0x25, 0b11010000);//Gieff

	//(38) HPRCOM set as independent SE output, short circuit protection activated with curr limit
	status = Codec_WriteRegister(codec, 0x26, 0b00001000);
 8000656:	2208      	movs	r2, #8
 8000658:	2126      	movs	r1, #38	; 0x26
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f846 	bl	80006ec <Codec_WriteRegister>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]

	//(40) output common-mode voltage = 1.35 V - output soft stepping each fs
	//status = Codec_WriteRegister(codec, 0x28, 0b00000000);

	//(41) set DAC path, DAC_L2 to left high power, DAC_R2 to right high power, right-DAC volume follows left-DAC volume
	status = Codec_WriteRegister(codec, 0x29, 0b10100010);
 8000664:	22a2      	movs	r2, #162	; 0xa2
 8000666:	2129      	movs	r1, #41	; 0x29
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f83f 	bl	80006ec <Codec_WriteRegister>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]

	//(42) Pop-reduction register, voltage divider
	//status = Codec_WriteRegister(codec, 0x2a, 0b00010100);

	//(43) un-mute left DAC, gain 0dB
	status = Codec_WriteRegister(codec, 0x2b, 0b00000000);
 8000672:	2200      	movs	r2, #0
 8000674:	212b      	movs	r1, #43	; 0x2b
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 f838 	bl	80006ec <Codec_WriteRegister>
 800067c:	4603      	mov	r3, r0
 800067e:	73fb      	strb	r3, [r7, #15]

	//(44) un-mute right DAC, gain 0dB
	status = Codec_WriteRegister(codec, 0x2c, 0b00000000);
 8000680:	2200      	movs	r2, #0
 8000682:	212c      	movs	r1, #44	; 0x2c
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f831 	bl	80006ec <Codec_WriteRegister>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]

	//(46) PGA_L to HPLOUT OFF, volume control 0dB
	status = Codec_WriteRegister(codec, 0x2e, 0b00000000);
 800068e:	2200      	movs	r2, #0
 8000690:	212e      	movs	r1, #46	; 0x2e
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f82a 	bl	80006ec <Codec_WriteRegister>
 8000698:	4603      	mov	r3, r0
 800069a:	73fb      	strb	r3, [r7, #15]

	//(47) DAC_L1 to HPLOUT ON, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x2f, 0b10000000);

	//(51) un-mute HPLOUT, 9dB, high impedance when powered down, HPLOUT fully powered
	status = Codec_WriteRegister(codec, 0x33, 0b01001101);
 800069c:	224d      	movs	r2, #77	; 0x4d
 800069e:	2133      	movs	r1, #51	; 0x33
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f823 	bl	80006ec <Codec_WriteRegister>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]

	//(58) un-mute HPLCOM, high impedance when powered down, HPLCOM fully powered
	//status = Codec_WriteRegister(codec, 0x3A, 0b00000100);

	//(63) PGA_R to HPROUT OFF, volume control 0dB
	status = Codec_WriteRegister(codec, 0x3f, 0b00000000);
 80006aa:	2200      	movs	r2, #0
 80006ac:	213f      	movs	r1, #63	; 0x3f
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f81c 	bl	80006ec <Codec_WriteRegister>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]

	//(64) DAC_R1 to HPROUT ON, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x3f, 0b00000000);

	//(65) un-mute HPROUT, 9dB, high impedance when powered down, HPROUT fully powered
	status = Codec_WriteRegister(codec, 0x41, 0b01001101);
 80006b8:	224d      	movs	r2, #77	; 0x4d
 80006ba:	2141      	movs	r1, #65	; 0x41
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 f815 	bl	80006ec <Codec_WriteRegister>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]

	//(72) un-mute HPRCOM, high impedance when powered down, HPRCOM fully powered
	//status = Codec_WriteRegister(codec, 0x48, 0b00000100);

	//(101) CLK source selection, CLKDIV_OUT
	status = Codec_WriteRegister(codec, 0x65, 0b00000001);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2165      	movs	r1, #101	; 0x65
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f80e 	bl	80006ec <Codec_WriteRegister>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73fb      	strb	r3, [r7, #15]

	//(102) CLK source selection, MCLK
	status = Codec_WriteRegister(codec, 0x66, 0b00000010);
 80006d4:	2202      	movs	r2, #2
 80006d6:	2166      	movs	r1, #102	; 0x66
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f807 	bl	80006ec <Codec_WriteRegister>
 80006de:	4603      	mov	r3, r0
 80006e0:	73fb      	strb	r3, [r7, #15]

	return status;
 80006e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3710      	adds	r7, #16
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <Codec_WriteRegister>:

HAL_StatusTypeDef Codec_WriteRegister(Codec *codec, uint8_t reg_addr, uint8_t val){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af02      	add	r7, sp, #8
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
 80006f8:	4613      	mov	r3, r2
 80006fa:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2]={reg_addr,val};
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	733b      	strb	r3, [r7, #12]
 8000700:	78bb      	ldrb	r3, [r7, #2]
 8000702:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(codec->I2Chandle, CODEC_I2C_ADDR, data, 2, 100);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	6818      	ldr	r0, [r3, #0]
 8000708:	f107 020c 	add.w	r2, r7, #12
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2302      	movs	r3, #2
 8000712:	2130      	movs	r1, #48	; 0x30
 8000714:	f001 fa02 	bl	8001b1c <HAL_I2C_Master_Transmit>
 8000718:	4603      	mov	r3, r0
 800071a:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef status = HAL_I2C_Mem_Write(codec->I2Chandle, CODEC_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE, &val, sizeof(val), 100);
	return status;
 800071c:	7bfb      	ldrb	r3, [r7, #15]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <process_half>:
	HAL_GPIO_WritePin(GPIOA, RLED1_Pin|RLED2_Pin|YLED1_Pin|YLED2_Pin|GLED1_Pin|GLED2_Pin, GPIO_PIN_RESET);
}

/* 2 DMA streams are used, 1 RX ,1 TX */
/* move half of the receiving DMA into the half of the transimitting DMA */
void process_half(){
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
	  for(uint8_t n=0 ; n < (BUFF_SIZE/2) -1; n+=2){
 800072e:	2300      	movs	r3, #0
 8000730:	71fb      	strb	r3, [r7, #7]
 8000732:	e01e      	b.n	8000772 <process_half+0x4a>
		  //LEFT
		  outBufPtr[n]=inBufPtr[n];
 8000734:	4b14      	ldr	r3, [pc, #80]	; (8000788 <process_half+0x60>)
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	441a      	add	r2, r3
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <process_half+0x64>)
 8000740:	6819      	ldr	r1, [r3, #0]
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	440b      	add	r3, r1
 8000748:	8812      	ldrh	r2, [r2, #0]
 800074a:	b292      	uxth	r2, r2
 800074c:	801a      	strh	r2, [r3, #0]
		  //RIGHT
		  outBufPtr[n+1]=inBufPtr[n+1];
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <process_half+0x60>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	3301      	adds	r3, #1
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	441a      	add	r2, r3
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <process_half+0x64>)
 800075c:	6819      	ldr	r1, [r3, #0]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	3301      	adds	r3, #1
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	440b      	add	r3, r1
 8000766:	8812      	ldrh	r2, [r2, #0]
 8000768:	b292      	uxth	r2, r2
 800076a:	801a      	strh	r2, [r3, #0]
	  for(uint8_t n=0 ; n < (BUFF_SIZE/2) -1; n+=2){
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	3302      	adds	r3, #2
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b30      	cmp	r3, #48	; 0x30
 8000776:	d9dd      	bls.n	8000734 <process_half+0xc>
	  }
}
 8000778:	bf00      	nop
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000350 	.word	0x20000350
 800078c:	20000000 	.word	0x20000000

08000790 <HAL_I2SEx_TxRxHalfCpltCallback>:

/* first half ready DMA callback*/
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	outBufPtr = &tx_data[0];
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <HAL_I2SEx_TxRxHalfCpltCallback+0x20>)
 800079a:	4a06      	ldr	r2, [pc, #24]	; (80007b4 <HAL_I2SEx_TxRxHalfCpltCallback+0x24>)
 800079c:	601a      	str	r2, [r3, #0]
	inBufPtr = &rx_data[0];
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 80007a0:	4a06      	ldr	r2, [pc, #24]	; (80007bc <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 80007a2:	601a      	str	r2, [r3, #0]
	process_half(); // move data from RX to TX DMA
 80007a4:	f7ff ffc0 	bl	8000728 <process_half>
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000288 	.word	0x20000288
 80007b8:	20000350 	.word	0x20000350
 80007bc:	200001c0 	.word	0x200001c0

080007c0 <HAL_I2SEx_TxRxCpltCallback>:
/* second half ready DMA callback*/
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	outBufPtr = &tx_data[BUFF_SIZE/2];
 80007c8:	4b07      	ldr	r3, [pc, #28]	; (80007e8 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 80007cc:	601a      	str	r2, [r3, #0]
	inBufPtr = &rx_data[BUFF_SIZE/2];
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 80007d0:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 80007d2:	601a      	str	r2, [r3, #0]
	process_half(); // move data from RX to TX DMA
 80007d4:	f7ff ffa8 	bl	8000728 <process_half>
	i = 1;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 80007da:	2201      	movs	r2, #1
 80007dc:	601a      	str	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000000 	.word	0x20000000
 80007ec:	200002ec 	.word	0x200002ec
 80007f0:	20000350 	.word	0x20000350
 80007f4:	20000224 	.word	0x20000224
 80007f8:	200003b8 	.word	0x200003b8

080007fc <HAL_TIM_PeriodElapsedCallback>:
/*TIMER 3 used to turn on LED every second*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d102      	bne.n	8000812 <HAL_TIM_PeriodElapsedCallback+0x16>
		TIM3_ISR_FLAG = 1;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800080e:	2201      	movs	r2, #1
 8000810:	701a      	strb	r2, [r3, #0]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	2000012c 	.word	0x2000012c
 8000824:	200001b8 	.word	0x200001b8

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t led_index = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000832:	f000 fc49 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000836:	f000 f86b 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083a:	f000 f9a7 	bl	8000b8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800083e:	f000 f97b 	bl	8000b38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000842:	f000 f8cf 	bl	80009e4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000846:	f000 f929 	bl	8000a9c <MX_TIM3_Init>
  MX_I2S2_Init();
 800084a:	f000 f8f9 	bl	8000a40 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  /* Codec Setup */
  if(Codec_Init(&codec, &hi2c1) != HAL_OK){
 800084e:	4924      	ldr	r1, [pc, #144]	; (80008e0 <main+0xb8>)
 8000850:	4824      	ldr	r0, [pc, #144]	; (80008e4 <main+0xbc>)
 8000852:	f7ff fe97 	bl	8000584 <Codec_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d008      	beq.n	800086e <main+0x46>
	  while(1){
	  		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800085c:	2120      	movs	r1, #32
 800085e:	4822      	ldr	r0, [pc, #136]	; (80008e8 <main+0xc0>)
 8000860:	f000 fffd 	bl	800185e <HAL_GPIO_TogglePin>
	  		  HAL_Delay(300);
 8000864:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000868:	f000 fca0 	bl	80011ac <HAL_Delay>
	  		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800086c:	e7f6      	b.n	800085c <main+0x34>
	  }}
  else{
	  uint8_t len = snprintf(buff, sizeof(buff),"Inizializzazione riuscita\n");
 800086e:	4a1f      	ldr	r2, [pc, #124]	; (80008ec <main+0xc4>)
 8000870:	2164      	movs	r1, #100	; 0x64
 8000872:	481f      	ldr	r0, [pc, #124]	; (80008f0 <main+0xc8>)
 8000874:	f004 f95e 	bl	8004b34 <sniprintf>
 8000878:	4603      	mov	r3, r0
 800087a:	71bb      	strb	r3, [r7, #6]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	b29a      	uxth	r2, r3
 8000880:	2364      	movs	r3, #100	; 0x64
 8000882:	491b      	ldr	r1, [pc, #108]	; (80008f0 <main+0xc8>)
 8000884:	481b      	ldr	r0, [pc, #108]	; (80008f4 <main+0xcc>)
 8000886:	f003 fdae 	bl	80043e6 <HAL_UART_Transmit>
  }

  if(HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t*)tx_data, (uint16_t*)rx_data, BUFF_SIZE) != HAL_OK){
 800088a:	2364      	movs	r3, #100	; 0x64
 800088c:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <main+0xd0>)
 800088e:	491b      	ldr	r1, [pc, #108]	; (80008fc <main+0xd4>)
 8000890:	481b      	ldr	r0, [pc, #108]	; (8000900 <main+0xd8>)
 8000892:	f001 fe9d 	bl	80025d0 <HAL_I2SEx_TransmitReceive_DMA>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d008      	beq.n	80008ae <main+0x86>
	  while(1){
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800089c:	2120      	movs	r1, #32
 800089e:	4812      	ldr	r0, [pc, #72]	; (80008e8 <main+0xc0>)
 80008a0:	f000 ffdd 	bl	800185e <HAL_GPIO_TogglePin>
		  HAL_Delay(300);
 80008a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008a8:	f000 fc80 	bl	80011ac <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80008ac:	e7f6      	b.n	800089c <main+0x74>
	  }}
  else{
	  uint8_t len = snprintf(buff, sizeof(buff),"Startato DMA per I2S\n\n");
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <main+0xdc>)
 80008b0:	2164      	movs	r1, #100	; 0x64
 80008b2:	480f      	ldr	r0, [pc, #60]	; (80008f0 <main+0xc8>)
 80008b4:	f004 f93e 	bl	8004b34 <sniprintf>
 80008b8:	4603      	mov	r3, r0
 80008ba:	717b      	strb	r3, [r7, #5]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 80008bc:	797b      	ldrb	r3, [r7, #5]
 80008be:	b29a      	uxth	r2, r3
 80008c0:	2364      	movs	r3, #100	; 0x64
 80008c2:	490b      	ldr	r1, [pc, #44]	; (80008f0 <main+0xc8>)
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <main+0xcc>)
 80008c6:	f003 fd8e 	bl	80043e6 <HAL_UART_Transmit>
  }

  //Start the Timer 3 to turn on LEDS
  HAL_TIM_Base_Start_IT(&htim3);
 80008ca:	480f      	ldr	r0, [pc, #60]	; (8000908 <main+0xe0>)
 80008cc:	f003 f948 	bl	8003b60 <HAL_TIM_Base_Start_IT>
  while (1){

//	  HAL_I2S_Receive(&hi2s2, data, sizeof(data), 1000);
//	  HAL_I2S_Transmit(&hi2s2, data, sizeof(data), 1000);

	  if(TIM3_ISR_FLAG){
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <main+0xe4>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d0fb      	beq.n	80008d0 <main+0xa8>
		  if(led_index == NUM_LEDS+1){
			  led_index = 0;
			  //reset leds
			  Led_Clear();
		  }*/
		  TIM3_ISR_FLAG = 0;
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <main+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	701a      	strb	r2, [r3, #0]
	  if(TIM3_ISR_FLAG){
 80008de:	e7f7      	b.n	80008d0 <main+0xa8>
 80008e0:	20000090 	.word	0x20000090
 80008e4:	200001bc 	.word	0x200001bc
 80008e8:	40020000 	.word	0x40020000
 80008ec:	08005450 	.word	0x08005450
 80008f0:	20000354 	.word	0x20000354
 80008f4:	20000174 	.word	0x20000174
 80008f8:	200001c0 	.word	0x200001c0
 80008fc:	20000288 	.word	0x20000288
 8000900:	200000e4 	.word	0x200000e4
 8000904:	0800546c 	.word	0x0800546c
 8000908:	2000012c 	.word	0x2000012c
 800090c:	200001b8 	.word	0x200001b8

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b094      	sub	sp, #80	; 0x50
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0320 	add.w	r3, r7, #32
 800091a:	2230      	movs	r2, #48	; 0x30
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f004 f900 	bl	8004b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	f107 030c 	add.w	r3, r7, #12
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000934:	2300      	movs	r3, #0
 8000936:	60bb      	str	r3, [r7, #8]
 8000938:	4b28      	ldr	r3, [pc, #160]	; (80009dc <SystemClock_Config+0xcc>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093c:	4a27      	ldr	r2, [pc, #156]	; (80009dc <SystemClock_Config+0xcc>)
 800093e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000942:	6413      	str	r3, [r2, #64]	; 0x40
 8000944:	4b25      	ldr	r3, [pc, #148]	; (80009dc <SystemClock_Config+0xcc>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000950:	2300      	movs	r3, #0
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <SystemClock_Config+0xd0>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <SystemClock_Config+0xd0>)
 800095e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b1e      	ldr	r3, [pc, #120]	; (80009e0 <SystemClock_Config+0xd0>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000970:	2302      	movs	r3, #2
 8000972:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000974:	2301      	movs	r3, #1
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000978:	2310      	movs	r3, #16
 800097a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800097c:	2302      	movs	r3, #2
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000984:	2308      	movs	r3, #8
 8000986:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000988:	2354      	movs	r3, #84	; 0x54
 800098a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800098c:	2302      	movs	r3, #2
 800098e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000990:	2307      	movs	r3, #7
 8000992:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000994:	f107 0320 	add.w	r3, r7, #32
 8000998:	4618      	mov	r0, r3
 800099a:	f002 faad 	bl	8002ef8 <HAL_RCC_OscConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009a4:	f000 f962 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a8:	230f      	movs	r3, #15
 80009aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ac:	2302      	movs	r3, #2
 80009ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2102      	movs	r1, #2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f002 fd0f 	bl	80033e8 <HAL_RCC_ClockConfig>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009d0:	f000 f94c 	bl	8000c6c <Error_Handler>
  }
}
 80009d4:	bf00      	nop
 80009d6:	3750      	adds	r7, #80	; 0x50
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40007000 	.word	0x40007000

080009e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009ea:	4a13      	ldr	r2, [pc, #76]	; (8000a38 <MX_I2C1_Init+0x54>)
 80009ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009f0:	4a12      	ldr	r2, [pc, #72]	; (8000a3c <MX_I2C1_Init+0x58>)
 80009f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_I2C1_Init+0x50>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <MX_I2C1_Init+0x50>)
 8000a22:	f000 ff37 	bl	8001894 <HAL_I2C_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a2c:	f000 f91e 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000090 	.word	0x20000090
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	000186a0 	.word	0x000186a0

08000a40 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <MX_I2S2_Init+0x58>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a4a:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a50:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a58:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a64:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a68:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000a6c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_I2S2_Init+0x54>)
 8000a82:	f001 fb53 	bl	800212c <HAL_I2S_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000a8c:	f000 f8ee 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200000e4 	.word	0x200000e4
 8000a98:	40003800 	.word	0x40003800

08000a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0308 	add.w	r3, r7, #8
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab0:	463b      	mov	r3, r7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000aba:	4a1e      	ldr	r2, [pc, #120]	; (8000b34 <MX_TIM3_Init+0x98>)
 8000abc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ac0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ac4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ace:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ad2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae0:	4813      	ldr	r0, [pc, #76]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000ae2:	f002 ffed 	bl	8003ac0 <HAL_TIM_Base_Init>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000aec:	f000 f8be 	bl	8000c6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000af6:	f107 0308 	add.w	r3, r7, #8
 8000afa:	4619      	mov	r1, r3
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000afe:	f003 f999 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b08:	f000 f8b0 	bl	8000c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b10:	2300      	movs	r3, #0
 8000b12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_TIM3_Init+0x94>)
 8000b1a:	f003 fb95 	bl	8004248 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b24:	f000 f8a2 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000012c 	.word	0x2000012c
 8000b34:	40000400 	.word	0x40000400

08000b38 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_USART2_UART_Init+0x50>)
 8000b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b5c:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	220c      	movs	r2, #12
 8000b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b68:	4b06      	ldr	r3, [pc, #24]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <MX_USART2_UART_Init+0x4c>)
 8000b70:	f003 fbec 	bl	800434c <HAL_UART_Init>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b7a:	f000 f877 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	20000174 	.word	0x20000174
 8000b88:	40004400 	.word	0x40004400

08000b8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08a      	sub	sp, #40	; 0x28
 8000b90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]
 8000b9c:	609a      	str	r2, [r3, #8]
 8000b9e:	60da      	str	r2, [r3, #12]
 8000ba0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b2e      	ldr	r3, [pc, #184]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000bac:	f043 0304 	orr.w	r3, r3, #4
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0304 	and.w	r3, r3, #4
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a26      	ldr	r2, [pc, #152]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b20      	ldr	r3, [pc, #128]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a18      	ldr	r2, [pc, #96]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <MX_GPIO_Init+0xd4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RLED1_Pin|RLED2_Pin|YLED1_Pin
 8000c12:	2200      	movs	r2, #0
 8000c14:	f643 7120 	movw	r1, #16160	; 0x3f20
 8000c18:	4812      	ldr	r0, [pc, #72]	; (8000c64 <MX_GPIO_Init+0xd8>)
 8000c1a:	f000 fe07 	bl	800182c <HAL_GPIO_WritePin>
                          |YLED2_Pin|GLED1_Pin|GLED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c24:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_GPIO_Init+0xdc>)
 8000c36:	f000 fc75 	bl	8001524 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RLED1_Pin RLED2_Pin YLED1_Pin
                           YLED2_Pin GLED1_Pin GLED2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RLED1_Pin|RLED2_Pin|YLED1_Pin
 8000c3a:	f643 7320 	movw	r3, #16160	; 0x3f20
 8000c3e:	617b      	str	r3, [r7, #20]
                          |YLED2_Pin|GLED1_Pin|GLED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	4619      	mov	r1, r3
 8000c52:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_GPIO_Init+0xd8>)
 8000c54:	f000 fc66 	bl	8001524 <HAL_GPIO_Init>

}
 8000c58:	bf00      	nop
 8000c5a:	3728      	adds	r7, #40	; 0x28
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000
 8000c68:	40020800 	.word	0x40020800

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <Error_Handler+0x8>
	...

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f000 fb6c 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08a      	sub	sp, #40	; 0x28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_I2C_MspInit+0x84>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d12b      	bne.n	8000d42 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a17      	ldr	r2, [pc, #92]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d06:	23c0      	movs	r3, #192	; 0xc0
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0a:	2312      	movs	r3, #18
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d16:	2304      	movs	r3, #4
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <HAL_I2C_MspInit+0x8c>)
 8000d22:	f000 fbff 	bl	8001524 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_I2C_MspInit+0x88>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d42:	bf00      	nop
 8000d44:	3728      	adds	r7, #40	; 0x28
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020400 	.word	0x40020400

08000d58 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b090      	sub	sp, #64	; 0x40
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d70:	f107 0318 	add.w	r3, r7, #24
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a3c      	ldr	r2, [pc, #240]	; (8000e78 <HAL_I2S_MspInit+0x120>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d172      	bne.n	8000e70 <HAL_I2S_MspInit+0x118>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 123;
 8000d8e:	237b      	movs	r3, #123	; 0x7b
 8000d90:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8000d92:	2305      	movs	r3, #5
 8000d94:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d96:	f107 0318 	add.w	r3, r7, #24
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fd44 	bl	8003828 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000da6:	f7ff ff61 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	617b      	str	r3, [r7, #20]
 8000dae:	4b33      	ldr	r3, [pc, #204]	; (8000e7c <HAL_I2S_MspInit+0x124>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a32      	ldr	r2, [pc, #200]	; (8000e7c <HAL_I2S_MspInit+0x124>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b30      	ldr	r3, [pc, #192]	; (8000e7c <HAL_I2S_MspInit+0x124>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b2c      	ldr	r3, [pc, #176]	; (8000e7c <HAL_I2S_MspInit+0x124>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a2b      	ldr	r2, [pc, #172]	; (8000e7c <HAL_I2S_MspInit+0x124>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b29      	ldr	r3, [pc, #164]	; (8000e7c <HAL_I2S_MspInit+0x124>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <HAL_I2S_MspInit+0x124>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a24      	ldr	r2, [pc, #144]	; (8000e7c <HAL_I2S_MspInit+0x124>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <HAL_I2S_MspInit+0x124>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dfe:	2304      	movs	r3, #4
 8000e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e0e:	2306      	movs	r3, #6
 8000e10:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4819      	ldr	r0, [pc, #100]	; (8000e80 <HAL_I2S_MspInit+0x128>)
 8000e1a:	f000 fb83 	bl	8001524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000e1e:	2348      	movs	r3, #72	; 0x48
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	2302      	movs	r3, #2
 8000e24:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2e:	2305      	movs	r3, #5
 8000e30:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e36:	4619      	mov	r1, r3
 8000e38:	4811      	ldr	r0, [pc, #68]	; (8000e80 <HAL_I2S_MspInit+0x128>)
 8000e3a:	f000 fb73 	bl	8001524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000e3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e50:	2305      	movs	r3, #5
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480a      	ldr	r0, [pc, #40]	; (8000e84 <HAL_I2S_MspInit+0x12c>)
 8000e5c:	f000 fb62 	bl	8001524 <HAL_GPIO_Init>

    /* I2S2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	2024      	movs	r0, #36	; 0x24
 8000e66:	f000 faa0 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000e6a:	2024      	movs	r0, #36	; 0x24
 8000e6c:	f000 fab9 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3740      	adds	r7, #64	; 0x40
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40003800 	.word	0x40003800
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020400 	.word	0x40020400

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_TIM_Base_MspInit+0x48>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d115      	bne.n	8000ec6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea2:	4a0c      	ldr	r2, [pc, #48]	; (8000ed4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_TIM_Base_MspInit+0x4c>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	2100      	movs	r1, #0
 8000eba:	201d      	movs	r0, #29
 8000ebc:	f000 fa75 	bl	80013aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ec0:	201d      	movs	r0, #29
 8000ec2:	f000 fa8e 	bl	80013e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	40023800 	.word	0x40023800

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08a      	sub	sp, #40	; 0x28
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <HAL_UART_MspInit+0x84>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d12b      	bne.n	8000f52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	4b18      	ldr	r3, [pc, #96]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a17      	ldr	r2, [pc, #92]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <HAL_UART_MspInit+0x88>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f32:	230c      	movs	r3, #12
 8000f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f36:	2302      	movs	r3, #2
 8000f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f42:	2307      	movs	r3, #7
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_UART_MspInit+0x8c>)
 8000f4e:	f000 fae9 	bl	8001524 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f52:	bf00      	nop
 8000f54:	3728      	adds	r7, #40	; 0x28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020000 	.word	0x40020000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <NMI_Handler+0x4>

08000f6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7e:	e7fe      	b.n	8000f7e <BusFault_Handler+0x4>

08000f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <UsageFault_Handler+0x4>

08000f86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 f8da 	bl	800116c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <TIM3_IRQHandler+0x10>)
 8000fc2:	f002 fe2f 	bl	8003c24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	2000012c 	.word	0x2000012c

08000fd0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s2);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <SPI2_IRQHandler+0x10>)
 8000fd6:	f001 f9e9 	bl	80023ac <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200000e4 	.word	0x200000e4

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	; (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f003 fd5c 	bl	8004ad0 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	; (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	; (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20018000 	.word	0x20018000
 8001044:	00000400 	.word	0x00000400
 8001048:	200003bc 	.word	0x200003bc
 800104c:	200003d8 	.word	0x200003d8

08001050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800107a:	490e      	ldr	r1, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001090:	4c0b      	ldr	r4, [pc, #44]	; (80010c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109e:	f7ff ffd7 	bl	8001050 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a2:	f003 fd1b 	bl	8004adc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fbbf 	bl	8000828 <main>
  bx  lr    
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010b8:	080054e0 	.word	0x080054e0
  ldr r2, =_sbss
 80010bc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80010c0:	200003d4 	.word	0x200003d4

080010c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_Init+0x40>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_Init+0x40>)
 80010de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x40>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f94f 	bl	8001394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f000 f808 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fdbc 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <HAL_InitTick+0x54>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x58>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	fbb3 f3f1 	udiv	r3, r3, r1
 8001126:	fbb2 f3f3 	udiv	r3, r2, r3
 800112a:	4618      	mov	r0, r3
 800112c:	f000 f967 	bl	80013fe <HAL_SYSTICK_Config>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e00e      	b.n	8001158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d80a      	bhi.n	8001156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f000 f92f 	bl	80013aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <HAL_InitTick+0x5c>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000004 	.word	0x20000004
 8001164:	2000000c 	.word	0x2000000c
 8001168:	20000008 	.word	0x20000008

0800116c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <HAL_IncTick+0x20>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_IncTick+0x24>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4413      	add	r3, r2
 800117c:	4a04      	ldr	r2, [pc, #16]	; (8001190 <HAL_IncTick+0x24>)
 800117e:	6013      	str	r3, [r2, #0]
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	2000000c 	.word	0x2000000c
 8001190:	200003c0 	.word	0x200003c0

08001194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <HAL_GetTick+0x14>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200003c0 	.word	0x200003c0

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	461a      	mov	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4413      	add	r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	bf00      	nop
 80011d4:	f7ff ffde 	bl	8001194 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	bf00      	nop
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000000c 	.word	0x2000000c

080011f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001210:	4013      	ands	r3, r2
 8001212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800121c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001224:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001226:	4a04      	ldr	r2, [pc, #16]	; (8001238 <__NVIC_SetPriorityGrouping+0x44>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	60d3      	str	r3, [r2, #12]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001240:	4b04      	ldr	r3, [pc, #16]	; (8001254 <__NVIC_GetPriorityGrouping+0x18>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	0a1b      	lsrs	r3, r3, #8
 8001246:	f003 0307 	and.w	r3, r3, #7
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 021f 	and.w	r2, r3, #31
 8001270:	4907      	ldr	r1, [pc, #28]	; (8001290 <__NVIC_EnableIRQ+0x38>)
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	095b      	lsrs	r3, r3, #5
 8001278:	2001      	movs	r0, #1
 800127a:	fa00 f202 	lsl.w	r2, r0, r2
 800127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000e100 	.word	0xe000e100

08001294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	6039      	str	r1, [r7, #0]
 800129e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	db0a      	blt.n	80012be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	490c      	ldr	r1, [pc, #48]	; (80012e0 <__NVIC_SetPriority+0x4c>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	0112      	lsls	r2, r2, #4
 80012b4:	b2d2      	uxtb	r2, r2
 80012b6:	440b      	add	r3, r1
 80012b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012bc:	e00a      	b.n	80012d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4908      	ldr	r1, [pc, #32]	; (80012e4 <__NVIC_SetPriority+0x50>)
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	3b04      	subs	r3, #4
 80012cc:	0112      	lsls	r2, r2, #4
 80012ce:	b2d2      	uxtb	r2, r2
 80012d0:	440b      	add	r3, r1
 80012d2:	761a      	strb	r2, [r3, #24]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000e100 	.word	0xe000e100
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b089      	sub	sp, #36	; 0x24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0307 	and.w	r3, r3, #7
 80012fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	f1c3 0307 	rsb	r3, r3, #7
 8001302:	2b04      	cmp	r3, #4
 8001304:	bf28      	it	cs
 8001306:	2304      	movcs	r3, #4
 8001308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3304      	adds	r3, #4
 800130e:	2b06      	cmp	r3, #6
 8001310:	d902      	bls.n	8001318 <NVIC_EncodePriority+0x30>
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3b03      	subs	r3, #3
 8001316:	e000      	b.n	800131a <NVIC_EncodePriority+0x32>
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800131c:	f04f 32ff 	mov.w	r2, #4294967295
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43da      	mvns	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001330:	f04f 31ff 	mov.w	r1, #4294967295
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	43d9      	mvns	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	4313      	orrs	r3, r2
         );
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001360:	d301      	bcc.n	8001366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001362:	2301      	movs	r3, #1
 8001364:	e00f      	b.n	8001386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <SysTick_Config+0x40>)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	3b01      	subs	r3, #1
 800136c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800136e:	210f      	movs	r1, #15
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	f7ff ff8e 	bl	8001294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SysTick_Config+0x40>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	4b04      	ldr	r3, [pc, #16]	; (8001390 <SysTick_Config+0x40>)
 8001380:	2207      	movs	r2, #7
 8001382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	e000e010 	.word	0xe000e010

08001394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ff29 	bl	80011f4 <__NVIC_SetPriorityGrouping>
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b086      	sub	sp, #24
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	4603      	mov	r3, r0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013bc:	f7ff ff3e 	bl	800123c <__NVIC_GetPriorityGrouping>
 80013c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6978      	ldr	r0, [r7, #20]
 80013c8:	f7ff ff8e 	bl	80012e8 <NVIC_EncodePriority>
 80013cc:	4602      	mov	r2, r0
 80013ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d2:	4611      	mov	r1, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff5d 	bl	8001294 <__NVIC_SetPriority>
}
 80013da:	bf00      	nop
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff31 	bl	8001258 <__NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ffa2 	bl	8001350 <SysTick_Config>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	60b9      	str	r1, [r7, #8]
 8001420:	607a      	str	r2, [r7, #4]
 8001422:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001424:	2300      	movs	r3, #0
 8001426:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_DMA_Start_IT+0x26>
 8001438:	2302      	movs	r3, #2
 800143a:	e040      	b.n	80014be <HAL_DMA_Start_IT+0xa8>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d12f      	bne.n	80014b0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	68b9      	ldr	r1, [r7, #8]
 8001464:	68f8      	ldr	r0, [r7, #12]
 8001466:	f000 f82e 	bl	80014c6 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146e:	223f      	movs	r2, #63	; 0x3f
 8001470:	409a      	lsls	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0216 	orr.w	r2, r2, #22
 8001484:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d007      	beq.n	800149e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0208 	orr.w	r2, r2, #8
 800149c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0201 	orr.w	r2, r2, #1
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e005      	b.n	80014bc <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014b8:	2302      	movs	r3, #2
 80014ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b085      	sub	sp, #20
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80014e2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	2b40      	cmp	r3, #64	; 0x40
 80014f2:	d108      	bne.n	8001506 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	68ba      	ldr	r2, [r7, #8]
 8001502:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001504:	e007      	b.n	8001516 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	60da      	str	r2, [r3, #12]
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001524:	b480      	push	{r7}
 8001526:	b089      	sub	sp, #36	; 0x24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153a:	2300      	movs	r3, #0
 800153c:	61fb      	str	r3, [r7, #28]
 800153e:	e159      	b.n	80017f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001540:	2201      	movs	r2, #1
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	697a      	ldr	r2, [r7, #20]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	429a      	cmp	r2, r3
 800155a:	f040 8148 	bne.w	80017ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b01      	cmp	r3, #1
 8001568:	d005      	beq.n	8001576 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001572:	2b02      	cmp	r3, #2
 8001574:	d130      	bne.n	80015d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	2203      	movs	r2, #3
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43db      	mvns	r3, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4013      	ands	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	68da      	ldr	r2, [r3, #12]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4313      	orrs	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ac:	2201      	movs	r2, #1
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 0201 	and.w	r2, r3, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b03      	cmp	r3, #3
 80015e2:	d017      	beq.n	8001614 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	2203      	movs	r2, #3
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f003 0303 	and.w	r3, r3, #3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d123      	bne.n	8001668 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	08da      	lsrs	r2, r3, #3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3208      	adds	r2, #8
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	69ba      	ldr	r2, [r7, #24]
 8001640:	4013      	ands	r3, r2
 8001642:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691a      	ldr	r2, [r3, #16]
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4313      	orrs	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	08da      	lsrs	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3208      	adds	r2, #8
 8001662:	69b9      	ldr	r1, [r7, #24]
 8001664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0203 	and.w	r2, r3, #3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f000 80a2 	beq.w	80017ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b57      	ldr	r3, [pc, #348]	; (800180c <HAL_GPIO_Init+0x2e8>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a56      	ldr	r2, [pc, #344]	; (800180c <HAL_GPIO_Init+0x2e8>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b54      	ldr	r3, [pc, #336]	; (800180c <HAL_GPIO_Init+0x2e8>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016c6:	4a52      	ldr	r2, [pc, #328]	; (8001810 <HAL_GPIO_Init+0x2ec>)
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	089b      	lsrs	r3, r3, #2
 80016cc:	3302      	adds	r3, #2
 80016ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	220f      	movs	r2, #15
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4013      	ands	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a49      	ldr	r2, [pc, #292]	; (8001814 <HAL_GPIO_Init+0x2f0>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d019      	beq.n	8001726 <HAL_GPIO_Init+0x202>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a48      	ldr	r2, [pc, #288]	; (8001818 <HAL_GPIO_Init+0x2f4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0x1fe>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a47      	ldr	r2, [pc, #284]	; (800181c <HAL_GPIO_Init+0x2f8>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d00d      	beq.n	800171e <HAL_GPIO_Init+0x1fa>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a46      	ldr	r2, [pc, #280]	; (8001820 <HAL_GPIO_Init+0x2fc>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d007      	beq.n	800171a <HAL_GPIO_Init+0x1f6>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a45      	ldr	r2, [pc, #276]	; (8001824 <HAL_GPIO_Init+0x300>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_GPIO_Init+0x1f2>
 8001712:	2304      	movs	r3, #4
 8001714:	e008      	b.n	8001728 <HAL_GPIO_Init+0x204>
 8001716:	2307      	movs	r3, #7
 8001718:	e006      	b.n	8001728 <HAL_GPIO_Init+0x204>
 800171a:	2303      	movs	r3, #3
 800171c:	e004      	b.n	8001728 <HAL_GPIO_Init+0x204>
 800171e:	2302      	movs	r3, #2
 8001720:	e002      	b.n	8001728 <HAL_GPIO_Init+0x204>
 8001722:	2301      	movs	r3, #1
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x204>
 8001726:	2300      	movs	r3, #0
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	f002 0203 	and.w	r2, r2, #3
 800172e:	0092      	lsls	r2, r2, #2
 8001730:	4093      	lsls	r3, r2
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001738:	4935      	ldr	r1, [pc, #212]	; (8001810 <HAL_GPIO_Init+0x2ec>)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	089b      	lsrs	r3, r3, #2
 800173e:	3302      	adds	r3, #2
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001746:	4b38      	ldr	r3, [pc, #224]	; (8001828 <HAL_GPIO_Init+0x304>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176a:	4a2f      	ldr	r2, [pc, #188]	; (8001828 <HAL_GPIO_Init+0x304>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001770:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_GPIO_Init+0x304>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001794:	4a24      	ldr	r2, [pc, #144]	; (8001828 <HAL_GPIO_Init+0x304>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800179a:	4b23      	ldr	r3, [pc, #140]	; (8001828 <HAL_GPIO_Init+0x304>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017be:	4a1a      	ldr	r2, [pc, #104]	; (8001828 <HAL_GPIO_Init+0x304>)
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c4:	4b18      	ldr	r3, [pc, #96]	; (8001828 <HAL_GPIO_Init+0x304>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017e8:	4a0f      	ldr	r2, [pc, #60]	; (8001828 <HAL_GPIO_Init+0x304>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3301      	adds	r3, #1
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	f67f aea2 	bls.w	8001540 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40013800 	.word	0x40013800
 8001814:	40020000 	.word	0x40020000
 8001818:	40020400 	.word	0x40020400
 800181c:	40020800 	.word	0x40020800
 8001820:	40020c00 	.word	0x40020c00
 8001824:	40021000 	.word	0x40021000
 8001828:	40013c00 	.word	0x40013c00

0800182c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	807b      	strh	r3, [r7, #2]
 8001838:	4613      	mov	r3, r2
 800183a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800183c:	787b      	ldrb	r3, [r7, #1]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001842:	887a      	ldrh	r2, [r7, #2]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001848:	e003      	b.n	8001852 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	041a      	lsls	r2, r3, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	619a      	str	r2, [r3, #24]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800185e:	b480      	push	{r7}
 8001860:	b085      	sub	sp, #20
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	460b      	mov	r3, r1
 8001868:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001870:	887a      	ldrh	r2, [r7, #2]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4013      	ands	r3, r2
 8001876:	041a      	lsls	r2, r3, #16
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	43d9      	mvns	r1, r3
 800187c:	887b      	ldrh	r3, [r7, #2]
 800187e:	400b      	ands	r3, r1
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	3714      	adds	r7, #20
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e12b      	b.n	8001afe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff fa04 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2224      	movs	r2, #36	; 0x24
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018f8:	f001 ff6e 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 80018fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a81      	ldr	r2, [pc, #516]	; (8001b08 <HAL_I2C_Init+0x274>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d807      	bhi.n	8001918 <HAL_I2C_Init+0x84>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a80      	ldr	r2, [pc, #512]	; (8001b0c <HAL_I2C_Init+0x278>)
 800190c:	4293      	cmp	r3, r2
 800190e:	bf94      	ite	ls
 8001910:	2301      	movls	r3, #1
 8001912:	2300      	movhi	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	e006      	b.n	8001926 <HAL_I2C_Init+0x92>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4a7d      	ldr	r2, [pc, #500]	; (8001b10 <HAL_I2C_Init+0x27c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	bf94      	ite	ls
 8001920:	2301      	movls	r3, #1
 8001922:	2300      	movhi	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e0e7      	b.n	8001afe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a78      	ldr	r2, [pc, #480]	; (8001b14 <HAL_I2C_Init+0x280>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0c9b      	lsrs	r3, r3, #18
 8001938:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68ba      	ldr	r2, [r7, #8]
 800194a:	430a      	orrs	r2, r1
 800194c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	4a6a      	ldr	r2, [pc, #424]	; (8001b08 <HAL_I2C_Init+0x274>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d802      	bhi.n	8001968 <HAL_I2C_Init+0xd4>
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3301      	adds	r3, #1
 8001966:	e009      	b.n	800197c <HAL_I2C_Init+0xe8>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	4a69      	ldr	r2, [pc, #420]	; (8001b18 <HAL_I2C_Init+0x284>)
 8001974:	fba2 2303 	umull	r2, r3, r2, r3
 8001978:	099b      	lsrs	r3, r3, #6
 800197a:	3301      	adds	r3, #1
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	430b      	orrs	r3, r1
 8001982:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800198e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	495c      	ldr	r1, [pc, #368]	; (8001b08 <HAL_I2C_Init+0x274>)
 8001998:	428b      	cmp	r3, r1
 800199a:	d819      	bhi.n	80019d0 <HAL_I2C_Init+0x13c>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1e59      	subs	r1, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80019aa:	1c59      	adds	r1, r3, #1
 80019ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80019b0:	400b      	ands	r3, r1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00a      	beq.n	80019cc <HAL_I2C_Init+0x138>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	1e59      	subs	r1, r3, #1
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c4:	3301      	adds	r3, #1
 80019c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ca:	e051      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 80019cc:	2304      	movs	r3, #4
 80019ce:	e04f      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d111      	bne.n	80019fc <HAL_I2C_Init+0x168>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	1e58      	subs	r0, r3, #1
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6859      	ldr	r1, [r3, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	440b      	add	r3, r1
 80019e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019ea:	3301      	adds	r3, #1
 80019ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	e012      	b.n	8001a22 <HAL_I2C_Init+0x18e>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	1e58      	subs	r0, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6859      	ldr	r1, [r3, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	440b      	add	r3, r1
 8001a0a:	0099      	lsls	r1, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a12:	3301      	adds	r3, #1
 8001a14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	bf0c      	ite	eq
 8001a1c:	2301      	moveq	r3, #1
 8001a1e:	2300      	movne	r3, #0
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_I2C_Init+0x196>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e022      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10e      	bne.n	8001a50 <HAL_I2C_Init+0x1bc>
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	1e58      	subs	r0, r3, #1
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6859      	ldr	r1, [r3, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	440b      	add	r3, r1
 8001a40:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a44:	3301      	adds	r3, #1
 8001a46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a4e:	e00f      	b.n	8001a70 <HAL_I2C_Init+0x1dc>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	1e58      	subs	r0, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6859      	ldr	r1, [r3, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	0099      	lsls	r1, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a66:	3301      	adds	r3, #1
 8001a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	6809      	ldr	r1, [r1, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6911      	ldr	r1, [r2, #16]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68d2      	ldr	r2, [r2, #12]
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6812      	ldr	r2, [r2, #0]
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0201 	orr.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	000186a0 	.word	0x000186a0
 8001b0c:	001e847f 	.word	0x001e847f
 8001b10:	003d08ff 	.word	0x003d08ff
 8001b14:	431bde83 	.word	0x431bde83
 8001b18:	10624dd3 	.word	0x10624dd3

08001b1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	461a      	mov	r2, r3
 8001b28:	460b      	mov	r3, r1
 8001b2a:	817b      	strh	r3, [r7, #10]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b30:	f7ff fb30 	bl	8001194 <HAL_GetTick>
 8001b34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	f040 80e0 	bne.w	8001d04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2319      	movs	r3, #25
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4970      	ldr	r1, [pc, #448]	; (8001d10 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f000 f964 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e0d3      	b.n	8001d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_I2C_Master_Transmit+0x50>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e0cc      	b.n	8001d06 <HAL_I2C_Master_Transmit+0x1ea>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d007      	beq.n	8001b92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ba0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2221      	movs	r2, #33	; 0x21
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2210      	movs	r2, #16
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	893a      	ldrh	r2, [r7, #8]
 8001bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4a50      	ldr	r2, [pc, #320]	; (8001d14 <HAL_I2C_Master_Transmit+0x1f8>)
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bd4:	8979      	ldrh	r1, [r7, #10]
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	6a3a      	ldr	r2, [r7, #32]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 f89c 	bl	8001d18 <I2C_MasterRequestWrite>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e08d      	b.n	8001d06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	695b      	ldr	r3, [r3, #20]
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001c00:	e066      	b.n	8001cd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	6a39      	ldr	r1, [r7, #32]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 f9de 	bl	8001fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00d      	beq.n	8001c2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	d107      	bne.n	8001c2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e06b      	b.n	8001d06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	781a      	ldrb	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	1c5a      	adds	r2, r3, #1
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c56:	3b01      	subs	r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d11b      	bne.n	8001ca4 <HAL_I2C_Master_Transmit+0x188>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d017      	beq.n	8001ca4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	6a39      	ldr	r1, [r7, #32]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 f9ce 	bl	800204a <I2C_WaitOnBTFFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00d      	beq.n	8001cd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d107      	bne.n	8001ccc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e01a      	b.n	8001d06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d194      	bne.n	8001c02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	e000      	b.n	8001d06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001d04:	2302      	movs	r3, #2
  }
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	00100002 	.word	0x00100002
 8001d14:	ffff0000 	.word	0xffff0000

08001d18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b088      	sub	sp, #32
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	607a      	str	r2, [r7, #4]
 8001d22:	603b      	str	r3, [r7, #0]
 8001d24:	460b      	mov	r3, r1
 8001d26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b08      	cmp	r3, #8
 8001d32:	d006      	beq.n	8001d42 <I2C_MasterRequestWrite+0x2a>
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d003      	beq.n	8001d42 <I2C_MasterRequestWrite+0x2a>
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d40:	d108      	bne.n	8001d54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e00b      	b.n	8001d6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	2b12      	cmp	r3, #18
 8001d5a:	d107      	bne.n	8001d6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 f84f 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00d      	beq.n	8001da0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d92:	d103      	bne.n	8001d9c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e035      	b.n	8001e0c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da8:	d108      	bne.n	8001dbc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001daa:	897b      	ldrh	r3, [r7, #10]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001db8:	611a      	str	r2, [r3, #16]
 8001dba:	e01b      	b.n	8001df4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001dbc:	897b      	ldrh	r3, [r7, #10]
 8001dbe:	11db      	asrs	r3, r3, #7
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f003 0306 	and.w	r3, r3, #6
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f063 030f 	orn	r3, r3, #15
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	490e      	ldr	r1, [pc, #56]	; (8001e14 <I2C_MasterRequestWrite+0xfc>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f875 	bl	8001eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e010      	b.n	8001e0c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001dea:	897b      	ldrh	r3, [r7, #10]
 8001dec:	b2da      	uxtb	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4907      	ldr	r1, [pc, #28]	; (8001e18 <I2C_MasterRequestWrite+0x100>)
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f865 	bl	8001eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3718      	adds	r7, #24
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	00010008 	.word	0x00010008
 8001e18:	00010002 	.word	0x00010002

08001e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2c:	e025      	b.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d021      	beq.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e36:	f7ff f9ad 	bl	8001194 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d302      	bcc.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d116      	bne.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2220      	movs	r2, #32
 8001e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f043 0220 	orr.w	r2, r3, #32
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e023      	b.n	8001ec2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10d      	bne.n	8001ea0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	43da      	mvns	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	e00c      	b.n	8001eba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d0b6      	beq.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b084      	sub	sp, #16
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ed8:	e051      	b.n	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ee8:	d123      	bne.n	8001f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ef8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2200      	movs	r2, #0
 8001f08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f043 0204 	orr.w	r2, r3, #4
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e046      	b.n	8001fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d021      	beq.n	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f3a:	f7ff f92b 	bl	8001194 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d302      	bcc.n	8001f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d116      	bne.n	8001f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2220      	movs	r2, #32
 8001f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f043 0220 	orr.w	r2, r3, #32
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2200      	movs	r2, #0
 8001f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e020      	b.n	8001fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d10c      	bne.n	8001fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	43da      	mvns	r2, r3
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4013      	ands	r3, r2
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	bf14      	ite	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	2300      	moveq	r3, #0
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	e00b      	b.n	8001fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	43da      	mvns	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	4013      	ands	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf14      	ite	ne
 8001fb4:	2301      	movne	r3, #1
 8001fb6:	2300      	moveq	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d18d      	bne.n	8001eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fd4:	e02d      	b.n	8002032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fd6:	68f8      	ldr	r0, [r7, #12]
 8001fd8:	f000 f878 	bl	80020cc <I2C_IsAcknowledgeFailed>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e02d      	b.n	8002042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fec:	d021      	beq.n	8002032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fee:	f7ff f8d1 	bl	8001194 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d302      	bcc.n	8002004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d116      	bne.n	8002032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f043 0220 	orr.w	r2, r3, #32
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e007      	b.n	8002042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203c:	2b80      	cmp	r3, #128	; 0x80
 800203e:	d1ca      	bne.n	8001fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	60f8      	str	r0, [r7, #12]
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002056:	e02d      	b.n	80020b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f000 f837 	bl	80020cc <I2C_IsAcknowledgeFailed>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e02d      	b.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206e:	d021      	beq.n	80020b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002070:	f7ff f890 	bl	8001194 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	429a      	cmp	r2, r3
 800207e:	d302      	bcc.n	8002086 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	f043 0220 	orr.w	r2, r3, #32
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e007      	b.n	80020c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d1ca      	bne.n	8002058 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e2:	d11b      	bne.n	800211c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2220      	movs	r2, #32
 80020f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002108:	f043 0204 	orr.w	r2, r3, #4
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
	...

0800212c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e128      	b.n	8002390 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a90      	ldr	r2, [pc, #576]	; (8002398 <HAL_I2S_Init+0x26c>)
 8002156:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fe fdfd 	bl	8000d58 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	69db      	ldr	r3, [r3, #28]
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6812      	ldr	r2, [r2, #0]
 8002170:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002174:	f023 030f 	bic.w	r3, r3, #15
 8002178:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2202      	movs	r2, #2
 8002180:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d060      	beq.n	800224c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d102      	bne.n	8002198 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002192:	2310      	movs	r3, #16
 8002194:	617b      	str	r3, [r7, #20]
 8002196:	e001      	b.n	800219c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002198:	2320      	movs	r3, #32
 800219a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d802      	bhi.n	80021aa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f001 fc2a 	bl	8003a04 <HAL_RCCEx_GetPeriphCLKFreq>
 80021b0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ba:	d125      	bne.n	8002208 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d010      	beq.n	80021e6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e0:	3305      	adds	r3, #5
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	e01f      	b.n	8002226 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	461a      	mov	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002202:	3305      	adds	r3, #5
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	e00e      	b.n	8002226 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	461a      	mov	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002222:	3305      	adds	r3, #5
 8002224:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4a5c      	ldr	r2, [pc, #368]	; (800239c <HAL_I2S_Init+0x270>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	e003      	b.n	8002254 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800224c:	2302      	movs	r3, #2
 800224e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002250:	2300      	movs	r3, #0
 8002252:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d902      	bls.n	8002260 <HAL_I2S_Init+0x134>
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	2bff      	cmp	r3, #255	; 0xff
 800225e:	d907      	bls.n	8002270 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002264:	f043 0210 	orr.w	r2, r3, #16
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e08f      	b.n	8002390 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	ea42 0103 	orr.w	r1, r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	430a      	orrs	r2, r1
 8002282:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800228e:	f023 030f 	bic.w	r3, r3, #15
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6851      	ldr	r1, [r2, #4]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6892      	ldr	r2, [r2, #8]
 800229a:	4311      	orrs	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68d2      	ldr	r2, [r2, #12]
 80022a0:	4311      	orrs	r1, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6992      	ldr	r2, [r2, #24]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022b2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d161      	bne.n	8002380 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a38      	ldr	r2, [pc, #224]	; (80023a0 <HAL_I2S_Init+0x274>)
 80022c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a37      	ldr	r2, [pc, #220]	; (80023a4 <HAL_I2S_Init+0x278>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d101      	bne.n	80022d0 <HAL_I2S_Init+0x1a4>
 80022cc:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_I2S_Init+0x27c>)
 80022ce:	e001      	b.n	80022d4 <HAL_I2S_Init+0x1a8>
 80022d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6812      	ldr	r2, [r2, #0]
 80022da:	4932      	ldr	r1, [pc, #200]	; (80023a4 <HAL_I2S_Init+0x278>)
 80022dc:	428a      	cmp	r2, r1
 80022de:	d101      	bne.n	80022e4 <HAL_I2S_Init+0x1b8>
 80022e0:	4a31      	ldr	r2, [pc, #196]	; (80023a8 <HAL_I2S_Init+0x27c>)
 80022e2:	e001      	b.n	80022e8 <HAL_I2S_Init+0x1bc>
 80022e4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80022e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80022ec:	f023 030f 	bic.w	r3, r3, #15
 80022f0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a2b      	ldr	r2, [pc, #172]	; (80023a4 <HAL_I2S_Init+0x278>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d101      	bne.n	8002300 <HAL_I2S_Init+0x1d4>
 80022fc:	4b2a      	ldr	r3, [pc, #168]	; (80023a8 <HAL_I2S_Init+0x27c>)
 80022fe:	e001      	b.n	8002304 <HAL_I2S_Init+0x1d8>
 8002300:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002304:	2202      	movs	r2, #2
 8002306:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a25      	ldr	r2, [pc, #148]	; (80023a4 <HAL_I2S_Init+0x278>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_I2S_Init+0x1ea>
 8002312:	4b25      	ldr	r3, [pc, #148]	; (80023a8 <HAL_I2S_Init+0x27c>)
 8002314:	e001      	b.n	800231a <HAL_I2S_Init+0x1ee>
 8002316:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002326:	d003      	beq.n	8002330 <HAL_I2S_Init+0x204>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002330:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002334:	613b      	str	r3, [r7, #16]
 8002336:	e001      	b.n	800233c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002346:	4313      	orrs	r3, r2
 8002348:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002350:	4313      	orrs	r3, r2
 8002352:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800235a:	4313      	orrs	r3, r2
 800235c:	b29a      	uxth	r2, r3
 800235e:	897b      	ldrh	r3, [r7, #10]
 8002360:	4313      	orrs	r3, r2
 8002362:	b29b      	uxth	r3, r3
 8002364:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002368:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <HAL_I2S_Init+0x278>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_I2S_Init+0x24c>
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_I2S_Init+0x27c>)
 8002376:	e001      	b.n	800237c <HAL_I2S_Init+0x250>
 8002378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800237c:	897a      	ldrh	r2, [r7, #10]
 800237e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3720      	adds	r7, #32
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	080024bb 	.word	0x080024bb
 800239c:	cccccccd 	.word	0xcccccccd
 80023a0:	080028e5 	.word	0x080028e5
 80023a4:	40003800 	.word	0x40003800
 80023a8:	40003400 	.word	0x40003400

080023ac <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	881a      	ldrh	r2, [r3, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	1c9a      	adds	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10e      	bne.n	8002454 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685a      	ldr	r2, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002444:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffb8 	bl	80023c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	b292      	uxth	r2, r2
 8002470:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	1c9a      	adds	r2, r3, #2
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10e      	bne.n	80024b2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024a2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff ff93 	bl	80023d8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d13a      	bne.n	800254c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d109      	bne.n	80024f4 <I2S_IRQHandler+0x3a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ea:	2b40      	cmp	r3, #64	; 0x40
 80024ec:	d102      	bne.n	80024f4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f7ff ffb4 	bl	800245c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024fa:	2b40      	cmp	r3, #64	; 0x40
 80024fc:	d126      	bne.n	800254c <I2S_IRQHandler+0x92>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0320 	and.w	r3, r3, #32
 8002508:	2b20      	cmp	r3, #32
 800250a:	d11f      	bne.n	800254c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800251a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800251c:	2300      	movs	r3, #0
 800251e:	613b      	str	r3, [r7, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	613b      	str	r3, [r7, #16]
 8002530:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f043 0202 	orr.w	r2, r3, #2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff ff50 	bl	80023ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b03      	cmp	r3, #3
 8002556:	d136      	bne.n	80025c6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b02      	cmp	r3, #2
 8002560:	d109      	bne.n	8002576 <I2S_IRQHandler+0xbc>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d102      	bne.n	8002576 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff45 	bl	8002400 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b08      	cmp	r3, #8
 800257e:	d122      	bne.n	80025c6 <I2S_IRQHandler+0x10c>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b20      	cmp	r3, #32
 800258c:	d11b      	bne.n	80025c6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800259c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ff13 	bl	80023ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025c6:	bf00      	nop
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b088      	sub	sp, #32
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
 80025dc:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d002      	beq.n	80025fc <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 80025f6:	2302      	movs	r3, #2
 80025f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80025fa:	e160      	b.n	80028be <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d005      	beq.n	800260e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002608:	887b      	ldrh	r3, [r7, #2]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e15a      	b.n	80028c8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d101      	bne.n	8002622 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800261e:	2302      	movs	r3, #2
 8002620:	e152      	b.n	80028c8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d002      	beq.n	800264e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d114      	bne.n	8002678 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800264e:	887b      	ldrh	r3, [r7, #2]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002658:	887b      	ldrh	r3, [r7, #2]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 800266c:	887b      	ldrh	r3, [r7, #2]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	865a      	strh	r2, [r3, #50]	; 0x32
 8002676:	e00b      	b.n	8002690 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	887a      	ldrh	r2, [r7, #2]
 8002682:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	887a      	ldrh	r2, [r7, #2]
 8002688:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	887a      	ldrh	r2, [r7, #2]
 800268e:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2200      	movs	r2, #0
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2205      	movs	r2, #5
 800269a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	4a8b      	ldr	r2, [pc, #556]	; (80028d0 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80026a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026aa:	4a8a      	ldr	r2, [pc, #552]	; (80028d4 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b2:	4a89      	ldr	r2, [pc, #548]	; (80028d8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80026b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ba:	2200      	movs	r2, #0
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c2:	2200      	movs	r2, #0
 80026c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ca:	4a83      	ldr	r2, [pc, #524]	; (80028d8 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80026cc:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d8:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026e0:	d002      	beq.n	80026e8 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d16b      	bne.n	80027c0 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a79      	ldr	r2, [pc, #484]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d101      	bne.n	80026fe <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 80026fa:	4b79      	ldr	r3, [pc, #484]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80026fc:	e001      	b.n	8002702 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80026fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002702:	330c      	adds	r3, #12
 8002704:	4619      	mov	r1, r3
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800270e:	b29b      	uxth	r3, r3
 8002710:	f7fe fe81 	bl	8001416 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800271e:	4b70      	ldr	r3, [pc, #448]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002720:	e001      	b.n	8002726 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002722:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	496b      	ldr	r1, [pc, #428]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800272e:	428b      	cmp	r3, r1
 8002730:	d101      	bne.n	8002736 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002732:	4b6b      	ldr	r3, [pc, #428]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002734:	e001      	b.n	800273a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002740:	f107 0308 	add.w	r3, r7, #8
 8002744:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	330c      	adds	r3, #12
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275a:	b29b      	uxth	r3, r3
 800275c:	f7fe fe5b 	bl	8001416 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0202 	orr.w	r2, r2, #2
 800276e:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277e:	f000 809e 	beq.w	80028be <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a55      	ldr	r2, [pc, #340]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 800278c:	4b54      	ldr	r3, [pc, #336]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800278e:	e001      	b.n	8002794 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4950      	ldr	r1, [pc, #320]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800279c:	428b      	cmp	r3, r1
 800279e:	d101      	bne.n	80027a4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80027a0:	4b4f      	ldr	r3, [pc, #316]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80027a2:	e001      	b.n	80027a8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80027a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027ac:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69da      	ldr	r2, [r3, #28]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027bc:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80027be:	e07e      	b.n	80028be <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ce:	d10a      	bne.n	80027e6 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6819      	ldr	r1, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a38      	ldr	r2, [pc, #224]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002800:	e001      	b.n	8002806 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002802:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002806:	330c      	adds	r3, #12
 8002808:	461a      	mov	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	b29b      	uxth	r3, r3
 8002810:	f7fe fe01 	bl	8001416 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a30      	ldr	r2, [pc, #192]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800281e:	4b30      	ldr	r3, [pc, #192]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002820:	e001      	b.n	8002826 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002822:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	492b      	ldr	r1, [pc, #172]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800282e:	428b      	cmp	r3, r1
 8002830:	d101      	bne.n	8002836 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002832:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002834:	e001      	b.n	800283a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002836:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800283a:	f042 0202 	orr.w	r2, r2, #2
 800283e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002840:	1d3b      	adds	r3, r7, #4
 8002842:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	330c      	adds	r3, #12
 800284e:	4619      	mov	r1, r3
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002858:	b29b      	uxth	r3, r3
 800285a:	f7fe fddc 	bl	8001416 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 0201 	orr.w	r2, r2, #1
 800286c:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800287c:	d01e      	beq.n	80028bc <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a16      	ldr	r2, [pc, #88]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d101      	bne.n	800288c <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800288a:	e001      	b.n	8002890 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 800288c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4911      	ldr	r1, [pc, #68]	; (80028dc <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002898:	428b      	cmp	r3, r1
 800289a:	d101      	bne.n	80028a0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 800289c:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800289e:	e001      	b.n	80028a4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80028a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028b8:	61da      	str	r2, [r3, #28]
 80028ba:	e000      	b.n	80028be <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80028bc:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	08002b8d 	.word	0x08002b8d
 80028d4:	08002ba9 	.word	0x08002ba9
 80028d8:	08002c81 	.word	0x08002c81
 80028dc:	40003800 	.word	0x40003800
 80028e0:	40003400 	.word	0x40003400

080028e4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a92      	ldr	r2, [pc, #584]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80028fe:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002900:	e001      	b.n	8002906 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002902:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a8b      	ldr	r2, [pc, #556]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d101      	bne.n	8002920 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800291c:	4b8a      	ldr	r3, [pc, #552]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800291e:	e001      	b.n	8002924 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002920:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002930:	d004      	beq.n	800293c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 8099 	bne.w	8002a6e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b02      	cmp	r3, #2
 8002944:	d107      	bne.n	8002956 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294c:	2b00      	cmp	r3, #0
 800294e:	d002      	beq.n	8002956 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f9d5 	bl	8002d00 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d107      	bne.n	8002970 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fa78 	bl	8002e60 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	2b40      	cmp	r3, #64	; 0x40
 8002978:	d13a      	bne.n	80029f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d035      	beq.n	80029f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a6e      	ldr	r2, [pc, #440]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800298e:	4b6e      	ldr	r3, [pc, #440]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002990:	e001      	b.n	8002996 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4969      	ldr	r1, [pc, #420]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800299e:	428b      	cmp	r3, r1
 80029a0:	d101      	bne.n	80029a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80029a2:	4b69      	ldr	r3, [pc, #420]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029a4:	e001      	b.n	80029aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80029a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029ae:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029be:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f043 0202 	orr.w	r2, r3, #2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f7ff fcfe 	bl	80023ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	f040 80c3 	bne.w	8002b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f000 80bd 	beq.w	8002b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685a      	ldr	r2, [r3, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a16:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a49      	ldr	r2, [pc, #292]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d101      	bne.n	8002a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002a22:	4b49      	ldr	r3, [pc, #292]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a24:	e001      	b.n	8002a2a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002a26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4944      	ldr	r1, [pc, #272]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a32:	428b      	cmp	r3, r1
 8002a34:	d101      	bne.n	8002a3a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002a36:	4b44      	ldr	r3, [pc, #272]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a38:	e001      	b.n	8002a3e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002a3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a3e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a42:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a44:	2300      	movs	r3, #0
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fcc0 	bl	80023ec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a6c:	e089      	b.n	8002b82 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d107      	bne.n	8002a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f96e 	bl	8002d64 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d107      	bne.n	8002aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f9ad 	bl	8002dfc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d12f      	bne.n	8002b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d02a      	beq.n	8002b0c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ac4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1e      	ldr	r2, [pc, #120]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ad2:	e001      	b.n	8002ad8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002ad4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4919      	ldr	r1, [pc, #100]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ae0:	428b      	cmp	r3, r1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ae6:	e001      	b.n	8002aec <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002ae8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002af0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f043 0202 	orr.w	r2, r3, #2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fc70 	bl	80023ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d136      	bne.n	8002b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f003 0320 	and.w	r3, r3, #32
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d031      	beq.n	8002b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d101      	bne.n	8002b2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002b2a:	4b07      	ldr	r3, [pc, #28]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b2c:	e001      	b.n	8002b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4902      	ldr	r1, [pc, #8]	; (8002b44 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b3a:	428b      	cmp	r3, r1
 8002b3c:	d106      	bne.n	8002b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002b3e:	4b02      	ldr	r3, [pc, #8]	; (8002b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b40:	e006      	b.n	8002b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002b42:	bf00      	nop
 8002b44:	40003800 	.word	0x40003800
 8002b48:	40003400 	.word	0x40003400
 8002b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b54:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b72:	f043 0204 	orr.w	r2, r3, #4
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fc36 	bl	80023ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b80:	e000      	b.n	8002b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b82:	bf00      	nop
}
 8002b84:	bf00      	nop
 8002b86:	3720      	adds	r7, #32
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f7fd fdf8 	bl	8000790 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d155      	bne.n	8002c6a <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	69db      	ldr	r3, [r3, #28]
 8002bc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bcc:	d006      	beq.n	8002bdc <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d11e      	bne.n	8002c1a <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <I2SEx_TxRxDMACplt+0xd0>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d101      	bne.n	8002bea <I2SEx_TxRxDMACplt+0x42>
 8002be6:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <I2SEx_TxRxDMACplt+0xd4>)
 8002be8:	e001      	b.n	8002bee <I2SEx_TxRxDMACplt+0x46>
 8002bea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4920      	ldr	r1, [pc, #128]	; (8002c78 <I2SEx_TxRxDMACplt+0xd0>)
 8002bf6:	428b      	cmp	r3, r1
 8002bf8:	d101      	bne.n	8002bfe <I2SEx_TxRxDMACplt+0x56>
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <I2SEx_TxRxDMACplt+0xd4>)
 8002bfc:	e001      	b.n	8002c02 <I2SEx_TxRxDMACplt+0x5a>
 8002bfe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c02:	f022 0201 	bic.w	r2, r2, #1
 8002c06:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0202 	bic.w	r2, r2, #2
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	e01d      	b.n	8002c56 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0201 	bic.w	r2, r2, #1
 8002c28:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <I2SEx_TxRxDMACplt+0xd0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d101      	bne.n	8002c38 <I2SEx_TxRxDMACplt+0x90>
 8002c34:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <I2SEx_TxRxDMACplt+0xd4>)
 8002c36:	e001      	b.n	8002c3c <I2SEx_TxRxDMACplt+0x94>
 8002c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	490d      	ldr	r1, [pc, #52]	; (8002c78 <I2SEx_TxRxDMACplt+0xd0>)
 8002c44:	428b      	cmp	r3, r1
 8002c46:	d101      	bne.n	8002c4c <I2SEx_TxRxDMACplt+0xa4>
 8002c48:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <I2SEx_TxRxDMACplt+0xd4>)
 8002c4a:	e001      	b.n	8002c50 <I2SEx_TxRxDMACplt+0xa8>
 8002c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c50:	f022 0202 	bic.w	r2, r2, #2
 8002c54:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f7fd fda8 	bl	80007c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40003800 	.word	0x40003800
 8002c7c:	40003400 	.word	0x40003400

08002c80 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0203 	bic.w	r2, r2, #3
 8002c9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a15      	ldr	r2, [pc, #84]	; (8002cf8 <I2SEx_TxRxDMAError+0x78>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d101      	bne.n	8002cac <I2SEx_TxRxDMAError+0x2c>
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <I2SEx_TxRxDMAError+0x7c>)
 8002caa:	e001      	b.n	8002cb0 <I2SEx_TxRxDMAError+0x30>
 8002cac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4910      	ldr	r1, [pc, #64]	; (8002cf8 <I2SEx_TxRxDMAError+0x78>)
 8002cb8:	428b      	cmp	r3, r1
 8002cba:	d101      	bne.n	8002cc0 <I2SEx_TxRxDMAError+0x40>
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <I2SEx_TxRxDMAError+0x7c>)
 8002cbe:	e001      	b.n	8002cc4 <I2SEx_TxRxDMAError+0x44>
 8002cc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cc4:	f022 0203 	bic.w	r2, r2, #3
 8002cc8:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f043 0208 	orr.w	r2, r3, #8
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff fb7e 	bl	80023ec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40003800 	.word	0x40003800
 8002cfc:	40003400 	.word	0x40003400

08002d00 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	1c99      	adds	r1, r3, #2
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6251      	str	r1, [r2, #36]	; 0x24
 8002d12:	881a      	ldrh	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d113      	bne.n	8002d5a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d40:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d106      	bne.n	8002d5a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7fd fd33 	bl	80007c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c99      	adds	r1, r3, #2
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6251      	str	r1, [r2, #36]	; 0x24
 8002d76:	8819      	ldrh	r1, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <I2SEx_TxISR_I2SExt+0x90>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d101      	bne.n	8002d86 <I2SEx_TxISR_I2SExt+0x22>
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <I2SEx_TxISR_I2SExt+0x94>)
 8002d84:	e001      	b.n	8002d8a <I2SEx_TxISR_I2SExt+0x26>
 8002d86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d8a:	460a      	mov	r2, r1
 8002d8c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d121      	bne.n	8002dea <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <I2SEx_TxISR_I2SExt+0x90>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <I2SEx_TxISR_I2SExt+0x50>
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <I2SEx_TxISR_I2SExt+0x94>)
 8002db2:	e001      	b.n	8002db8 <I2SEx_TxISR_I2SExt+0x54>
 8002db4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	490d      	ldr	r1, [pc, #52]	; (8002df4 <I2SEx_TxISR_I2SExt+0x90>)
 8002dc0:	428b      	cmp	r3, r1
 8002dc2:	d101      	bne.n	8002dc8 <I2SEx_TxISR_I2SExt+0x64>
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <I2SEx_TxISR_I2SExt+0x94>)
 8002dc6:	e001      	b.n	8002dcc <I2SEx_TxISR_I2SExt+0x68>
 8002dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dcc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dd0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d106      	bne.n	8002dea <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7fd fceb 	bl	80007c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40003800 	.word	0x40003800
 8002df8:	40003400 	.word	0x40003400

08002dfc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68d8      	ldr	r0, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	1c99      	adds	r1, r3, #2
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e14:	b282      	uxth	r2, r0
 8002e16:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d113      	bne.n	8002e58 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e3e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d106      	bne.n	8002e58 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f7fd fcb4 	bl	80007c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <I2SEx_RxISR_I2SExt+0x90>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <I2SEx_RxISR_I2SExt+0x16>
 8002e72:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <I2SEx_RxISR_I2SExt+0x94>)
 8002e74:	e001      	b.n	8002e7a <I2SEx_RxISR_I2SExt+0x1a>
 8002e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e7a:	68d8      	ldr	r0, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	1c99      	adds	r1, r3, #2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e86:	b282      	uxth	r2, r0
 8002e88:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d121      	bne.n	8002ee6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a12      	ldr	r2, [pc, #72]	; (8002ef0 <I2SEx_RxISR_I2SExt+0x90>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <I2SEx_RxISR_I2SExt+0x50>
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <I2SEx_RxISR_I2SExt+0x94>)
 8002eae:	e001      	b.n	8002eb4 <I2SEx_RxISR_I2SExt+0x54>
 8002eb0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eb4:	685a      	ldr	r2, [r3, #4]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	490d      	ldr	r1, [pc, #52]	; (8002ef0 <I2SEx_RxISR_I2SExt+0x90>)
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	d101      	bne.n	8002ec4 <I2SEx_RxISR_I2SExt+0x64>
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <I2SEx_RxISR_I2SExt+0x94>)
 8002ec2:	e001      	b.n	8002ec8 <I2SEx_RxISR_I2SExt+0x68>
 8002ec4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ecc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f7fd fc6d 	bl	80007c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40003800 	.word	0x40003800
 8002ef4:	40003400 	.word	0x40003400

08002ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e267      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d075      	beq.n	8003002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f16:	4b88      	ldr	r3, [pc, #544]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d00c      	beq.n	8002f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f22:	4b85      	ldr	r3, [pc, #532]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d112      	bne.n	8002f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2e:	4b82      	ldr	r3, [pc, #520]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3a:	d10b      	bne.n	8002f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f3c:	4b7e      	ldr	r3, [pc, #504]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d05b      	beq.n	8003000 <HAL_RCC_OscConfig+0x108>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d157      	bne.n	8003000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e242      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCC_OscConfig+0x74>
 8002f5e:	4b76      	ldr	r3, [pc, #472]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a75      	ldr	r2, [pc, #468]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01d      	b.n	8002fa8 <HAL_RCC_OscConfig+0xb0>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f74:	d10c      	bne.n	8002f90 <HAL_RCC_OscConfig+0x98>
 8002f76:	4b70      	ldr	r3, [pc, #448]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a6f      	ldr	r2, [pc, #444]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	4b6d      	ldr	r3, [pc, #436]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a6c      	ldr	r2, [pc, #432]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	e00b      	b.n	8002fa8 <HAL_RCC_OscConfig+0xb0>
 8002f90:	4b69      	ldr	r3, [pc, #420]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a68      	ldr	r2, [pc, #416]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	4b66      	ldr	r3, [pc, #408]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a65      	ldr	r2, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe f8f0 	bl	8001194 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb8:	f7fe f8ec 	bl	8001194 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b64      	cmp	r3, #100	; 0x64
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e207      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fca:	4b5b      	ldr	r3, [pc, #364]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0xc0>
 8002fd6:	e014      	b.n	8003002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f8dc 	bl	8001194 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe f8d8 	bl	8001194 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e1f3      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff2:	4b51      	ldr	r3, [pc, #324]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xe8>
 8002ffe:	e000      	b.n	8003002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d063      	beq.n	80030d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300e:	4b4a      	ldr	r3, [pc, #296]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301a:	4b47      	ldr	r3, [pc, #284]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003022:	2b08      	cmp	r3, #8
 8003024:	d11c      	bne.n	8003060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003026:	4b44      	ldr	r3, [pc, #272]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d116      	bne.n	8003060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003032:	4b41      	ldr	r3, [pc, #260]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d005      	beq.n	800304a <HAL_RCC_OscConfig+0x152>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d001      	beq.n	800304a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e1c7      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691b      	ldr	r3, [r3, #16]
 8003056:	00db      	lsls	r3, r3, #3
 8003058:	4937      	ldr	r1, [pc, #220]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800305a:	4313      	orrs	r3, r2
 800305c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305e:	e03a      	b.n	80030d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003068:	4b34      	ldr	r3, [pc, #208]	; (800313c <HAL_RCC_OscConfig+0x244>)
 800306a:	2201      	movs	r2, #1
 800306c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fe f891 	bl	8001194 <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003076:	f7fe f88d 	bl	8001194 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e1a8      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	4b2b      	ldr	r3, [pc, #172]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0302 	and.w	r3, r3, #2
 8003090:	2b00      	cmp	r3, #0
 8003092:	d0f0      	beq.n	8003076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003094:	4b28      	ldr	r3, [pc, #160]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4925      	ldr	r1, [pc, #148]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	600b      	str	r3, [r1, #0]
 80030a8:	e015      	b.n	80030d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_RCC_OscConfig+0x244>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7fe f870 	bl	8001194 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b8:	f7fe f86c 	bl	8001194 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e187      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d036      	beq.n	8003150 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d016      	beq.n	8003118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ea:	4b15      	ldr	r3, [pc, #84]	; (8003140 <HAL_RCC_OscConfig+0x248>)
 80030ec:	2201      	movs	r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f0:	f7fe f850 	bl	8001194 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f8:	f7fe f84c 	bl	8001194 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e167      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	4b0b      	ldr	r3, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x240>)
 800310c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0x200>
 8003116:	e01b      	b.n	8003150 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003118:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_OscConfig+0x248>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311e:	f7fe f839 	bl	8001194 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003124:	e00e      	b.n	8003144 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003126:	f7fe f835 	bl	8001194 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d907      	bls.n	8003144 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e150      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
 8003138:	40023800 	.word	0x40023800
 800313c:	42470000 	.word	0x42470000
 8003140:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	4b88      	ldr	r3, [pc, #544]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ea      	bne.n	8003126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0304 	and.w	r3, r3, #4
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 8097 	beq.w	800328c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003162:	4b81      	ldr	r3, [pc, #516]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
 8003172:	4b7d      	ldr	r3, [pc, #500]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a7c      	ldr	r2, [pc, #496]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b7a      	ldr	r3, [pc, #488]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003186:	60bb      	str	r3, [r7, #8]
 8003188:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800318a:	2301      	movs	r3, #1
 800318c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318e:	4b77      	ldr	r3, [pc, #476]	; (800336c <HAL_RCC_OscConfig+0x474>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d118      	bne.n	80031cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319a:	4b74      	ldr	r3, [pc, #464]	; (800336c <HAL_RCC_OscConfig+0x474>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a73      	ldr	r2, [pc, #460]	; (800336c <HAL_RCC_OscConfig+0x474>)
 80031a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a6:	f7fd fff5 	bl	8001194 <HAL_GetTick>
 80031aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	e008      	b.n	80031c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ae:	f7fd fff1 	bl	8001194 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	1ad3      	subs	r3, r2, r3
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e10c      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	4b6a      	ldr	r3, [pc, #424]	; (800336c <HAL_RCC_OscConfig+0x474>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0f0      	beq.n	80031ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <HAL_RCC_OscConfig+0x2ea>
 80031d4:	4b64      	ldr	r3, [pc, #400]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4a63      	ldr	r2, [pc, #396]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6713      	str	r3, [r2, #112]	; 0x70
 80031e0:	e01c      	b.n	800321c <HAL_RCC_OscConfig+0x324>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b05      	cmp	r3, #5
 80031e8:	d10c      	bne.n	8003204 <HAL_RCC_OscConfig+0x30c>
 80031ea:	4b5f      	ldr	r3, [pc, #380]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ee:	4a5e      	ldr	r2, [pc, #376]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031f0:	f043 0304 	orr.w	r3, r3, #4
 80031f4:	6713      	str	r3, [r2, #112]	; 0x70
 80031f6:	4b5c      	ldr	r3, [pc, #368]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a5b      	ldr	r2, [pc, #364]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
 8003202:	e00b      	b.n	800321c <HAL_RCC_OscConfig+0x324>
 8003204:	4b58      	ldr	r3, [pc, #352]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a57      	ldr	r2, [pc, #348]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	4b55      	ldr	r3, [pc, #340]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003214:	4a54      	ldr	r2, [pc, #336]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003216:	f023 0304 	bic.w	r3, r3, #4
 800321a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d015      	beq.n	8003250 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003224:	f7fd ffb6 	bl	8001194 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fd ffb2 	bl	8001194 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e0cb      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003242:	4b49      	ldr	r3, [pc, #292]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0ee      	beq.n	800322c <HAL_RCC_OscConfig+0x334>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7fd ffa0 	bl	8001194 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003256:	e00a      	b.n	800326e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fd ff9c 	bl	8001194 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e0b5      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326e:	4b3e      	ldr	r3, [pc, #248]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ee      	bne.n	8003258 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800327a:	7dfb      	ldrb	r3, [r7, #23]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	4a38      	ldr	r2, [pc, #224]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80a1 	beq.w	80033d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003296:	4b34      	ldr	r3, [pc, #208]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d05c      	beq.n	800335c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d141      	bne.n	800332e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032aa:	4b31      	ldr	r3, [pc, #196]	; (8003370 <HAL_RCC_OscConfig+0x478>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fd ff70 	bl	8001194 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b8:	f7fd ff6c 	bl	8001194 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e087      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	4b27      	ldr	r3, [pc, #156]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	019b      	lsls	r3, r3, #6
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	3b01      	subs	r3, #1
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	061b      	lsls	r3, r3, #24
 80032fa:	491b      	ldr	r1, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <HAL_RCC_OscConfig+0x478>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fd ff45 	bl	8001194 <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330e:	f7fd ff41 	bl	8001194 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e05c      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x416>
 800332c:	e054      	b.n	80033d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332e:	4b10      	ldr	r3, [pc, #64]	; (8003370 <HAL_RCC_OscConfig+0x478>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7fd ff2e 	bl	8001194 <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333c:	f7fd ff2a 	bl	8001194 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e045      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_RCC_OscConfig+0x470>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x444>
 800335a:	e03d      	b.n	80033d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e038      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
 8003368:	40023800 	.word	0x40023800
 800336c:	40007000 	.word	0x40007000
 8003370:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003374:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <HAL_RCC_OscConfig+0x4ec>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d028      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800338c:	429a      	cmp	r2, r3
 800338e:	d121      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d11a      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033a4:	4013      	ands	r3, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d111      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	3b01      	subs	r3, #1
 80033be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d107      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800

080033e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0cc      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d90c      	bls.n	8003424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b65      	ldr	r3, [pc, #404]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003412:	4b63      	ldr	r3, [pc, #396]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d001      	beq.n	8003424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0b8      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d020      	beq.n	8003472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d005      	beq.n	8003448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800343c:	4b59      	ldr	r3, [pc, #356]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	4a58      	ldr	r2, [pc, #352]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003454:	4b53      	ldr	r3, [pc, #332]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800345e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003460:	4b50      	ldr	r3, [pc, #320]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	494d      	ldr	r1, [pc, #308]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	4313      	orrs	r3, r2
 8003470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d044      	beq.n	8003508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d107      	bne.n	8003496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d119      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e07f      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a6:	4b3f      	ldr	r3, [pc, #252]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e06f      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e067      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c6:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f023 0203 	bic.w	r2, r3, #3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4934      	ldr	r1, [pc, #208]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d8:	f7fd fe5c 	bl	8001194 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034de:	e00a      	b.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e0:	f7fd fe58 	bl	8001194 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d901      	bls.n	80034f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e04f      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 020c 	and.w	r2, r3, #12
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	429a      	cmp	r2, r3
 8003506:	d1eb      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003508:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	429a      	cmp	r2, r3
 8003514:	d20c      	bcs.n	8003530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003516:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	b2d2      	uxtb	r2, r2
 800351c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e032      	b.n	8003596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4916      	ldr	r1, [pc, #88]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800355a:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	490e      	ldr	r1, [pc, #56]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800356e:	f000 f821 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 8003572:	4602      	mov	r2, r0
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	091b      	lsrs	r3, r3, #4
 800357a:	f003 030f 	and.w	r3, r3, #15
 800357e:	490a      	ldr	r1, [pc, #40]	; (80035a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003580:	5ccb      	ldrb	r3, [r1, r3]
 8003582:	fa22 f303 	lsr.w	r3, r2, r3
 8003586:	4a09      	ldr	r2, [pc, #36]	; (80035ac <HAL_RCC_ClockConfig+0x1c4>)
 8003588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800358a:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <HAL_RCC_ClockConfig+0x1c8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4618      	mov	r0, r3
 8003590:	f7fd fdbc 	bl	800110c <HAL_InitTick>

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023c00 	.word	0x40023c00
 80035a4:	40023800 	.word	0x40023800
 80035a8:	08005484 	.word	0x08005484
 80035ac:	20000004 	.word	0x20000004
 80035b0:	20000008 	.word	0x20000008

080035b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b8:	b094      	sub	sp, #80	; 0x50
 80035ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	647b      	str	r3, [r7, #68]	; 0x44
 80035c0:	2300      	movs	r3, #0
 80035c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035c4:	2300      	movs	r3, #0
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035cc:	4b79      	ldr	r3, [pc, #484]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 030c 	and.w	r3, r3, #12
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d00d      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x40>
 80035d8:	2b08      	cmp	r3, #8
 80035da:	f200 80e1 	bhi.w	80037a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x34>
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0x3a>
 80035e6:	e0db      	b.n	80037a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b73      	ldr	r3, [pc, #460]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80035ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80035ec:	e0db      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ee:	4b73      	ldr	r3, [pc, #460]	; (80037bc <HAL_RCC_GetSysClockFreq+0x208>)
 80035f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035f2:	e0d8      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f4:	4b6f      	ldr	r3, [pc, #444]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035fe:	4b6d      	ldr	r3, [pc, #436]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360a:	4b6a      	ldr	r3, [pc, #424]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	099b      	lsrs	r3, r3, #6
 8003610:	2200      	movs	r2, #0
 8003612:	63bb      	str	r3, [r7, #56]	; 0x38
 8003614:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
 800361e:	2300      	movs	r3, #0
 8003620:	637b      	str	r3, [r7, #52]	; 0x34
 8003622:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003626:	4622      	mov	r2, r4
 8003628:	462b      	mov	r3, r5
 800362a:	f04f 0000 	mov.w	r0, #0
 800362e:	f04f 0100 	mov.w	r1, #0
 8003632:	0159      	lsls	r1, r3, #5
 8003634:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003638:	0150      	lsls	r0, r2, #5
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4621      	mov	r1, r4
 8003640:	1a51      	subs	r1, r2, r1
 8003642:	6139      	str	r1, [r7, #16]
 8003644:	4629      	mov	r1, r5
 8003646:	eb63 0301 	sbc.w	r3, r3, r1
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003658:	4659      	mov	r1, fp
 800365a:	018b      	lsls	r3, r1, #6
 800365c:	4651      	mov	r1, sl
 800365e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003662:	4651      	mov	r1, sl
 8003664:	018a      	lsls	r2, r1, #6
 8003666:	4651      	mov	r1, sl
 8003668:	ebb2 0801 	subs.w	r8, r2, r1
 800366c:	4659      	mov	r1, fp
 800366e:	eb63 0901 	sbc.w	r9, r3, r1
 8003672:	f04f 0200 	mov.w	r2, #0
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800367e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003686:	4690      	mov	r8, r2
 8003688:	4699      	mov	r9, r3
 800368a:	4623      	mov	r3, r4
 800368c:	eb18 0303 	adds.w	r3, r8, r3
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	462b      	mov	r3, r5
 8003694:	eb49 0303 	adc.w	r3, r9, r3
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036a6:	4629      	mov	r1, r5
 80036a8:	024b      	lsls	r3, r1, #9
 80036aa:	4621      	mov	r1, r4
 80036ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036b0:	4621      	mov	r1, r4
 80036b2:	024a      	lsls	r2, r1, #9
 80036b4:	4610      	mov	r0, r2
 80036b6:	4619      	mov	r1, r3
 80036b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036ba:	2200      	movs	r2, #0
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036c4:	f7fc fddc 	bl	8000280 <__aeabi_uldivmod>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4613      	mov	r3, r2
 80036ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036d0:	e058      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036d2:	4b38      	ldr	r3, [pc, #224]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	099b      	lsrs	r3, r3, #6
 80036d8:	2200      	movs	r2, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	4611      	mov	r1, r2
 80036de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036e2:	623b      	str	r3, [r7, #32]
 80036e4:	2300      	movs	r3, #0
 80036e6:	627b      	str	r3, [r7, #36]	; 0x24
 80036e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036ec:	4642      	mov	r2, r8
 80036ee:	464b      	mov	r3, r9
 80036f0:	f04f 0000 	mov.w	r0, #0
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	0159      	lsls	r1, r3, #5
 80036fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036fe:	0150      	lsls	r0, r2, #5
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4641      	mov	r1, r8
 8003706:	ebb2 0a01 	subs.w	sl, r2, r1
 800370a:	4649      	mov	r1, r9
 800370c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800371c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003720:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003724:	ebb2 040a 	subs.w	r4, r2, sl
 8003728:	eb63 050b 	sbc.w	r5, r3, fp
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	00eb      	lsls	r3, r5, #3
 8003736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800373a:	00e2      	lsls	r2, r4, #3
 800373c:	4614      	mov	r4, r2
 800373e:	461d      	mov	r5, r3
 8003740:	4643      	mov	r3, r8
 8003742:	18e3      	adds	r3, r4, r3
 8003744:	603b      	str	r3, [r7, #0]
 8003746:	464b      	mov	r3, r9
 8003748:	eb45 0303 	adc.w	r3, r5, r3
 800374c:	607b      	str	r3, [r7, #4]
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	e9d7 4500 	ldrd	r4, r5, [r7]
 800375a:	4629      	mov	r1, r5
 800375c:	028b      	lsls	r3, r1, #10
 800375e:	4621      	mov	r1, r4
 8003760:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003764:	4621      	mov	r1, r4
 8003766:	028a      	lsls	r2, r1, #10
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800376e:	2200      	movs	r2, #0
 8003770:	61bb      	str	r3, [r7, #24]
 8003772:	61fa      	str	r2, [r7, #28]
 8003774:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003778:	f7fc fd82 	bl	8000280 <__aeabi_uldivmod>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4613      	mov	r3, r2
 8003782:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	0c1b      	lsrs	r3, r3, #16
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	3301      	adds	r3, #1
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003794:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800379e:	e002      	b.n	80037a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80037a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3750      	adds	r7, #80	; 0x50
 80037ac:	46bd      	mov	sp, r7
 80037ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037b2:	bf00      	nop
 80037b4:	40023800 	.word	0x40023800
 80037b8:	00f42400 	.word	0x00f42400
 80037bc:	007a1200 	.word	0x007a1200

080037c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b03      	ldr	r3, [pc, #12]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000004 	.word	0x20000004

080037d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037dc:	f7ff fff0 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	0a9b      	lsrs	r3, r3, #10
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4903      	ldr	r1, [pc, #12]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	08005494 	.word	0x08005494

08003800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003804:	f7ff ffdc 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	0b5b      	lsrs	r3, r3, #13
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4903      	ldr	r1, [pc, #12]	; (8003824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800
 8003824:	08005494 	.word	0x08005494

08003828 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d105      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800384c:	2b00      	cmp	r3, #0
 800384e:	d035      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003850:	4b67      	ldr	r3, [pc, #412]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003856:	f7fd fc9d 	bl	8001194 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800385c:	e008      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800385e:	f7fd fc99 	bl	8001194 <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e0ba      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003870:	4b60      	ldr	r3, [pc, #384]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f0      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	019a      	lsls	r2, r3, #6
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	071b      	lsls	r3, r3, #28
 8003888:	495a      	ldr	r1, [pc, #360]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003890:	4b57      	ldr	r3, [pc, #348]	; (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003892:	2201      	movs	r2, #1
 8003894:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003896:	f7fd fc7d 	bl	8001194 <HAL_GetTick>
 800389a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800389e:	f7fd fc79 	bl	8001194 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e09a      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038b0:	4b50      	ldr	r3, [pc, #320]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8083 	beq.w	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	4b49      	ldr	r3, [pc, #292]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a48      	ldr	r2, [pc, #288]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b46      	ldr	r3, [pc, #280]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80038e6:	4b44      	ldr	r3, [pc, #272]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a43      	ldr	r2, [pc, #268]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80038f2:	f7fd fc4f 	bl	8001194 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80038f8:	e008      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fd fc4b 	bl	8001194 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e06c      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800390c:	4b3a      	ldr	r3, [pc, #232]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0f0      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003918:	4b36      	ldr	r3, [pc, #216]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800391a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003920:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d02f      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	429a      	cmp	r2, r3
 8003934:	d028      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003936:	4b2f      	ldr	r3, [pc, #188]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003940:	4b2e      	ldr	r3, [pc, #184]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003946:	4b2d      	ldr	r3, [pc, #180]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800394c:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003952:	4b28      	ldr	r3, [pc, #160]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b01      	cmp	r3, #1
 800395c:	d114      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800395e:	f7fd fc19 	bl	8001194 <HAL_GetTick>
 8003962:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00a      	b.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd fc15 	bl	8001194 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	f241 3288 	movw	r2, #5000	; 0x1388
 8003974:	4293      	cmp	r3, r2
 8003976:	d901      	bls.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e034      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397c:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d0ee      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003990:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003994:	d10d      	bne.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80039a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039aa:	4912      	ldr	r1, [pc, #72]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]
 80039b0:	e005      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4a0f      	ldr	r2, [pc, #60]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039bc:	6093      	str	r3, [r2, #8]
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ca:	490a      	ldr	r1, [pc, #40]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	7c1a      	ldrb	r2, [r3, #16]
 80039e0:	4b07      	ldr	r3, [pc, #28]	; (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80039e2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	42470068 	.word	0x42470068
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40007000 	.word	0x40007000
 80039fc:	42470e40 	.word	0x42470e40
 8003a00:	424711e0 	.word	0x424711e0

08003a04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d13e      	bne.n	8003aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003a22:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d12f      	bne.n	8003a98 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003a38:	4b1e      	ldr	r3, [pc, #120]	; (8003ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003a3a:	617b      	str	r3, [r7, #20]
          break;
 8003a3c:	e02f      	b.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003a3e:	4b1c      	ldr	r3, [pc, #112]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4a:	d108      	bne.n	8003a5e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a4c:	4b18      	ldr	r3, [pc, #96]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e007      	b.n	8003a6e <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003a5e:	4b14      	ldr	r3, [pc, #80]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a66:	4a15      	ldr	r2, [pc, #84]	; (8003abc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003a6e:	4b10      	ldr	r3, [pc, #64]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a74:	099b      	lsrs	r3, r3, #6
 8003a76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a88:	0f1b      	lsrs	r3, r3, #28
 8003a8a:	f003 0307 	and.w	r3, r3, #7
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]
          break;
 8003a96:	e002      	b.n	8003a9e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
          break;
 8003a9c:	bf00      	nop
        }
      }
      break;
 8003a9e:	bf00      	nop
    }
  }
  return frequency;
 8003aa0:	697b      	ldr	r3, [r7, #20]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	00bb8000 	.word	0x00bb8000
 8003ab8:	007a1200 	.word	0x007a1200
 8003abc:	00f42400 	.word	0x00f42400

08003ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e041      	b.n	8003b56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fd f9ce 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f000 fa88 	bl	8004014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d001      	beq.n	8003b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e044      	b.n	8003c02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68da      	ldr	r2, [r3, #12]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f042 0201 	orr.w	r2, r2, #1
 8003b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1e      	ldr	r2, [pc, #120]	; (8003c10 <HAL_TIM_Base_Start_IT+0xb0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d018      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x6c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba2:	d013      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x6c>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1a      	ldr	r2, [pc, #104]	; (8003c14 <HAL_TIM_Base_Start_IT+0xb4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00e      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x6c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a19      	ldr	r2, [pc, #100]	; (8003c18 <HAL_TIM_Base_Start_IT+0xb8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d009      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x6c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a17      	ldr	r2, [pc, #92]	; (8003c1c <HAL_TIM_Base_Start_IT+0xbc>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d004      	beq.n	8003bcc <HAL_TIM_Base_Start_IT+0x6c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a16      	ldr	r2, [pc, #88]	; (8003c20 <HAL_TIM_Base_Start_IT+0xc0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d111      	bne.n	8003bf0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 0307 	and.w	r3, r3, #7
 8003bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b06      	cmp	r3, #6
 8003bdc:	d010      	beq.n	8003c00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0201 	orr.w	r2, r2, #1
 8003bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bee:	e007      	b.n	8003c00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f042 0201 	orr.w	r2, r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40000400 	.word	0x40000400
 8003c18:	40000800 	.word	0x40000800
 8003c1c:	40000c00 	.word	0x40000c00
 8003c20:	40014000 	.word	0x40014000

08003c24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d122      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d11b      	bne.n	8003c80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f06f 0202 	mvn.w	r2, #2
 8003c50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f9b5 	bl	8003fd6 <HAL_TIM_IC_CaptureCallback>
 8003c6c:	e005      	b.n	8003c7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f9a7 	bl	8003fc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f9b8 	bl	8003fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0204 	mvn.w	r2, #4
 8003ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f98b 	bl	8003fd6 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f97d 	bl	8003fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 f98e 	bl	8003fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0308 	and.w	r3, r3, #8
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d122      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0208 	mvn.w	r2, #8
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f961 	bl	8003fd6 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f953 	bl	8003fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f964 	bl	8003fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0310 	and.w	r3, r3, #16
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d122      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b10      	cmp	r3, #16
 8003d42:	d11b      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0210 	mvn.w	r2, #16
 8003d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2208      	movs	r2, #8
 8003d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f937 	bl	8003fd6 <HAL_TIM_IC_CaptureCallback>
 8003d68:	e005      	b.n	8003d76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 f929 	bl	8003fc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f93a 	bl	8003fea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d10e      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d107      	bne.n	8003da8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0201 	mvn.w	r2, #1
 8003da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fc fd2a 	bl	80007fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003db2:	2b80      	cmp	r3, #128	; 0x80
 8003db4:	d10e      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	2b80      	cmp	r3, #128	; 0x80
 8003dc2:	d107      	bne.n	8003dd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fab2 	bl	8004338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dde:	2b40      	cmp	r3, #64	; 0x40
 8003de0:	d10e      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dec:	2b40      	cmp	r3, #64	; 0x40
 8003dee:	d107      	bne.n	8003e00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f8ff 	bl	8003ffe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	f003 0320 	and.w	r3, r3, #32
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d10e      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d107      	bne.n	8003e2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f06f 0220 	mvn.w	r2, #32
 8003e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fa7c 	bl	8004324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIM_ConfigClockSource+0x1c>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e0b4      	b.n	8003fba <HAL_TIM_ConfigClockSource+0x186>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e88:	d03e      	beq.n	8003f08 <HAL_TIM_ConfigClockSource+0xd4>
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e8e:	f200 8087 	bhi.w	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e96:	f000 8086 	beq.w	8003fa6 <HAL_TIM_ConfigClockSource+0x172>
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	d87f      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b70      	cmp	r3, #112	; 0x70
 8003ea2:	d01a      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0xa6>
 8003ea4:	2b70      	cmp	r3, #112	; 0x70
 8003ea6:	d87b      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b60      	cmp	r3, #96	; 0x60
 8003eaa:	d050      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x11a>
 8003eac:	2b60      	cmp	r3, #96	; 0x60
 8003eae:	d877      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b50      	cmp	r3, #80	; 0x50
 8003eb2:	d03c      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0xfa>
 8003eb4:	2b50      	cmp	r3, #80	; 0x50
 8003eb6:	d873      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d058      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x13a>
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d86f      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b30      	cmp	r3, #48	; 0x30
 8003ec2:	d064      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ec4:	2b30      	cmp	r3, #48	; 0x30
 8003ec6:	d86b      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d060      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d867      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d05c      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d05a      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	e062      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6899      	ldr	r1, [r3, #8]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f000 f98d 	bl	8004208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	609a      	str	r2, [r3, #8]
      break;
 8003f06:	e04f      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6818      	ldr	r0, [r3, #0]
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6899      	ldr	r1, [r3, #8]
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f000 f976 	bl	8004208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f2a:	609a      	str	r2, [r3, #8]
      break;
 8003f2c:	e03c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f000 f8ea 	bl	8004114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2150      	movs	r1, #80	; 0x50
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 f943 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003f4c:	e02c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f000 f909 	bl	8004172 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2160      	movs	r1, #96	; 0x60
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f933 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003f6c:	e01c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f000 f8ca 	bl	8004114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2140      	movs	r1, #64	; 0x40
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 f923 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003f8c:	e00c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f000 f91a 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003f9e:	e003      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e000      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a34      	ldr	r2, [pc, #208]	; (80040f8 <TIM_Base_SetConfig+0xe4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00f      	beq.n	800404c <TIM_Base_SetConfig+0x38>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004032:	d00b      	beq.n	800404c <TIM_Base_SetConfig+0x38>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a31      	ldr	r2, [pc, #196]	; (80040fc <TIM_Base_SetConfig+0xe8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_Base_SetConfig+0x38>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a30      	ldr	r2, [pc, #192]	; (8004100 <TIM_Base_SetConfig+0xec>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_Base_SetConfig+0x38>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a2f      	ldr	r2, [pc, #188]	; (8004104 <TIM_Base_SetConfig+0xf0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d108      	bne.n	800405e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a25      	ldr	r2, [pc, #148]	; (80040f8 <TIM_Base_SetConfig+0xe4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d01b      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800406c:	d017      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a22      	ldr	r2, [pc, #136]	; (80040fc <TIM_Base_SetConfig+0xe8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a21      	ldr	r2, [pc, #132]	; (8004100 <TIM_Base_SetConfig+0xec>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d00f      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a20      	ldr	r2, [pc, #128]	; (8004104 <TIM_Base_SetConfig+0xf0>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d00b      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a1f      	ldr	r2, [pc, #124]	; (8004108 <TIM_Base_SetConfig+0xf4>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d007      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a1e      	ldr	r2, [pc, #120]	; (800410c <TIM_Base_SetConfig+0xf8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d003      	beq.n	800409e <TIM_Base_SetConfig+0x8a>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <TIM_Base_SetConfig+0xfc>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d108      	bne.n	80040b0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a08      	ldr	r2, [pc, #32]	; (80040f8 <TIM_Base_SetConfig+0xe4>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	615a      	str	r2, [r3, #20]
}
 80040ea:	bf00      	nop
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40010000 	.word	0x40010000
 80040fc:	40000400 	.word	0x40000400
 8004100:	40000800 	.word	0x40000800
 8004104:	40000c00 	.word	0x40000c00
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400
 8004110:	40014800 	.word	0x40014800

08004114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 030a 	bic.w	r3, r3, #10
 8004150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004172:	b480      	push	{r7}
 8004174:	b087      	sub	sp, #28
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0210 	bic.w	r2, r3, #16
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800419c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	031b      	lsls	r3, r3, #12
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f043 0307 	orr.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	431a      	orrs	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800425c:	2302      	movs	r3, #2
 800425e:	e050      	b.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4313      	orrs	r3, r2
 8004290:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1c      	ldr	r2, [pc, #112]	; (8004310 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d018      	beq.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042ac:	d013      	beq.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a18      	ldr	r2, [pc, #96]	; (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a16      	ldr	r2, [pc, #88]	; (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a15      	ldr	r2, [pc, #84]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a13      	ldr	r2, [pc, #76]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d10c      	bne.n	80042f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	40010000 	.word	0x40010000
 8004314:	40000400 	.word	0x40000400
 8004318:	40000800 	.word	0x40000800
 800431c:	40000c00 	.word	0x40000c00
 8004320:	40014000 	.word	0x40014000

08004324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e03f      	b.n	80043de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fc fdb0 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	; 0x24
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800438e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f929 	bl	80045e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043dc:	2300      	movs	r3, #0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b08a      	sub	sp, #40	; 0x28
 80043ea:	af02      	add	r7, sp, #8
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	603b      	str	r3, [r7, #0]
 80043f2:	4613      	mov	r3, r2
 80043f4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b20      	cmp	r3, #32
 8004404:	d17c      	bne.n	8004500 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <HAL_UART_Transmit+0x2c>
 800440c:	88fb      	ldrh	r3, [r7, #6]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e075      	b.n	8004502 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_UART_Transmit+0x3e>
 8004420:	2302      	movs	r3, #2
 8004422:	e06e      	b.n	8004502 <HAL_UART_Transmit+0x11c>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2221      	movs	r2, #33	; 0x21
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800443a:	f7fc feab 	bl	8001194 <HAL_GetTick>
 800443e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	88fa      	ldrh	r2, [r7, #6]
 800444a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004454:	d108      	bne.n	8004468 <HAL_UART_Transmit+0x82>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d104      	bne.n	8004468 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	61bb      	str	r3, [r7, #24]
 8004466:	e003      	b.n	8004470 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800446c:	2300      	movs	r3, #0
 800446e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004478:	e02a      	b.n	80044d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2200      	movs	r2, #0
 8004482:	2180      	movs	r1, #128	; 0x80
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f840 	bl	800450a <UART_WaitOnFlagUntilTimeout>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e036      	b.n	8004502 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10b      	bne.n	80044b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	3302      	adds	r3, #2
 80044ae:	61bb      	str	r3, [r7, #24]
 80044b0:	e007      	b.n	80044c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	781a      	ldrb	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	3301      	adds	r3, #1
 80044c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1cf      	bne.n	800447a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2140      	movs	r1, #64	; 0x40
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f810 	bl	800450a <UART_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e006      	b.n	8004502 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	e000      	b.n	8004502 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004500:	2302      	movs	r3, #2
  }
}
 8004502:	4618      	mov	r0, r3
 8004504:	3720      	adds	r7, #32
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b090      	sub	sp, #64	; 0x40
 800450e:	af00      	add	r7, sp, #0
 8004510:	60f8      	str	r0, [r7, #12]
 8004512:	60b9      	str	r1, [r7, #8]
 8004514:	603b      	str	r3, [r7, #0]
 8004516:	4613      	mov	r3, r2
 8004518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451a:	e050      	b.n	80045be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d04c      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004526:	2b00      	cmp	r3, #0
 8004528:	d007      	beq.n	800453a <UART_WaitOnFlagUntilTimeout+0x30>
 800452a:	f7fc fe33 	bl	8001194 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004536:	429a      	cmp	r2, r3
 8004538:	d241      	bcs.n	80045be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	330c      	adds	r3, #12
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	330c      	adds	r3, #12
 8004558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800455a:	637a      	str	r2, [r7, #52]	; 0x34
 800455c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e5      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3314      	adds	r3, #20
 8004574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	613b      	str	r3, [r7, #16]
   return(result);
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	63bb      	str	r3, [r7, #56]	; 0x38
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3314      	adds	r3, #20
 800458c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800458e:	623a      	str	r2, [r7, #32]
 8004590:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	69f9      	ldr	r1, [r7, #28]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	61bb      	str	r3, [r7, #24]
   return(result);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e00f      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4013      	ands	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	bf0c      	ite	eq
 80045ce:	2301      	moveq	r3, #1
 80045d0:	2300      	movne	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d09f      	beq.n	800451c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3740      	adds	r7, #64	; 0x40
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
	...

080045e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045ec:	b0c0      	sub	sp, #256	; 0x100
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004604:	68d9      	ldr	r1, [r3, #12]
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	ea40 0301 	orr.w	r3, r0, r1
 8004610:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	431a      	orrs	r2, r3
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	431a      	orrs	r2, r3
 8004628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	4313      	orrs	r3, r2
 8004630:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004640:	f021 010c 	bic.w	r1, r1, #12
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800464e:	430b      	orrs	r3, r1
 8004650:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004662:	6999      	ldr	r1, [r3, #24]
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	ea40 0301 	orr.w	r3, r0, r1
 800466e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b8f      	ldr	r3, [pc, #572]	; (80048b4 <UART_SetConfig+0x2cc>)
 8004678:	429a      	cmp	r2, r3
 800467a:	d005      	beq.n	8004688 <UART_SetConfig+0xa0>
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	4b8d      	ldr	r3, [pc, #564]	; (80048b8 <UART_SetConfig+0x2d0>)
 8004684:	429a      	cmp	r2, r3
 8004686:	d104      	bne.n	8004692 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004688:	f7ff f8ba 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 800468c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004690:	e003      	b.n	800469a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004692:	f7ff f8a1 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 8004696:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046a4:	f040 810c 	bne.w	80048c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ac:	2200      	movs	r2, #0
 80046ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80046b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80046b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80046ba:	4622      	mov	r2, r4
 80046bc:	462b      	mov	r3, r5
 80046be:	1891      	adds	r1, r2, r2
 80046c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80046c2:	415b      	adcs	r3, r3
 80046c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80046ca:	4621      	mov	r1, r4
 80046cc:	eb12 0801 	adds.w	r8, r2, r1
 80046d0:	4629      	mov	r1, r5
 80046d2:	eb43 0901 	adc.w	r9, r3, r1
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046ea:	4690      	mov	r8, r2
 80046ec:	4699      	mov	r9, r3
 80046ee:	4623      	mov	r3, r4
 80046f0:	eb18 0303 	adds.w	r3, r8, r3
 80046f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80046f8:	462b      	mov	r3, r5
 80046fa:	eb49 0303 	adc.w	r3, r9, r3
 80046fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800470e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004712:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004716:	460b      	mov	r3, r1
 8004718:	18db      	adds	r3, r3, r3
 800471a:	653b      	str	r3, [r7, #80]	; 0x50
 800471c:	4613      	mov	r3, r2
 800471e:	eb42 0303 	adc.w	r3, r2, r3
 8004722:	657b      	str	r3, [r7, #84]	; 0x54
 8004724:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004728:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800472c:	f7fb fda8 	bl	8000280 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4b61      	ldr	r3, [pc, #388]	; (80048bc <UART_SetConfig+0x2d4>)
 8004736:	fba3 2302 	umull	r2, r3, r3, r2
 800473a:	095b      	lsrs	r3, r3, #5
 800473c:	011c      	lsls	r4, r3, #4
 800473e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004742:	2200      	movs	r2, #0
 8004744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004748:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800474c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004750:	4642      	mov	r2, r8
 8004752:	464b      	mov	r3, r9
 8004754:	1891      	adds	r1, r2, r2
 8004756:	64b9      	str	r1, [r7, #72]	; 0x48
 8004758:	415b      	adcs	r3, r3
 800475a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800475c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004760:	4641      	mov	r1, r8
 8004762:	eb12 0a01 	adds.w	sl, r2, r1
 8004766:	4649      	mov	r1, r9
 8004768:	eb43 0b01 	adc.w	fp, r3, r1
 800476c:	f04f 0200 	mov.w	r2, #0
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004778:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800477c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004780:	4692      	mov	sl, r2
 8004782:	469b      	mov	fp, r3
 8004784:	4643      	mov	r3, r8
 8004786:	eb1a 0303 	adds.w	r3, sl, r3
 800478a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800478e:	464b      	mov	r3, r9
 8004790:	eb4b 0303 	adc.w	r3, fp, r3
 8004794:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80047a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80047ac:	460b      	mov	r3, r1
 80047ae:	18db      	adds	r3, r3, r3
 80047b0:	643b      	str	r3, [r7, #64]	; 0x40
 80047b2:	4613      	mov	r3, r2
 80047b4:	eb42 0303 	adc.w	r3, r2, r3
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80047be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80047c2:	f7fb fd5d 	bl	8000280 <__aeabi_uldivmod>
 80047c6:	4602      	mov	r2, r0
 80047c8:	460b      	mov	r3, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <UART_SetConfig+0x2d4>)
 80047ce:	fba3 2301 	umull	r2, r3, r3, r1
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	2264      	movs	r2, #100	; 0x64
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	1acb      	subs	r3, r1, r3
 80047dc:	00db      	lsls	r3, r3, #3
 80047de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80047e2:	4b36      	ldr	r3, [pc, #216]	; (80048bc <UART_SetConfig+0x2d4>)
 80047e4:	fba3 2302 	umull	r2, r3, r3, r2
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047f0:	441c      	add	r4, r3
 80047f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004800:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004804:	4642      	mov	r2, r8
 8004806:	464b      	mov	r3, r9
 8004808:	1891      	adds	r1, r2, r2
 800480a:	63b9      	str	r1, [r7, #56]	; 0x38
 800480c:	415b      	adcs	r3, r3
 800480e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004810:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004814:	4641      	mov	r1, r8
 8004816:	1851      	adds	r1, r2, r1
 8004818:	6339      	str	r1, [r7, #48]	; 0x30
 800481a:	4649      	mov	r1, r9
 800481c:	414b      	adcs	r3, r1
 800481e:	637b      	str	r3, [r7, #52]	; 0x34
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800482c:	4659      	mov	r1, fp
 800482e:	00cb      	lsls	r3, r1, #3
 8004830:	4651      	mov	r1, sl
 8004832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004836:	4651      	mov	r1, sl
 8004838:	00ca      	lsls	r2, r1, #3
 800483a:	4610      	mov	r0, r2
 800483c:	4619      	mov	r1, r3
 800483e:	4603      	mov	r3, r0
 8004840:	4642      	mov	r2, r8
 8004842:	189b      	adds	r3, r3, r2
 8004844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004848:	464b      	mov	r3, r9
 800484a:	460a      	mov	r2, r1
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004860:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004864:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004868:	460b      	mov	r3, r1
 800486a:	18db      	adds	r3, r3, r3
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
 800486e:	4613      	mov	r3, r2
 8004870:	eb42 0303 	adc.w	r3, r2, r3
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004876:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800487a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800487e:	f7fb fcff 	bl	8000280 <__aeabi_uldivmod>
 8004882:	4602      	mov	r2, r0
 8004884:	460b      	mov	r3, r1
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <UART_SetConfig+0x2d4>)
 8004888:	fba3 1302 	umull	r1, r3, r3, r2
 800488c:	095b      	lsrs	r3, r3, #5
 800488e:	2164      	movs	r1, #100	; 0x64
 8004890:	fb01 f303 	mul.w	r3, r1, r3
 8004894:	1ad3      	subs	r3, r2, r3
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	3332      	adds	r3, #50	; 0x32
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <UART_SetConfig+0x2d4>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	095b      	lsrs	r3, r3, #5
 80048a2:	f003 0207 	and.w	r2, r3, #7
 80048a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4422      	add	r2, r4
 80048ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80048b0:	e105      	b.n	8004abe <UART_SetConfig+0x4d6>
 80048b2:	bf00      	nop
 80048b4:	40011000 	.word	0x40011000
 80048b8:	40011400 	.word	0x40011400
 80048bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c4:	2200      	movs	r2, #0
 80048c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80048ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80048ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80048d2:	4642      	mov	r2, r8
 80048d4:	464b      	mov	r3, r9
 80048d6:	1891      	adds	r1, r2, r2
 80048d8:	6239      	str	r1, [r7, #32]
 80048da:	415b      	adcs	r3, r3
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
 80048de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80048e2:	4641      	mov	r1, r8
 80048e4:	1854      	adds	r4, r2, r1
 80048e6:	4649      	mov	r1, r9
 80048e8:	eb43 0501 	adc.w	r5, r3, r1
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	00eb      	lsls	r3, r5, #3
 80048f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048fa:	00e2      	lsls	r2, r4, #3
 80048fc:	4614      	mov	r4, r2
 80048fe:	461d      	mov	r5, r3
 8004900:	4643      	mov	r3, r8
 8004902:	18e3      	adds	r3, r4, r3
 8004904:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004908:	464b      	mov	r3, r9
 800490a:	eb45 0303 	adc.w	r3, r5, r3
 800490e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800491e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800492e:	4629      	mov	r1, r5
 8004930:	008b      	lsls	r3, r1, #2
 8004932:	4621      	mov	r1, r4
 8004934:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004938:	4621      	mov	r1, r4
 800493a:	008a      	lsls	r2, r1, #2
 800493c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004940:	f7fb fc9e 	bl	8000280 <__aeabi_uldivmod>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	4b60      	ldr	r3, [pc, #384]	; (8004acc <UART_SetConfig+0x4e4>)
 800494a:	fba3 2302 	umull	r2, r3, r3, r2
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	011c      	lsls	r4, r3, #4
 8004952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004956:	2200      	movs	r2, #0
 8004958:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800495c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004960:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004964:	4642      	mov	r2, r8
 8004966:	464b      	mov	r3, r9
 8004968:	1891      	adds	r1, r2, r2
 800496a:	61b9      	str	r1, [r7, #24]
 800496c:	415b      	adcs	r3, r3
 800496e:	61fb      	str	r3, [r7, #28]
 8004970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004974:	4641      	mov	r1, r8
 8004976:	1851      	adds	r1, r2, r1
 8004978:	6139      	str	r1, [r7, #16]
 800497a:	4649      	mov	r1, r9
 800497c:	414b      	adcs	r3, r1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	f04f 0200 	mov.w	r2, #0
 8004984:	f04f 0300 	mov.w	r3, #0
 8004988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800498c:	4659      	mov	r1, fp
 800498e:	00cb      	lsls	r3, r1, #3
 8004990:	4651      	mov	r1, sl
 8004992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004996:	4651      	mov	r1, sl
 8004998:	00ca      	lsls	r2, r1, #3
 800499a:	4610      	mov	r0, r2
 800499c:	4619      	mov	r1, r3
 800499e:	4603      	mov	r3, r0
 80049a0:	4642      	mov	r2, r8
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80049a8:	464b      	mov	r3, r9
 80049aa:	460a      	mov	r2, r1
 80049ac:	eb42 0303 	adc.w	r3, r2, r3
 80049b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80049be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80049c0:	f04f 0200 	mov.w	r2, #0
 80049c4:	f04f 0300 	mov.w	r3, #0
 80049c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80049cc:	4649      	mov	r1, r9
 80049ce:	008b      	lsls	r3, r1, #2
 80049d0:	4641      	mov	r1, r8
 80049d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d6:	4641      	mov	r1, r8
 80049d8:	008a      	lsls	r2, r1, #2
 80049da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80049de:	f7fb fc4f 	bl	8000280 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <UART_SetConfig+0x4e4>)
 80049e8:	fba3 1302 	umull	r1, r3, r3, r2
 80049ec:	095b      	lsrs	r3, r3, #5
 80049ee:	2164      	movs	r1, #100	; 0x64
 80049f0:	fb01 f303 	mul.w	r3, r1, r3
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	3332      	adds	r3, #50	; 0x32
 80049fa:	4a34      	ldr	r2, [pc, #208]	; (8004acc <UART_SetConfig+0x4e4>)
 80049fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004a00:	095b      	lsrs	r3, r3, #5
 8004a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a06:	441c      	add	r4, r3
 8004a08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a10:	677a      	str	r2, [r7, #116]	; 0x74
 8004a12:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a16:	4642      	mov	r2, r8
 8004a18:	464b      	mov	r3, r9
 8004a1a:	1891      	adds	r1, r2, r2
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	415b      	adcs	r3, r3
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a26:	4641      	mov	r1, r8
 8004a28:	1851      	adds	r1, r2, r1
 8004a2a:	6039      	str	r1, [r7, #0]
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	414b      	adcs	r3, r1
 8004a30:	607b      	str	r3, [r7, #4]
 8004a32:	f04f 0200 	mov.w	r2, #0
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a3e:	4659      	mov	r1, fp
 8004a40:	00cb      	lsls	r3, r1, #3
 8004a42:	4651      	mov	r1, sl
 8004a44:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a48:	4651      	mov	r1, sl
 8004a4a:	00ca      	lsls	r2, r1, #3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4603      	mov	r3, r0
 8004a52:	4642      	mov	r2, r8
 8004a54:	189b      	adds	r3, r3, r2
 8004a56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a58:	464b      	mov	r3, r9
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a6c:	667a      	str	r2, [r7, #100]	; 0x64
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	f04f 0300 	mov.w	r3, #0
 8004a76:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	008b      	lsls	r3, r1, #2
 8004a7e:	4641      	mov	r1, r8
 8004a80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a84:	4641      	mov	r1, r8
 8004a86:	008a      	lsls	r2, r1, #2
 8004a88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a8c:	f7fb fbf8 	bl	8000280 <__aeabi_uldivmod>
 8004a90:	4602      	mov	r2, r0
 8004a92:	460b      	mov	r3, r1
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <UART_SetConfig+0x4e4>)
 8004a96:	fba3 1302 	umull	r1, r3, r3, r2
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	2164      	movs	r1, #100	; 0x64
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	3332      	adds	r3, #50	; 0x32
 8004aa8:	4a08      	ldr	r2, [pc, #32]	; (8004acc <UART_SetConfig+0x4e4>)
 8004aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4422      	add	r2, r4
 8004abc:	609a      	str	r2, [r3, #8]
}
 8004abe:	bf00      	nop
 8004ac0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aca:	bf00      	nop
 8004acc:	51eb851f 	.word	0x51eb851f

08004ad0 <__errno>:
 8004ad0:	4b01      	ldr	r3, [pc, #4]	; (8004ad8 <__errno+0x8>)
 8004ad2:	6818      	ldr	r0, [r3, #0]
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	20000010 	.word	0x20000010

08004adc <__libc_init_array>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4d0d      	ldr	r5, [pc, #52]	; (8004b14 <__libc_init_array+0x38>)
 8004ae0:	4c0d      	ldr	r4, [pc, #52]	; (8004b18 <__libc_init_array+0x3c>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	2600      	movs	r6, #0
 8004ae8:	42a6      	cmp	r6, r4
 8004aea:	d109      	bne.n	8004b00 <__libc_init_array+0x24>
 8004aec:	4d0b      	ldr	r5, [pc, #44]	; (8004b1c <__libc_init_array+0x40>)
 8004aee:	4c0c      	ldr	r4, [pc, #48]	; (8004b20 <__libc_init_array+0x44>)
 8004af0:	f000 fca2 	bl	8005438 <_init>
 8004af4:	1b64      	subs	r4, r4, r5
 8004af6:	10a4      	asrs	r4, r4, #2
 8004af8:	2600      	movs	r6, #0
 8004afa:	42a6      	cmp	r6, r4
 8004afc:	d105      	bne.n	8004b0a <__libc_init_array+0x2e>
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
 8004b00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b04:	4798      	blx	r3
 8004b06:	3601      	adds	r6, #1
 8004b08:	e7ee      	b.n	8004ae8 <__libc_init_array+0xc>
 8004b0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b0e:	4798      	blx	r3
 8004b10:	3601      	adds	r6, #1
 8004b12:	e7f2      	b.n	8004afa <__libc_init_array+0x1e>
 8004b14:	080054d8 	.word	0x080054d8
 8004b18:	080054d8 	.word	0x080054d8
 8004b1c:	080054d8 	.word	0x080054d8
 8004b20:	080054dc 	.word	0x080054dc

08004b24 <memset>:
 8004b24:	4402      	add	r2, r0
 8004b26:	4603      	mov	r3, r0
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d100      	bne.n	8004b2e <memset+0xa>
 8004b2c:	4770      	bx	lr
 8004b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b32:	e7f9      	b.n	8004b28 <memset+0x4>

08004b34 <sniprintf>:
 8004b34:	b40c      	push	{r2, r3}
 8004b36:	b530      	push	{r4, r5, lr}
 8004b38:	4b17      	ldr	r3, [pc, #92]	; (8004b98 <sniprintf+0x64>)
 8004b3a:	1e0c      	subs	r4, r1, #0
 8004b3c:	681d      	ldr	r5, [r3, #0]
 8004b3e:	b09d      	sub	sp, #116	; 0x74
 8004b40:	da08      	bge.n	8004b54 <sniprintf+0x20>
 8004b42:	238b      	movs	r3, #139	; 0x8b
 8004b44:	602b      	str	r3, [r5, #0]
 8004b46:	f04f 30ff 	mov.w	r0, #4294967295
 8004b4a:	b01d      	add	sp, #116	; 0x74
 8004b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b50:	b002      	add	sp, #8
 8004b52:	4770      	bx	lr
 8004b54:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004b58:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004b5c:	bf14      	ite	ne
 8004b5e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004b62:	4623      	moveq	r3, r4
 8004b64:	9304      	str	r3, [sp, #16]
 8004b66:	9307      	str	r3, [sp, #28]
 8004b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b6c:	9002      	str	r0, [sp, #8]
 8004b6e:	9006      	str	r0, [sp, #24]
 8004b70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004b74:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b76:	ab21      	add	r3, sp, #132	; 0x84
 8004b78:	a902      	add	r1, sp, #8
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	f000 f869 	bl	8004c54 <_svfiprintf_r>
 8004b82:	1c43      	adds	r3, r0, #1
 8004b84:	bfbc      	itt	lt
 8004b86:	238b      	movlt	r3, #139	; 0x8b
 8004b88:	602b      	strlt	r3, [r5, #0]
 8004b8a:	2c00      	cmp	r4, #0
 8004b8c:	d0dd      	beq.n	8004b4a <sniprintf+0x16>
 8004b8e:	9b02      	ldr	r3, [sp, #8]
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
 8004b94:	e7d9      	b.n	8004b4a <sniprintf+0x16>
 8004b96:	bf00      	nop
 8004b98:	20000010 	.word	0x20000010

08004b9c <__ssputs_r>:
 8004b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba0:	688e      	ldr	r6, [r1, #8]
 8004ba2:	429e      	cmp	r6, r3
 8004ba4:	4682      	mov	sl, r0
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	4690      	mov	r8, r2
 8004baa:	461f      	mov	r7, r3
 8004bac:	d838      	bhi.n	8004c20 <__ssputs_r+0x84>
 8004bae:	898a      	ldrh	r2, [r1, #12]
 8004bb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bb4:	d032      	beq.n	8004c1c <__ssputs_r+0x80>
 8004bb6:	6825      	ldr	r5, [r4, #0]
 8004bb8:	6909      	ldr	r1, [r1, #16]
 8004bba:	eba5 0901 	sub.w	r9, r5, r1
 8004bbe:	6965      	ldr	r5, [r4, #20]
 8004bc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004bc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004bc8:	3301      	adds	r3, #1
 8004bca:	444b      	add	r3, r9
 8004bcc:	106d      	asrs	r5, r5, #1
 8004bce:	429d      	cmp	r5, r3
 8004bd0:	bf38      	it	cc
 8004bd2:	461d      	movcc	r5, r3
 8004bd4:	0553      	lsls	r3, r2, #21
 8004bd6:	d531      	bpl.n	8004c3c <__ssputs_r+0xa0>
 8004bd8:	4629      	mov	r1, r5
 8004bda:	f000 fb63 	bl	80052a4 <_malloc_r>
 8004bde:	4606      	mov	r6, r0
 8004be0:	b950      	cbnz	r0, 8004bf8 <__ssputs_r+0x5c>
 8004be2:	230c      	movs	r3, #12
 8004be4:	f8ca 3000 	str.w	r3, [sl]
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf8:	6921      	ldr	r1, [r4, #16]
 8004bfa:	464a      	mov	r2, r9
 8004bfc:	f000 fabe 	bl	800517c <memcpy>
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	6126      	str	r6, [r4, #16]
 8004c0e:	6165      	str	r5, [r4, #20]
 8004c10:	444e      	add	r6, r9
 8004c12:	eba5 0509 	sub.w	r5, r5, r9
 8004c16:	6026      	str	r6, [r4, #0]
 8004c18:	60a5      	str	r5, [r4, #8]
 8004c1a:	463e      	mov	r6, r7
 8004c1c:	42be      	cmp	r6, r7
 8004c1e:	d900      	bls.n	8004c22 <__ssputs_r+0x86>
 8004c20:	463e      	mov	r6, r7
 8004c22:	6820      	ldr	r0, [r4, #0]
 8004c24:	4632      	mov	r2, r6
 8004c26:	4641      	mov	r1, r8
 8004c28:	f000 fab6 	bl	8005198 <memmove>
 8004c2c:	68a3      	ldr	r3, [r4, #8]
 8004c2e:	1b9b      	subs	r3, r3, r6
 8004c30:	60a3      	str	r3, [r4, #8]
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	4433      	add	r3, r6
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	2000      	movs	r0, #0
 8004c3a:	e7db      	b.n	8004bf4 <__ssputs_r+0x58>
 8004c3c:	462a      	mov	r2, r5
 8004c3e:	f000 fba5 	bl	800538c <_realloc_r>
 8004c42:	4606      	mov	r6, r0
 8004c44:	2800      	cmp	r0, #0
 8004c46:	d1e1      	bne.n	8004c0c <__ssputs_r+0x70>
 8004c48:	6921      	ldr	r1, [r4, #16]
 8004c4a:	4650      	mov	r0, sl
 8004c4c:	f000 fabe 	bl	80051cc <_free_r>
 8004c50:	e7c7      	b.n	8004be2 <__ssputs_r+0x46>
	...

08004c54 <_svfiprintf_r>:
 8004c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c58:	4698      	mov	r8, r3
 8004c5a:	898b      	ldrh	r3, [r1, #12]
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	b09d      	sub	sp, #116	; 0x74
 8004c60:	4607      	mov	r7, r0
 8004c62:	460d      	mov	r5, r1
 8004c64:	4614      	mov	r4, r2
 8004c66:	d50e      	bpl.n	8004c86 <_svfiprintf_r+0x32>
 8004c68:	690b      	ldr	r3, [r1, #16]
 8004c6a:	b963      	cbnz	r3, 8004c86 <_svfiprintf_r+0x32>
 8004c6c:	2140      	movs	r1, #64	; 0x40
 8004c6e:	f000 fb19 	bl	80052a4 <_malloc_r>
 8004c72:	6028      	str	r0, [r5, #0]
 8004c74:	6128      	str	r0, [r5, #16]
 8004c76:	b920      	cbnz	r0, 8004c82 <_svfiprintf_r+0x2e>
 8004c78:	230c      	movs	r3, #12
 8004c7a:	603b      	str	r3, [r7, #0]
 8004c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c80:	e0d1      	b.n	8004e26 <_svfiprintf_r+0x1d2>
 8004c82:	2340      	movs	r3, #64	; 0x40
 8004c84:	616b      	str	r3, [r5, #20]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9309      	str	r3, [sp, #36]	; 0x24
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c90:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c94:	2330      	movs	r3, #48	; 0x30
 8004c96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004e40 <_svfiprintf_r+0x1ec>
 8004c9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c9e:	f04f 0901 	mov.w	r9, #1
 8004ca2:	4623      	mov	r3, r4
 8004ca4:	469a      	mov	sl, r3
 8004ca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004caa:	b10a      	cbz	r2, 8004cb0 <_svfiprintf_r+0x5c>
 8004cac:	2a25      	cmp	r2, #37	; 0x25
 8004cae:	d1f9      	bne.n	8004ca4 <_svfiprintf_r+0x50>
 8004cb0:	ebba 0b04 	subs.w	fp, sl, r4
 8004cb4:	d00b      	beq.n	8004cce <_svfiprintf_r+0x7a>
 8004cb6:	465b      	mov	r3, fp
 8004cb8:	4622      	mov	r2, r4
 8004cba:	4629      	mov	r1, r5
 8004cbc:	4638      	mov	r0, r7
 8004cbe:	f7ff ff6d 	bl	8004b9c <__ssputs_r>
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	f000 80aa 	beq.w	8004e1c <_svfiprintf_r+0x1c8>
 8004cc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cca:	445a      	add	r2, fp
 8004ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cce:	f89a 3000 	ldrb.w	r3, [sl]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80a2 	beq.w	8004e1c <_svfiprintf_r+0x1c8>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f04f 32ff 	mov.w	r2, #4294967295
 8004cde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ce2:	f10a 0a01 	add.w	sl, sl, #1
 8004ce6:	9304      	str	r3, [sp, #16]
 8004ce8:	9307      	str	r3, [sp, #28]
 8004cea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cee:	931a      	str	r3, [sp, #104]	; 0x68
 8004cf0:	4654      	mov	r4, sl
 8004cf2:	2205      	movs	r2, #5
 8004cf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cf8:	4851      	ldr	r0, [pc, #324]	; (8004e40 <_svfiprintf_r+0x1ec>)
 8004cfa:	f7fb fa71 	bl	80001e0 <memchr>
 8004cfe:	9a04      	ldr	r2, [sp, #16]
 8004d00:	b9d8      	cbnz	r0, 8004d3a <_svfiprintf_r+0xe6>
 8004d02:	06d0      	lsls	r0, r2, #27
 8004d04:	bf44      	itt	mi
 8004d06:	2320      	movmi	r3, #32
 8004d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d0c:	0711      	lsls	r1, r2, #28
 8004d0e:	bf44      	itt	mi
 8004d10:	232b      	movmi	r3, #43	; 0x2b
 8004d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d16:	f89a 3000 	ldrb.w	r3, [sl]
 8004d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d1c:	d015      	beq.n	8004d4a <_svfiprintf_r+0xf6>
 8004d1e:	9a07      	ldr	r2, [sp, #28]
 8004d20:	4654      	mov	r4, sl
 8004d22:	2000      	movs	r0, #0
 8004d24:	f04f 0c0a 	mov.w	ip, #10
 8004d28:	4621      	mov	r1, r4
 8004d2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d2e:	3b30      	subs	r3, #48	; 0x30
 8004d30:	2b09      	cmp	r3, #9
 8004d32:	d94e      	bls.n	8004dd2 <_svfiprintf_r+0x17e>
 8004d34:	b1b0      	cbz	r0, 8004d64 <_svfiprintf_r+0x110>
 8004d36:	9207      	str	r2, [sp, #28]
 8004d38:	e014      	b.n	8004d64 <_svfiprintf_r+0x110>
 8004d3a:	eba0 0308 	sub.w	r3, r0, r8
 8004d3e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d42:	4313      	orrs	r3, r2
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	46a2      	mov	sl, r4
 8004d48:	e7d2      	b.n	8004cf0 <_svfiprintf_r+0x9c>
 8004d4a:	9b03      	ldr	r3, [sp, #12]
 8004d4c:	1d19      	adds	r1, r3, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	9103      	str	r1, [sp, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	bfbb      	ittet	lt
 8004d56:	425b      	neglt	r3, r3
 8004d58:	f042 0202 	orrlt.w	r2, r2, #2
 8004d5c:	9307      	strge	r3, [sp, #28]
 8004d5e:	9307      	strlt	r3, [sp, #28]
 8004d60:	bfb8      	it	lt
 8004d62:	9204      	strlt	r2, [sp, #16]
 8004d64:	7823      	ldrb	r3, [r4, #0]
 8004d66:	2b2e      	cmp	r3, #46	; 0x2e
 8004d68:	d10c      	bne.n	8004d84 <_svfiprintf_r+0x130>
 8004d6a:	7863      	ldrb	r3, [r4, #1]
 8004d6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004d6e:	d135      	bne.n	8004ddc <_svfiprintf_r+0x188>
 8004d70:	9b03      	ldr	r3, [sp, #12]
 8004d72:	1d1a      	adds	r2, r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	9203      	str	r2, [sp, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bfb8      	it	lt
 8004d7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d80:	3402      	adds	r4, #2
 8004d82:	9305      	str	r3, [sp, #20]
 8004d84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e50 <_svfiprintf_r+0x1fc>
 8004d88:	7821      	ldrb	r1, [r4, #0]
 8004d8a:	2203      	movs	r2, #3
 8004d8c:	4650      	mov	r0, sl
 8004d8e:	f7fb fa27 	bl	80001e0 <memchr>
 8004d92:	b140      	cbz	r0, 8004da6 <_svfiprintf_r+0x152>
 8004d94:	2340      	movs	r3, #64	; 0x40
 8004d96:	eba0 000a 	sub.w	r0, r0, sl
 8004d9a:	fa03 f000 	lsl.w	r0, r3, r0
 8004d9e:	9b04      	ldr	r3, [sp, #16]
 8004da0:	4303      	orrs	r3, r0
 8004da2:	3401      	adds	r4, #1
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004daa:	4826      	ldr	r0, [pc, #152]	; (8004e44 <_svfiprintf_r+0x1f0>)
 8004dac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004db0:	2206      	movs	r2, #6
 8004db2:	f7fb fa15 	bl	80001e0 <memchr>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d038      	beq.n	8004e2c <_svfiprintf_r+0x1d8>
 8004dba:	4b23      	ldr	r3, [pc, #140]	; (8004e48 <_svfiprintf_r+0x1f4>)
 8004dbc:	bb1b      	cbnz	r3, 8004e06 <_svfiprintf_r+0x1b2>
 8004dbe:	9b03      	ldr	r3, [sp, #12]
 8004dc0:	3307      	adds	r3, #7
 8004dc2:	f023 0307 	bic.w	r3, r3, #7
 8004dc6:	3308      	adds	r3, #8
 8004dc8:	9303      	str	r3, [sp, #12]
 8004dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dcc:	4433      	add	r3, r6
 8004dce:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd0:	e767      	b.n	8004ca2 <_svfiprintf_r+0x4e>
 8004dd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	2001      	movs	r0, #1
 8004dda:	e7a5      	b.n	8004d28 <_svfiprintf_r+0xd4>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	3401      	adds	r4, #1
 8004de0:	9305      	str	r3, [sp, #20]
 8004de2:	4619      	mov	r1, r3
 8004de4:	f04f 0c0a 	mov.w	ip, #10
 8004de8:	4620      	mov	r0, r4
 8004dea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dee:	3a30      	subs	r2, #48	; 0x30
 8004df0:	2a09      	cmp	r2, #9
 8004df2:	d903      	bls.n	8004dfc <_svfiprintf_r+0x1a8>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d0c5      	beq.n	8004d84 <_svfiprintf_r+0x130>
 8004df8:	9105      	str	r1, [sp, #20]
 8004dfa:	e7c3      	b.n	8004d84 <_svfiprintf_r+0x130>
 8004dfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e00:	4604      	mov	r4, r0
 8004e02:	2301      	movs	r3, #1
 8004e04:	e7f0      	b.n	8004de8 <_svfiprintf_r+0x194>
 8004e06:	ab03      	add	r3, sp, #12
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	462a      	mov	r2, r5
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <_svfiprintf_r+0x1f8>)
 8004e0e:	a904      	add	r1, sp, #16
 8004e10:	4638      	mov	r0, r7
 8004e12:	f3af 8000 	nop.w
 8004e16:	1c42      	adds	r2, r0, #1
 8004e18:	4606      	mov	r6, r0
 8004e1a:	d1d6      	bne.n	8004dca <_svfiprintf_r+0x176>
 8004e1c:	89ab      	ldrh	r3, [r5, #12]
 8004e1e:	065b      	lsls	r3, r3, #25
 8004e20:	f53f af2c 	bmi.w	8004c7c <_svfiprintf_r+0x28>
 8004e24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e26:	b01d      	add	sp, #116	; 0x74
 8004e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2c:	ab03      	add	r3, sp, #12
 8004e2e:	9300      	str	r3, [sp, #0]
 8004e30:	462a      	mov	r2, r5
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <_svfiprintf_r+0x1f8>)
 8004e34:	a904      	add	r1, sp, #16
 8004e36:	4638      	mov	r0, r7
 8004e38:	f000 f87a 	bl	8004f30 <_printf_i>
 8004e3c:	e7eb      	b.n	8004e16 <_svfiprintf_r+0x1c2>
 8004e3e:	bf00      	nop
 8004e40:	0800549c 	.word	0x0800549c
 8004e44:	080054a6 	.word	0x080054a6
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	08004b9d 	.word	0x08004b9d
 8004e50:	080054a2 	.word	0x080054a2

08004e54 <_printf_common>:
 8004e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	4616      	mov	r6, r2
 8004e5a:	4699      	mov	r9, r3
 8004e5c:	688a      	ldr	r2, [r1, #8]
 8004e5e:	690b      	ldr	r3, [r1, #16]
 8004e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e64:	4293      	cmp	r3, r2
 8004e66:	bfb8      	it	lt
 8004e68:	4613      	movlt	r3, r2
 8004e6a:	6033      	str	r3, [r6, #0]
 8004e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e70:	4607      	mov	r7, r0
 8004e72:	460c      	mov	r4, r1
 8004e74:	b10a      	cbz	r2, 8004e7a <_printf_common+0x26>
 8004e76:	3301      	adds	r3, #1
 8004e78:	6033      	str	r3, [r6, #0]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	0699      	lsls	r1, r3, #26
 8004e7e:	bf42      	ittt	mi
 8004e80:	6833      	ldrmi	r3, [r6, #0]
 8004e82:	3302      	addmi	r3, #2
 8004e84:	6033      	strmi	r3, [r6, #0]
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	f015 0506 	ands.w	r5, r5, #6
 8004e8c:	d106      	bne.n	8004e9c <_printf_common+0x48>
 8004e8e:	f104 0a19 	add.w	sl, r4, #25
 8004e92:	68e3      	ldr	r3, [r4, #12]
 8004e94:	6832      	ldr	r2, [r6, #0]
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	42ab      	cmp	r3, r5
 8004e9a:	dc26      	bgt.n	8004eea <_printf_common+0x96>
 8004e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ea0:	1e13      	subs	r3, r2, #0
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	bf18      	it	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	0692      	lsls	r2, r2, #26
 8004eaa:	d42b      	bmi.n	8004f04 <_printf_common+0xb0>
 8004eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	47c0      	blx	r8
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d01e      	beq.n	8004ef8 <_printf_common+0xa4>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	68e5      	ldr	r5, [r4, #12]
 8004ebe:	6832      	ldr	r2, [r6, #0]
 8004ec0:	f003 0306 	and.w	r3, r3, #6
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	bf08      	it	eq
 8004ec8:	1aad      	subeq	r5, r5, r2
 8004eca:	68a3      	ldr	r3, [r4, #8]
 8004ecc:	6922      	ldr	r2, [r4, #16]
 8004ece:	bf0c      	ite	eq
 8004ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ed4:	2500      	movne	r5, #0
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	bfc4      	itt	gt
 8004eda:	1a9b      	subgt	r3, r3, r2
 8004edc:	18ed      	addgt	r5, r5, r3
 8004ede:	2600      	movs	r6, #0
 8004ee0:	341a      	adds	r4, #26
 8004ee2:	42b5      	cmp	r5, r6
 8004ee4:	d11a      	bne.n	8004f1c <_printf_common+0xc8>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	e008      	b.n	8004efc <_printf_common+0xa8>
 8004eea:	2301      	movs	r3, #1
 8004eec:	4652      	mov	r2, sl
 8004eee:	4649      	mov	r1, r9
 8004ef0:	4638      	mov	r0, r7
 8004ef2:	47c0      	blx	r8
 8004ef4:	3001      	adds	r0, #1
 8004ef6:	d103      	bne.n	8004f00 <_printf_common+0xac>
 8004ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	3501      	adds	r5, #1
 8004f02:	e7c6      	b.n	8004e92 <_printf_common+0x3e>
 8004f04:	18e1      	adds	r1, r4, r3
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	2030      	movs	r0, #48	; 0x30
 8004f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f0e:	4422      	add	r2, r4
 8004f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f18:	3302      	adds	r3, #2
 8004f1a:	e7c7      	b.n	8004eac <_printf_common+0x58>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	4622      	mov	r2, r4
 8004f20:	4649      	mov	r1, r9
 8004f22:	4638      	mov	r0, r7
 8004f24:	47c0      	blx	r8
 8004f26:	3001      	adds	r0, #1
 8004f28:	d0e6      	beq.n	8004ef8 <_printf_common+0xa4>
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7d9      	b.n	8004ee2 <_printf_common+0x8e>
	...

08004f30 <_printf_i>:
 8004f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f34:	7e0f      	ldrb	r7, [r1, #24]
 8004f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f38:	2f78      	cmp	r7, #120	; 0x78
 8004f3a:	4691      	mov	r9, r2
 8004f3c:	4680      	mov	r8, r0
 8004f3e:	460c      	mov	r4, r1
 8004f40:	469a      	mov	sl, r3
 8004f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f46:	d807      	bhi.n	8004f58 <_printf_i+0x28>
 8004f48:	2f62      	cmp	r7, #98	; 0x62
 8004f4a:	d80a      	bhi.n	8004f62 <_printf_i+0x32>
 8004f4c:	2f00      	cmp	r7, #0
 8004f4e:	f000 80d8 	beq.w	8005102 <_printf_i+0x1d2>
 8004f52:	2f58      	cmp	r7, #88	; 0x58
 8004f54:	f000 80a3 	beq.w	800509e <_printf_i+0x16e>
 8004f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f60:	e03a      	b.n	8004fd8 <_printf_i+0xa8>
 8004f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f66:	2b15      	cmp	r3, #21
 8004f68:	d8f6      	bhi.n	8004f58 <_printf_i+0x28>
 8004f6a:	a101      	add	r1, pc, #4	; (adr r1, 8004f70 <_printf_i+0x40>)
 8004f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f70:	08004fc9 	.word	0x08004fc9
 8004f74:	08004fdd 	.word	0x08004fdd
 8004f78:	08004f59 	.word	0x08004f59
 8004f7c:	08004f59 	.word	0x08004f59
 8004f80:	08004f59 	.word	0x08004f59
 8004f84:	08004f59 	.word	0x08004f59
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08004f59 	.word	0x08004f59
 8004f90:	08004f59 	.word	0x08004f59
 8004f94:	08004f59 	.word	0x08004f59
 8004f98:	08004f59 	.word	0x08004f59
 8004f9c:	080050e9 	.word	0x080050e9
 8004fa0:	0800500d 	.word	0x0800500d
 8004fa4:	080050cb 	.word	0x080050cb
 8004fa8:	08004f59 	.word	0x08004f59
 8004fac:	08004f59 	.word	0x08004f59
 8004fb0:	0800510b 	.word	0x0800510b
 8004fb4:	08004f59 	.word	0x08004f59
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f59 	.word	0x08004f59
 8004fc0:	08004f59 	.word	0x08004f59
 8004fc4:	080050d3 	.word	0x080050d3
 8004fc8:	682b      	ldr	r3, [r5, #0]
 8004fca:	1d1a      	adds	r2, r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	602a      	str	r2, [r5, #0]
 8004fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0a3      	b.n	8005124 <_printf_i+0x1f4>
 8004fdc:	6820      	ldr	r0, [r4, #0]
 8004fde:	6829      	ldr	r1, [r5, #0]
 8004fe0:	0606      	lsls	r6, r0, #24
 8004fe2:	f101 0304 	add.w	r3, r1, #4
 8004fe6:	d50a      	bpl.n	8004ffe <_printf_i+0xce>
 8004fe8:	680e      	ldr	r6, [r1, #0]
 8004fea:	602b      	str	r3, [r5, #0]
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	da03      	bge.n	8004ff8 <_printf_i+0xc8>
 8004ff0:	232d      	movs	r3, #45	; 0x2d
 8004ff2:	4276      	negs	r6, r6
 8004ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff8:	485e      	ldr	r0, [pc, #376]	; (8005174 <_printf_i+0x244>)
 8004ffa:	230a      	movs	r3, #10
 8004ffc:	e019      	b.n	8005032 <_printf_i+0x102>
 8004ffe:	680e      	ldr	r6, [r1, #0]
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005006:	bf18      	it	ne
 8005008:	b236      	sxthne	r6, r6
 800500a:	e7ef      	b.n	8004fec <_printf_i+0xbc>
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	1d19      	adds	r1, r3, #4
 8005012:	6029      	str	r1, [r5, #0]
 8005014:	0601      	lsls	r1, r0, #24
 8005016:	d501      	bpl.n	800501c <_printf_i+0xec>
 8005018:	681e      	ldr	r6, [r3, #0]
 800501a:	e002      	b.n	8005022 <_printf_i+0xf2>
 800501c:	0646      	lsls	r6, r0, #25
 800501e:	d5fb      	bpl.n	8005018 <_printf_i+0xe8>
 8005020:	881e      	ldrh	r6, [r3, #0]
 8005022:	4854      	ldr	r0, [pc, #336]	; (8005174 <_printf_i+0x244>)
 8005024:	2f6f      	cmp	r7, #111	; 0x6f
 8005026:	bf0c      	ite	eq
 8005028:	2308      	moveq	r3, #8
 800502a:	230a      	movne	r3, #10
 800502c:	2100      	movs	r1, #0
 800502e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005032:	6865      	ldr	r5, [r4, #4]
 8005034:	60a5      	str	r5, [r4, #8]
 8005036:	2d00      	cmp	r5, #0
 8005038:	bfa2      	ittt	ge
 800503a:	6821      	ldrge	r1, [r4, #0]
 800503c:	f021 0104 	bicge.w	r1, r1, #4
 8005040:	6021      	strge	r1, [r4, #0]
 8005042:	b90e      	cbnz	r6, 8005048 <_printf_i+0x118>
 8005044:	2d00      	cmp	r5, #0
 8005046:	d04d      	beq.n	80050e4 <_printf_i+0x1b4>
 8005048:	4615      	mov	r5, r2
 800504a:	fbb6 f1f3 	udiv	r1, r6, r3
 800504e:	fb03 6711 	mls	r7, r3, r1, r6
 8005052:	5dc7      	ldrb	r7, [r0, r7]
 8005054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005058:	4637      	mov	r7, r6
 800505a:	42bb      	cmp	r3, r7
 800505c:	460e      	mov	r6, r1
 800505e:	d9f4      	bls.n	800504a <_printf_i+0x11a>
 8005060:	2b08      	cmp	r3, #8
 8005062:	d10b      	bne.n	800507c <_printf_i+0x14c>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	07de      	lsls	r6, r3, #31
 8005068:	d508      	bpl.n	800507c <_printf_i+0x14c>
 800506a:	6923      	ldr	r3, [r4, #16]
 800506c:	6861      	ldr	r1, [r4, #4]
 800506e:	4299      	cmp	r1, r3
 8005070:	bfde      	ittt	le
 8005072:	2330      	movle	r3, #48	; 0x30
 8005074:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005078:	f105 35ff 	addle.w	r5, r5, #4294967295
 800507c:	1b52      	subs	r2, r2, r5
 800507e:	6122      	str	r2, [r4, #16]
 8005080:	f8cd a000 	str.w	sl, [sp]
 8005084:	464b      	mov	r3, r9
 8005086:	aa03      	add	r2, sp, #12
 8005088:	4621      	mov	r1, r4
 800508a:	4640      	mov	r0, r8
 800508c:	f7ff fee2 	bl	8004e54 <_printf_common>
 8005090:	3001      	adds	r0, #1
 8005092:	d14c      	bne.n	800512e <_printf_i+0x1fe>
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	b004      	add	sp, #16
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509e:	4835      	ldr	r0, [pc, #212]	; (8005174 <_printf_i+0x244>)
 80050a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050a4:	6829      	ldr	r1, [r5, #0]
 80050a6:	6823      	ldr	r3, [r4, #0]
 80050a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80050ac:	6029      	str	r1, [r5, #0]
 80050ae:	061d      	lsls	r5, r3, #24
 80050b0:	d514      	bpl.n	80050dc <_printf_i+0x1ac>
 80050b2:	07df      	lsls	r7, r3, #31
 80050b4:	bf44      	itt	mi
 80050b6:	f043 0320 	orrmi.w	r3, r3, #32
 80050ba:	6023      	strmi	r3, [r4, #0]
 80050bc:	b91e      	cbnz	r6, 80050c6 <_printf_i+0x196>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	f023 0320 	bic.w	r3, r3, #32
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	2310      	movs	r3, #16
 80050c8:	e7b0      	b.n	800502c <_printf_i+0xfc>
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	f043 0320 	orr.w	r3, r3, #32
 80050d0:	6023      	str	r3, [r4, #0]
 80050d2:	2378      	movs	r3, #120	; 0x78
 80050d4:	4828      	ldr	r0, [pc, #160]	; (8005178 <_printf_i+0x248>)
 80050d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050da:	e7e3      	b.n	80050a4 <_printf_i+0x174>
 80050dc:	0659      	lsls	r1, r3, #25
 80050de:	bf48      	it	mi
 80050e0:	b2b6      	uxthmi	r6, r6
 80050e2:	e7e6      	b.n	80050b2 <_printf_i+0x182>
 80050e4:	4615      	mov	r5, r2
 80050e6:	e7bb      	b.n	8005060 <_printf_i+0x130>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	6826      	ldr	r6, [r4, #0]
 80050ec:	6961      	ldr	r1, [r4, #20]
 80050ee:	1d18      	adds	r0, r3, #4
 80050f0:	6028      	str	r0, [r5, #0]
 80050f2:	0635      	lsls	r5, r6, #24
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	d501      	bpl.n	80050fc <_printf_i+0x1cc>
 80050f8:	6019      	str	r1, [r3, #0]
 80050fa:	e002      	b.n	8005102 <_printf_i+0x1d2>
 80050fc:	0670      	lsls	r0, r6, #25
 80050fe:	d5fb      	bpl.n	80050f8 <_printf_i+0x1c8>
 8005100:	8019      	strh	r1, [r3, #0]
 8005102:	2300      	movs	r3, #0
 8005104:	6123      	str	r3, [r4, #16]
 8005106:	4615      	mov	r5, r2
 8005108:	e7ba      	b.n	8005080 <_printf_i+0x150>
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	1d1a      	adds	r2, r3, #4
 800510e:	602a      	str	r2, [r5, #0]
 8005110:	681d      	ldr	r5, [r3, #0]
 8005112:	6862      	ldr	r2, [r4, #4]
 8005114:	2100      	movs	r1, #0
 8005116:	4628      	mov	r0, r5
 8005118:	f7fb f862 	bl	80001e0 <memchr>
 800511c:	b108      	cbz	r0, 8005122 <_printf_i+0x1f2>
 800511e:	1b40      	subs	r0, r0, r5
 8005120:	6060      	str	r0, [r4, #4]
 8005122:	6863      	ldr	r3, [r4, #4]
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	2300      	movs	r3, #0
 8005128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800512c:	e7a8      	b.n	8005080 <_printf_i+0x150>
 800512e:	6923      	ldr	r3, [r4, #16]
 8005130:	462a      	mov	r2, r5
 8005132:	4649      	mov	r1, r9
 8005134:	4640      	mov	r0, r8
 8005136:	47d0      	blx	sl
 8005138:	3001      	adds	r0, #1
 800513a:	d0ab      	beq.n	8005094 <_printf_i+0x164>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	079b      	lsls	r3, r3, #30
 8005140:	d413      	bmi.n	800516a <_printf_i+0x23a>
 8005142:	68e0      	ldr	r0, [r4, #12]
 8005144:	9b03      	ldr	r3, [sp, #12]
 8005146:	4298      	cmp	r0, r3
 8005148:	bfb8      	it	lt
 800514a:	4618      	movlt	r0, r3
 800514c:	e7a4      	b.n	8005098 <_printf_i+0x168>
 800514e:	2301      	movs	r3, #1
 8005150:	4632      	mov	r2, r6
 8005152:	4649      	mov	r1, r9
 8005154:	4640      	mov	r0, r8
 8005156:	47d0      	blx	sl
 8005158:	3001      	adds	r0, #1
 800515a:	d09b      	beq.n	8005094 <_printf_i+0x164>
 800515c:	3501      	adds	r5, #1
 800515e:	68e3      	ldr	r3, [r4, #12]
 8005160:	9903      	ldr	r1, [sp, #12]
 8005162:	1a5b      	subs	r3, r3, r1
 8005164:	42ab      	cmp	r3, r5
 8005166:	dcf2      	bgt.n	800514e <_printf_i+0x21e>
 8005168:	e7eb      	b.n	8005142 <_printf_i+0x212>
 800516a:	2500      	movs	r5, #0
 800516c:	f104 0619 	add.w	r6, r4, #25
 8005170:	e7f5      	b.n	800515e <_printf_i+0x22e>
 8005172:	bf00      	nop
 8005174:	080054ad 	.word	0x080054ad
 8005178:	080054be 	.word	0x080054be

0800517c <memcpy>:
 800517c:	440a      	add	r2, r1
 800517e:	4291      	cmp	r1, r2
 8005180:	f100 33ff 	add.w	r3, r0, #4294967295
 8005184:	d100      	bne.n	8005188 <memcpy+0xc>
 8005186:	4770      	bx	lr
 8005188:	b510      	push	{r4, lr}
 800518a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800518e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005192:	4291      	cmp	r1, r2
 8005194:	d1f9      	bne.n	800518a <memcpy+0xe>
 8005196:	bd10      	pop	{r4, pc}

08005198 <memmove>:
 8005198:	4288      	cmp	r0, r1
 800519a:	b510      	push	{r4, lr}
 800519c:	eb01 0402 	add.w	r4, r1, r2
 80051a0:	d902      	bls.n	80051a8 <memmove+0x10>
 80051a2:	4284      	cmp	r4, r0
 80051a4:	4623      	mov	r3, r4
 80051a6:	d807      	bhi.n	80051b8 <memmove+0x20>
 80051a8:	1e43      	subs	r3, r0, #1
 80051aa:	42a1      	cmp	r1, r4
 80051ac:	d008      	beq.n	80051c0 <memmove+0x28>
 80051ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051b6:	e7f8      	b.n	80051aa <memmove+0x12>
 80051b8:	4402      	add	r2, r0
 80051ba:	4601      	mov	r1, r0
 80051bc:	428a      	cmp	r2, r1
 80051be:	d100      	bne.n	80051c2 <memmove+0x2a>
 80051c0:	bd10      	pop	{r4, pc}
 80051c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051ca:	e7f7      	b.n	80051bc <memmove+0x24>

080051cc <_free_r>:
 80051cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051ce:	2900      	cmp	r1, #0
 80051d0:	d044      	beq.n	800525c <_free_r+0x90>
 80051d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d6:	9001      	str	r0, [sp, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f1a1 0404 	sub.w	r4, r1, #4
 80051de:	bfb8      	it	lt
 80051e0:	18e4      	addlt	r4, r4, r3
 80051e2:	f000 f913 	bl	800540c <__malloc_lock>
 80051e6:	4a1e      	ldr	r2, [pc, #120]	; (8005260 <_free_r+0x94>)
 80051e8:	9801      	ldr	r0, [sp, #4]
 80051ea:	6813      	ldr	r3, [r2, #0]
 80051ec:	b933      	cbnz	r3, 80051fc <_free_r+0x30>
 80051ee:	6063      	str	r3, [r4, #4]
 80051f0:	6014      	str	r4, [r2, #0]
 80051f2:	b003      	add	sp, #12
 80051f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051f8:	f000 b90e 	b.w	8005418 <__malloc_unlock>
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d908      	bls.n	8005212 <_free_r+0x46>
 8005200:	6825      	ldr	r5, [r4, #0]
 8005202:	1961      	adds	r1, r4, r5
 8005204:	428b      	cmp	r3, r1
 8005206:	bf01      	itttt	eq
 8005208:	6819      	ldreq	r1, [r3, #0]
 800520a:	685b      	ldreq	r3, [r3, #4]
 800520c:	1949      	addeq	r1, r1, r5
 800520e:	6021      	streq	r1, [r4, #0]
 8005210:	e7ed      	b.n	80051ee <_free_r+0x22>
 8005212:	461a      	mov	r2, r3
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	b10b      	cbz	r3, 800521c <_free_r+0x50>
 8005218:	42a3      	cmp	r3, r4
 800521a:	d9fa      	bls.n	8005212 <_free_r+0x46>
 800521c:	6811      	ldr	r1, [r2, #0]
 800521e:	1855      	adds	r5, r2, r1
 8005220:	42a5      	cmp	r5, r4
 8005222:	d10b      	bne.n	800523c <_free_r+0x70>
 8005224:	6824      	ldr	r4, [r4, #0]
 8005226:	4421      	add	r1, r4
 8005228:	1854      	adds	r4, r2, r1
 800522a:	42a3      	cmp	r3, r4
 800522c:	6011      	str	r1, [r2, #0]
 800522e:	d1e0      	bne.n	80051f2 <_free_r+0x26>
 8005230:	681c      	ldr	r4, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	6053      	str	r3, [r2, #4]
 8005236:	4421      	add	r1, r4
 8005238:	6011      	str	r1, [r2, #0]
 800523a:	e7da      	b.n	80051f2 <_free_r+0x26>
 800523c:	d902      	bls.n	8005244 <_free_r+0x78>
 800523e:	230c      	movs	r3, #12
 8005240:	6003      	str	r3, [r0, #0]
 8005242:	e7d6      	b.n	80051f2 <_free_r+0x26>
 8005244:	6825      	ldr	r5, [r4, #0]
 8005246:	1961      	adds	r1, r4, r5
 8005248:	428b      	cmp	r3, r1
 800524a:	bf04      	itt	eq
 800524c:	6819      	ldreq	r1, [r3, #0]
 800524e:	685b      	ldreq	r3, [r3, #4]
 8005250:	6063      	str	r3, [r4, #4]
 8005252:	bf04      	itt	eq
 8005254:	1949      	addeq	r1, r1, r5
 8005256:	6021      	streq	r1, [r4, #0]
 8005258:	6054      	str	r4, [r2, #4]
 800525a:	e7ca      	b.n	80051f2 <_free_r+0x26>
 800525c:	b003      	add	sp, #12
 800525e:	bd30      	pop	{r4, r5, pc}
 8005260:	200003c4 	.word	0x200003c4

08005264 <sbrk_aligned>:
 8005264:	b570      	push	{r4, r5, r6, lr}
 8005266:	4e0e      	ldr	r6, [pc, #56]	; (80052a0 <sbrk_aligned+0x3c>)
 8005268:	460c      	mov	r4, r1
 800526a:	6831      	ldr	r1, [r6, #0]
 800526c:	4605      	mov	r5, r0
 800526e:	b911      	cbnz	r1, 8005276 <sbrk_aligned+0x12>
 8005270:	f000 f8bc 	bl	80053ec <_sbrk_r>
 8005274:	6030      	str	r0, [r6, #0]
 8005276:	4621      	mov	r1, r4
 8005278:	4628      	mov	r0, r5
 800527a:	f000 f8b7 	bl	80053ec <_sbrk_r>
 800527e:	1c43      	adds	r3, r0, #1
 8005280:	d00a      	beq.n	8005298 <sbrk_aligned+0x34>
 8005282:	1cc4      	adds	r4, r0, #3
 8005284:	f024 0403 	bic.w	r4, r4, #3
 8005288:	42a0      	cmp	r0, r4
 800528a:	d007      	beq.n	800529c <sbrk_aligned+0x38>
 800528c:	1a21      	subs	r1, r4, r0
 800528e:	4628      	mov	r0, r5
 8005290:	f000 f8ac 	bl	80053ec <_sbrk_r>
 8005294:	3001      	adds	r0, #1
 8005296:	d101      	bne.n	800529c <sbrk_aligned+0x38>
 8005298:	f04f 34ff 	mov.w	r4, #4294967295
 800529c:	4620      	mov	r0, r4
 800529e:	bd70      	pop	{r4, r5, r6, pc}
 80052a0:	200003c8 	.word	0x200003c8

080052a4 <_malloc_r>:
 80052a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a8:	1ccd      	adds	r5, r1, #3
 80052aa:	f025 0503 	bic.w	r5, r5, #3
 80052ae:	3508      	adds	r5, #8
 80052b0:	2d0c      	cmp	r5, #12
 80052b2:	bf38      	it	cc
 80052b4:	250c      	movcc	r5, #12
 80052b6:	2d00      	cmp	r5, #0
 80052b8:	4607      	mov	r7, r0
 80052ba:	db01      	blt.n	80052c0 <_malloc_r+0x1c>
 80052bc:	42a9      	cmp	r1, r5
 80052be:	d905      	bls.n	80052cc <_malloc_r+0x28>
 80052c0:	230c      	movs	r3, #12
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	2600      	movs	r6, #0
 80052c6:	4630      	mov	r0, r6
 80052c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052cc:	4e2e      	ldr	r6, [pc, #184]	; (8005388 <_malloc_r+0xe4>)
 80052ce:	f000 f89d 	bl	800540c <__malloc_lock>
 80052d2:	6833      	ldr	r3, [r6, #0]
 80052d4:	461c      	mov	r4, r3
 80052d6:	bb34      	cbnz	r4, 8005326 <_malloc_r+0x82>
 80052d8:	4629      	mov	r1, r5
 80052da:	4638      	mov	r0, r7
 80052dc:	f7ff ffc2 	bl	8005264 <sbrk_aligned>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	4604      	mov	r4, r0
 80052e4:	d14d      	bne.n	8005382 <_malloc_r+0xde>
 80052e6:	6834      	ldr	r4, [r6, #0]
 80052e8:	4626      	mov	r6, r4
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	d140      	bne.n	8005370 <_malloc_r+0xcc>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	4631      	mov	r1, r6
 80052f2:	4638      	mov	r0, r7
 80052f4:	eb04 0803 	add.w	r8, r4, r3
 80052f8:	f000 f878 	bl	80053ec <_sbrk_r>
 80052fc:	4580      	cmp	r8, r0
 80052fe:	d13a      	bne.n	8005376 <_malloc_r+0xd2>
 8005300:	6821      	ldr	r1, [r4, #0]
 8005302:	3503      	adds	r5, #3
 8005304:	1a6d      	subs	r5, r5, r1
 8005306:	f025 0503 	bic.w	r5, r5, #3
 800530a:	3508      	adds	r5, #8
 800530c:	2d0c      	cmp	r5, #12
 800530e:	bf38      	it	cc
 8005310:	250c      	movcc	r5, #12
 8005312:	4629      	mov	r1, r5
 8005314:	4638      	mov	r0, r7
 8005316:	f7ff ffa5 	bl	8005264 <sbrk_aligned>
 800531a:	3001      	adds	r0, #1
 800531c:	d02b      	beq.n	8005376 <_malloc_r+0xd2>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	442b      	add	r3, r5
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	e00e      	b.n	8005344 <_malloc_r+0xa0>
 8005326:	6822      	ldr	r2, [r4, #0]
 8005328:	1b52      	subs	r2, r2, r5
 800532a:	d41e      	bmi.n	800536a <_malloc_r+0xc6>
 800532c:	2a0b      	cmp	r2, #11
 800532e:	d916      	bls.n	800535e <_malloc_r+0xba>
 8005330:	1961      	adds	r1, r4, r5
 8005332:	42a3      	cmp	r3, r4
 8005334:	6025      	str	r5, [r4, #0]
 8005336:	bf18      	it	ne
 8005338:	6059      	strne	r1, [r3, #4]
 800533a:	6863      	ldr	r3, [r4, #4]
 800533c:	bf08      	it	eq
 800533e:	6031      	streq	r1, [r6, #0]
 8005340:	5162      	str	r2, [r4, r5]
 8005342:	604b      	str	r3, [r1, #4]
 8005344:	4638      	mov	r0, r7
 8005346:	f104 060b 	add.w	r6, r4, #11
 800534a:	f000 f865 	bl	8005418 <__malloc_unlock>
 800534e:	f026 0607 	bic.w	r6, r6, #7
 8005352:	1d23      	adds	r3, r4, #4
 8005354:	1af2      	subs	r2, r6, r3
 8005356:	d0b6      	beq.n	80052c6 <_malloc_r+0x22>
 8005358:	1b9b      	subs	r3, r3, r6
 800535a:	50a3      	str	r3, [r4, r2]
 800535c:	e7b3      	b.n	80052c6 <_malloc_r+0x22>
 800535e:	6862      	ldr	r2, [r4, #4]
 8005360:	42a3      	cmp	r3, r4
 8005362:	bf0c      	ite	eq
 8005364:	6032      	streq	r2, [r6, #0]
 8005366:	605a      	strne	r2, [r3, #4]
 8005368:	e7ec      	b.n	8005344 <_malloc_r+0xa0>
 800536a:	4623      	mov	r3, r4
 800536c:	6864      	ldr	r4, [r4, #4]
 800536e:	e7b2      	b.n	80052d6 <_malloc_r+0x32>
 8005370:	4634      	mov	r4, r6
 8005372:	6876      	ldr	r6, [r6, #4]
 8005374:	e7b9      	b.n	80052ea <_malloc_r+0x46>
 8005376:	230c      	movs	r3, #12
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	4638      	mov	r0, r7
 800537c:	f000 f84c 	bl	8005418 <__malloc_unlock>
 8005380:	e7a1      	b.n	80052c6 <_malloc_r+0x22>
 8005382:	6025      	str	r5, [r4, #0]
 8005384:	e7de      	b.n	8005344 <_malloc_r+0xa0>
 8005386:	bf00      	nop
 8005388:	200003c4 	.word	0x200003c4

0800538c <_realloc_r>:
 800538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005390:	4680      	mov	r8, r0
 8005392:	4614      	mov	r4, r2
 8005394:	460e      	mov	r6, r1
 8005396:	b921      	cbnz	r1, 80053a2 <_realloc_r+0x16>
 8005398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539c:	4611      	mov	r1, r2
 800539e:	f7ff bf81 	b.w	80052a4 <_malloc_r>
 80053a2:	b92a      	cbnz	r2, 80053b0 <_realloc_r+0x24>
 80053a4:	f7ff ff12 	bl	80051cc <_free_r>
 80053a8:	4625      	mov	r5, r4
 80053aa:	4628      	mov	r0, r5
 80053ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b0:	f000 f838 	bl	8005424 <_malloc_usable_size_r>
 80053b4:	4284      	cmp	r4, r0
 80053b6:	4607      	mov	r7, r0
 80053b8:	d802      	bhi.n	80053c0 <_realloc_r+0x34>
 80053ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053be:	d812      	bhi.n	80053e6 <_realloc_r+0x5a>
 80053c0:	4621      	mov	r1, r4
 80053c2:	4640      	mov	r0, r8
 80053c4:	f7ff ff6e 	bl	80052a4 <_malloc_r>
 80053c8:	4605      	mov	r5, r0
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d0ed      	beq.n	80053aa <_realloc_r+0x1e>
 80053ce:	42bc      	cmp	r4, r7
 80053d0:	4622      	mov	r2, r4
 80053d2:	4631      	mov	r1, r6
 80053d4:	bf28      	it	cs
 80053d6:	463a      	movcs	r2, r7
 80053d8:	f7ff fed0 	bl	800517c <memcpy>
 80053dc:	4631      	mov	r1, r6
 80053de:	4640      	mov	r0, r8
 80053e0:	f7ff fef4 	bl	80051cc <_free_r>
 80053e4:	e7e1      	b.n	80053aa <_realloc_r+0x1e>
 80053e6:	4635      	mov	r5, r6
 80053e8:	e7df      	b.n	80053aa <_realloc_r+0x1e>
	...

080053ec <_sbrk_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d06      	ldr	r5, [pc, #24]	; (8005408 <_sbrk_r+0x1c>)
 80053f0:	2300      	movs	r3, #0
 80053f2:	4604      	mov	r4, r0
 80053f4:	4608      	mov	r0, r1
 80053f6:	602b      	str	r3, [r5, #0]
 80053f8:	f7fb fdf4 	bl	8000fe4 <_sbrk>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_sbrk_r+0x1a>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_sbrk_r+0x1a>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	200003cc 	.word	0x200003cc

0800540c <__malloc_lock>:
 800540c:	4801      	ldr	r0, [pc, #4]	; (8005414 <__malloc_lock+0x8>)
 800540e:	f000 b811 	b.w	8005434 <__retarget_lock_acquire_recursive>
 8005412:	bf00      	nop
 8005414:	200003d0 	.word	0x200003d0

08005418 <__malloc_unlock>:
 8005418:	4801      	ldr	r0, [pc, #4]	; (8005420 <__malloc_unlock+0x8>)
 800541a:	f000 b80c 	b.w	8005436 <__retarget_lock_release_recursive>
 800541e:	bf00      	nop
 8005420:	200003d0 	.word	0x200003d0

08005424 <_malloc_usable_size_r>:
 8005424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005428:	1f18      	subs	r0, r3, #4
 800542a:	2b00      	cmp	r3, #0
 800542c:	bfbc      	itt	lt
 800542e:	580b      	ldrlt	r3, [r1, r0]
 8005430:	18c0      	addlt	r0, r0, r3
 8005432:	4770      	bx	lr

08005434 <__retarget_lock_acquire_recursive>:
 8005434:	4770      	bx	lr

08005436 <__retarget_lock_release_recursive>:
 8005436:	4770      	bx	lr

08005438 <_init>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr

08005444 <_fini>:
 8005444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005446:	bf00      	nop
 8005448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544a:	bc08      	pop	{r3}
 800544c:	469e      	mov	lr, r3
 800544e:	4770      	bx	lr
