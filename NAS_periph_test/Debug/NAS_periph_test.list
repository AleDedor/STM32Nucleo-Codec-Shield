
NAS_periph_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005be4  08005be4  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08005be4  08005be4  00015be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bec  08005bec  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bec  08005bec  00015bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bf0  08005bf0  00015bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  20000060  08005c54  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  08005c54  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012438  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002895  00000000  00000000  0003250b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001128  00000000  00000000  00034da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8e  00000000  00000000  00035ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175e8  00000000  00000000  00036c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151ae  00000000  00000000  0004e23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091a54  00000000  00000000  000633ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e2c  00000000  00000000  000f4e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000f9c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005b44 	.word	0x08005b44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005b44 	.word	0x08005b44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <Codec_Init>:
#include "main.h"
#include "stm32f4xx_it.h"
#include "TLV320AIC3101_Codec.h"

HAL_StatusTypeDef Codec_Init(Codec *codec, I2C_HandleTypeDef *I2Chandle){
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]

	//assign I2C handler
	codec->I2Chandle = I2Chandle;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	683a      	ldr	r2, [r7, #0]
 800058a:	601a      	str	r2, [r3, #0]

	//Wait power on reset for the CODEC
	//HAL_Delay(RESET_TIME);

	//(1) software reset
	status = Codec_WriteRegister(codec, 0x01, 0b10000000);
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	2101      	movs	r1, #1
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 f8b9 	bl	8000708 <Codec_WriteRegister>
 8000596:	4603      	mov	r3, r0
 8000598:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800059a:	200a      	movs	r0, #10
 800059c:	f000 feaa 	bl	80012f4 <HAL_Delay>

	//(2) codec ADC/DAC sample rate
	status = Codec_WriteRegister(codec, 0x02, 0b00000000);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2102      	movs	r1, #2
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f8af 	bl	8000708 <Codec_WriteRegister>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73fb      	strb	r3, [r7, #15]

	//(3)We want fs_ref=48kHz, MCLK = 12.288 MHz, CODEC_CLK=fs_ref*256=12.288MHz, with  CODEC_CLK = MCLK*2/Q -> Q=2
	//status = Codec_WriteRegister(codec, 0x03, 0b01000000);
	status = Codec_WriteRegister(codec, 0x03, 0b00010001);
 80005ae:	2211      	movs	r2, #17
 80005b0:	2103      	movs	r1, #3
 80005b2:	6878      	ldr	r0, [r7, #4]
 80005b4:	f000 f8a8 	bl	8000708 <Codec_WriteRegister>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73fb      	strb	r3, [r7, #15]

	//(7) fs=48kHz, ADC-DAC dual rate OFF, left-DAC data path plays left-channel input data, right-DAC data path plays right-channel input data
	status = Codec_WriteRegister(codec, 0x07, 0b00001010);
 80005bc:	220a      	movs	r2, #10
 80005be:	2107      	movs	r1, #7
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 f8a1 	bl	8000708 <Codec_WriteRegister>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73fb      	strb	r3, [r7, #15]

	//(12) Input HP filter disabled, DAC filters bypassed
	status = Codec_WriteRegister(codec, 0x0c, 0b00000000);
 80005ca:	2200      	movs	r2, #0
 80005cc:	210c      	movs	r1, #12
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 f89a 	bl	8000708 <Codec_WriteRegister>
 80005d4:	4603      	mov	r3, r0
 80005d6:	73fb      	strb	r3, [r7, #15]

	//(14) high-power outputs ac-coupled driver configuration, pseudo-differential
	status = Codec_WriteRegister(codec, 0x0e, 0b10001000);
 80005d8:	2288      	movs	r2, #136	; 0x88
 80005da:	210e      	movs	r1, #14
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f893 	bl	8000708 <Codec_WriteRegister>
 80005e2:	4603      	mov	r3, r0
 80005e4:	73fb      	strb	r3, [r7, #15]

	//(15) un-mute left ADC PGA (6dB) (TESTED, WITH HIGHER GAIN SATURATES)
	status = Codec_WriteRegister(codec, 0x0f, 0b00001100);
 80005e6:	220c      	movs	r2, #12
 80005e8:	210f      	movs	r1, #15
 80005ea:	6878      	ldr	r0, [r7, #4]
 80005ec:	f000 f88c 	bl	8000708 <Codec_WriteRegister>
 80005f0:	4603      	mov	r3, r0
 80005f2:	73fb      	strb	r3, [r7, #15]

	//(16) un-mute right ADC PGA (6dB) (TESTED, WITH HIGHER GAIN SATURATES)
	status = Codec_WriteRegister(codec, 0x10, 0b00001100);
 80005f4:	220c      	movs	r2, #12
 80005f6:	2110      	movs	r1, #16
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f885 	bl	8000708 <Codec_WriteRegister>
 80005fe:	4603      	mov	r3, r0
 8000600:	73fb      	strb	r3, [r7, #15]

	//LET'S USE JACK CH2 FOR THE TESTS!
	//(17) MIC2L connected to LEFT ADC (0dB), MIC2R not connected to LEFT ADC
	status = Codec_WriteRegister(codec, 0x11, 0b00001111);
 8000602:	220f      	movs	r2, #15
 8000604:	2111      	movs	r1, #17
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f87e 	bl	8000708 <Codec_WriteRegister>
 800060c:	4603      	mov	r3, r0
 800060e:	73fb      	strb	r3, [r7, #15]
	//(18) MIC2R connected to RIGTH ADC (0dB), MIC2L not connected to RIGHT ADC
	status = Codec_WriteRegister(codec, 0x12, 0b11110000);
 8000610:	22f0      	movs	r2, #240	; 0xf0
 8000612:	2112      	movs	r1, #18
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f000 f877 	bl	8000708 <Codec_WriteRegister>
 800061a:	4603      	mov	r3, r0
 800061c:	73fb      	strb	r3, [r7, #15]

	//(19) Turn ON LEFT ADC - PGA soft stepping disabled
	status = Codec_WriteRegister(codec, 0x13, 0b01111111);
 800061e:	227f      	movs	r2, #127	; 0x7f
 8000620:	2113      	movs	r1, #19
 8000622:	6878      	ldr	r0, [r7, #4]
 8000624:	f000 f870 	bl	8000708 <Codec_WriteRegister>
 8000628:	4603      	mov	r3, r0
 800062a:	73fb      	strb	r3, [r7, #15]

	//(22) Turn ON RIGHT ADC - PGA soft stepping disabled
	status = Codec_WriteRegister(codec, 0x16, 0b01111111);
 800062c:	227f      	movs	r2, #127	; 0x7f
 800062e:	2116      	movs	r1, #22
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	f000 f869 	bl	8000708 <Codec_WriteRegister>
 8000636:	4603      	mov	r3, r0
 8000638:	73fb      	strb	r3, [r7, #15]

	//(37) Turn ON RIGHT and LEFT DACs, HPLCOM set as independent VCM output
	status = Codec_WriteRegister(codec, 0x25, 0b11010000);
 800063a:	22d0      	movs	r2, #208	; 0xd0
 800063c:	2125      	movs	r1, #37	; 0x25
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f000 f862 	bl	8000708 <Codec_WriteRegister>
 8000644:	4603      	mov	r3, r0
 8000646:	73fb      	strb	r3, [r7, #15]
	//status = Codec_WriteRegister(codec, 0x25, 0b11010000);//Gieff

	//(38) HPRCOM set as independent VCM output, short circuit protection activated with curr limit
	status = Codec_WriteRegister(codec, 0x26, 0b00001100);
 8000648:	220c      	movs	r2, #12
 800064a:	2126      	movs	r1, #38	; 0x26
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f000 f85b 	bl	8000708 <Codec_WriteRegister>
 8000652:	4603      	mov	r3, r0
 8000654:	73fb      	strb	r3, [r7, #15]
	//status = Codec_WriteRegister(codec, 0x26, 0b00100000);//Gieff

	//(40) output common-mode voltage = 1.65 V - output soft stepping each fs
	status = Codec_WriteRegister(codec, 0x28, 0b10000000);
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	2128      	movs	r1, #40	; 0x28
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f854 	bl	8000708 <Codec_WriteRegister>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]

	//(41) set DAC path, DAC_L2 to left high power, DAC_R2 to right high power, independent volume
	status = Codec_WriteRegister(codec, 0x29, 0b10100000);
 8000664:	22a0      	movs	r2, #160	; 0xa0
 8000666:	2129      	movs	r1, #41	; 0x29
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 f84d 	bl	8000708 <Codec_WriteRegister>
 800066e:	4603      	mov	r3, r0
 8000670:	73fb      	strb	r3, [r7, #15]
	//if commented, DAC_L1/DAC_R1 is used to HPLOUT, HPROUT

	//(42) Pop-reduction register, voltage divider
	status = Codec_WriteRegister(codec, 0x2a, 0b00010100);
 8000672:	2214      	movs	r2, #20
 8000674:	212a      	movs	r1, #42	; 0x2a
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 f846 	bl	8000708 <Codec_WriteRegister>
 800067c:	4603      	mov	r3, r0
 800067e:	73fb      	strb	r3, [r7, #15]

	//(43) un-mute left DAC, gain 0dB
	status = Codec_WriteRegister(codec, 0x2b, 0b00000000);
 8000680:	2200      	movs	r2, #0
 8000682:	212b      	movs	r1, #43	; 0x2b
 8000684:	6878      	ldr	r0, [r7, #4]
 8000686:	f000 f83f 	bl	8000708 <Codec_WriteRegister>
 800068a:	4603      	mov	r3, r0
 800068c:	73fb      	strb	r3, [r7, #15]

	//(44) un-mute right DAC, gain 0dB
	status = Codec_WriteRegister(codec, 0x2c, 0b00000000);
 800068e:	2200      	movs	r2, #0
 8000690:	212c      	movs	r1, #44	; 0x2c
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f000 f838 	bl	8000708 <Codec_WriteRegister>
 8000698:	4603      	mov	r3, r0
 800069a:	73fb      	strb	r3, [r7, #15]

	//(47) DAC_L1 to HPLOUT ON, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x2f, 0b10000000);

	//(51) un-mute HPLOUT, 9dB, high impedance when powered down, HPLOUT fully powered
	status = Codec_WriteRegister(codec, 0x33, 0b10011111);
 800069c:	229f      	movs	r2, #159	; 0x9f
 800069e:	2133      	movs	r1, #51	; 0x33
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f831 	bl	8000708 <Codec_WriteRegister>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]
	//status = Codec_WriteRegister(codec, 0x33, 0b00001101);//Gieff

	//(58) un-mute HPLCOM, high impedance when powered down, HPLCOM ON
	status = Codec_WriteRegister(codec, 0x3A, 0b10011111);
 80006aa:	229f      	movs	r2, #159	; 0x9f
 80006ac:	213a      	movs	r1, #58	; 0x3a
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f000 f82a 	bl	8000708 <Codec_WriteRegister>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]

	//(63) PGA_R to HPROUT ON, volume control 0dB
	//status = Codec_WriteRegister(codec, 0x3f, 0b10000000);

	//(64) DAC_R1 to HPROUT OFF, volume control 0dB
	status = Codec_WriteRegister(codec, 0x3f, 0b00000000);
 80006b8:	2200      	movs	r2, #0
 80006ba:	213f      	movs	r1, #63	; 0x3f
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 f823 	bl	8000708 <Codec_WriteRegister>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]

	//(65) un-mute HPROUT, 9dB, high impedance when powered down, HPROUT fully powered
	status = Codec_WriteRegister(codec, 0x41, 0b10011111);
 80006c6:	229f      	movs	r2, #159	; 0x9f
 80006c8:	2141      	movs	r1, #65	; 0x41
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f000 f81c 	bl	8000708 <Codec_WriteRegister>
 80006d0:	4603      	mov	r3, r0
 80006d2:	73fb      	strb	r3, [r7, #15]
	//status = Codec_WriteRegister(codec, 0x41, 0b00001101); //gieff

	//(72) un-mute HPRCOM, high impedance when powered down, HPRCOM fully powered
	status = Codec_WriteRegister(codec, 0x48, 0b10011111);
 80006d4:	229f      	movs	r2, #159	; 0x9f
 80006d6:	2148      	movs	r1, #72	; 0x48
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f815 	bl	8000708 <Codec_WriteRegister>
 80006de:	4603      	mov	r3, r0
 80006e0:	73fb      	strb	r3, [r7, #15]

	//(101) CLK source selection, CLKDIV_OUT
	status = Codec_WriteRegister(codec, 0x65, 0b00000001);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2165      	movs	r1, #101	; 0x65
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f80e 	bl	8000708 <Codec_WriteRegister>
 80006ec:	4603      	mov	r3, r0
 80006ee:	73fb      	strb	r3, [r7, #15]

	//(102) CLK source selection, MCLK
	status = Codec_WriteRegister(codec, 0x66, 0b00000010);
 80006f0:	2202      	movs	r2, #2
 80006f2:	2166      	movs	r1, #102	; 0x66
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f807 	bl	8000708 <Codec_WriteRegister>
 80006fa:	4603      	mov	r3, r0
 80006fc:	73fb      	strb	r3, [r7, #15]

	//(109) DAC quiescent current 50% increase
	//status = Codec_WriteRegister(codec, 0x6d, 0b01000000);

	return status;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000700:	4618      	mov	r0, r3
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <Codec_WriteRegister>:

HAL_StatusTypeDef Codec_WriteRegister(Codec *codec, uint8_t reg_addr, uint8_t val){
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af02      	add	r7, sp, #8
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
 8000714:	4613      	mov	r3, r2
 8000716:	70bb      	strb	r3, [r7, #2]
	uint8_t data[2]={reg_addr,val};
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	733b      	strb	r3, [r7, #12]
 800071c:	78bb      	ldrb	r3, [r7, #2]
 800071e:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(codec->I2Chandle, CODEC_I2C_ADDR, data, 2, 100);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	f107 020c 	add.w	r2, r7, #12
 8000728:	2364      	movs	r3, #100	; 0x64
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2302      	movs	r3, #2
 800072e:	2130      	movs	r1, #48	; 0x30
 8000730:	f001 fd82 	bl	8002238 <HAL_I2C_Master_Transmit>
 8000734:	4603      	mov	r3, r0
 8000736:	73fb      	strb	r3, [r7, #15]
	//HAL_StatusTypeDef status = HAL_I2C_Mem_Write(codec->I2Chandle, CODEC_I2C_ADDR, reg_addr, I2C_MEMADD_SIZE, &val, sizeof(val), 100);
	return status;
 8000738:	7bfb      	ldrb	r3, [r7, #15]
}
 800073a:	4618      	mov	r0, r3
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <process_half>:
	HAL_GPIO_WritePin(GPIOA, RLED1_Pin|RLED2_Pin|YLED1_Pin|YLED2_Pin|GLED1_Pin|GLED2_Pin, GPIO_PIN_RESET);
}

/* 2 DMA streams are used, 1 RX ,1 TX */
/* move half of the receiving DMA into the half of the transimitting DMA */
void process_half(){
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
	  for(uint8_t n=0 ; n < (BUFF_SIZE/2)-1; n+=2){
 800074a:	2300      	movs	r3, #0
 800074c:	71fb      	strb	r3, [r7, #7]
 800074e:	e01e      	b.n	800078e <process_half+0x4a>
		  //LEFT
		  outBufPtr[n]=inBufPtr[n];
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <process_half+0x60>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	441a      	add	r2, r3
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <process_half+0x64>)
 800075c:	6819      	ldr	r1, [r3, #0]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	440b      	add	r3, r1
 8000764:	8812      	ldrh	r2, [r2, #0]
 8000766:	b292      	uxth	r2, r2
 8000768:	801a      	strh	r2, [r3, #0]
		  //RIGHT
		  outBufPtr[n+1]=inBufPtr[n+1];
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <process_half+0x60>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	3301      	adds	r3, #1
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	441a      	add	r2, r3
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <process_half+0x64>)
 8000778:	6819      	ldr	r1, [r3, #0]
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3301      	adds	r3, #1
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	440b      	add	r3, r1
 8000782:	8812      	ldrh	r2, [r2, #0]
 8000784:	b292      	uxth	r2, r2
 8000786:	801a      	strh	r2, [r3, #0]
	  for(uint8_t n=0 ; n < (BUFF_SIZE/2)-1; n+=2){
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	3302      	adds	r3, #2
 800078c:	71fb      	strb	r3, [r7, #7]
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	2b30      	cmp	r3, #48	; 0x30
 8000792:	d9dd      	bls.n	8000750 <process_half+0xc>
	  }
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	200003fc 	.word	0x200003fc
 80007a8:	20000000 	.word	0x20000000

080007ac <HAL_I2SEx_TxRxHalfCpltCallback>:

/* first half ready DMA callback*/
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	outBufPtr = &tx_data[0];
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_I2SEx_TxRxHalfCpltCallback+0x20>)
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <HAL_I2SEx_TxRxHalfCpltCallback+0x24>)
 80007b8:	601a      	str	r2, [r3, #0]
	inBufPtr = &rx_data[0];
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 80007bc:	4a06      	ldr	r2, [pc, #24]	; (80007d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 80007be:	601a      	str	r2, [r3, #0]
	process_half(); // move data from RX to TX DMA
 80007c0:	f7ff ffc0 	bl	8000744 <process_half>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000000 	.word	0x20000000
 80007d0:	20000334 	.word	0x20000334
 80007d4:	200003fc 	.word	0x200003fc
 80007d8:	2000026c 	.word	0x2000026c

080007dc <HAL_I2SEx_TxRxCpltCallback>:
/* second half ready DMA callback*/
void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	outBufPtr = &tx_data[BUFF_SIZE/2];
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 80007e8:	601a      	str	r2, [r3, #0]
	inBufPtr = &rx_data[BUFF_SIZE/2];
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <HAL_I2SEx_TxRxCpltCallback+0x30>)
 80007ec:	4a08      	ldr	r2, [pc, #32]	; (8000810 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 80007ee:	601a      	str	r2, [r3, #0]
	process_half(); // move data from RX to TX DMA
 80007f0:	f7ff ffa8 	bl	8000744 <process_half>
	i = 1;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000000 	.word	0x20000000
 8000808:	20000398 	.word	0x20000398
 800080c:	200003fc 	.word	0x200003fc
 8000810:	200002d0 	.word	0x200002d0
 8000814:	20000464 	.word	0x20000464

08000818 <HAL_TIM_PeriodElapsedCallback>:
/*TIMER 3 used to turn on LED every second*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000818:	b480      	push	{r7}
 800081a:	b083      	sub	sp, #12
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	if(htim == &htim3)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d102      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
		TIM3_ISR_FLAG = 1;
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	200001d8 	.word	0x200001d8
 8000840:	20000264 	.word	0x20000264

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t led_index = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084e:	f000 fcdf 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000852:	f000 f86d 	bl	8000930 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000856:	f000 f9d1 	bl	8000bfc <MX_GPIO_Init>
  MX_DMA_Init();
 800085a:	f000 f9a7 	bl	8000bac <MX_DMA_Init>
  MX_USART2_UART_Init();
 800085e:	f000 f97b 	bl	8000b58 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000862:	f000 f8cf 	bl	8000a04 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000866:	f000 f929 	bl	8000abc <MX_TIM3_Init>
  MX_I2S2_Init();
 800086a:	f000 f8f9 	bl	8000a60 <MX_I2S2_Init>
  /* USER CODE BEGIN 2 */

  /* Codec Setup */
  if(Codec_Init(&codec, &hi2c1) != HAL_OK){
 800086e:	4924      	ldr	r1, [pc, #144]	; (8000900 <main+0xbc>)
 8000870:	4824      	ldr	r0, [pc, #144]	; (8000904 <main+0xc0>)
 8000872:	f7ff fe83 	bl	800057c <Codec_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d008      	beq.n	800088e <main+0x4a>
	  while(1){
	  		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800087c:	2120      	movs	r1, #32
 800087e:	4822      	ldr	r0, [pc, #136]	; (8000908 <main+0xc4>)
 8000880:	f001 fb7b 	bl	8001f7a <HAL_GPIO_TogglePin>
	  		  HAL_Delay(1000);
 8000884:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000888:	f000 fd34 	bl	80012f4 <HAL_Delay>
	  		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800088c:	e7f6      	b.n	800087c <main+0x38>
	  }}
  else{
	  uint8_t len = snprintf(buff, sizeof(buff),"Inizializzazione riuscita\n");
 800088e:	4a1f      	ldr	r2, [pc, #124]	; (800090c <main+0xc8>)
 8000890:	2164      	movs	r1, #100	; 0x64
 8000892:	481f      	ldr	r0, [pc, #124]	; (8000910 <main+0xcc>)
 8000894:	f004 fc9e 	bl	80051d4 <sniprintf>
 8000898:	4603      	mov	r3, r0
 800089a:	71bb      	strb	r3, [r7, #6]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 800089c:	79bb      	ldrb	r3, [r7, #6]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	491b      	ldr	r1, [pc, #108]	; (8000910 <main+0xcc>)
 80008a4:	481b      	ldr	r0, [pc, #108]	; (8000914 <main+0xd0>)
 80008a6:	f004 f920 	bl	8004aea <HAL_UART_Transmit>
  }

  if(HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t*)tx_data, (uint16_t*)rx_data, BUFF_SIZE) != HAL_OK){
 80008aa:	2364      	movs	r3, #100	; 0x64
 80008ac:	4a1a      	ldr	r2, [pc, #104]	; (8000918 <main+0xd4>)
 80008ae:	491b      	ldr	r1, [pc, #108]	; (800091c <main+0xd8>)
 80008b0:	481b      	ldr	r0, [pc, #108]	; (8000920 <main+0xdc>)
 80008b2:	f002 fa0f 	bl	8002cd4 <HAL_I2SEx_TransmitReceive_DMA>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d008      	beq.n	80008ce <main+0x8a>
	  while(1){
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80008bc:	2120      	movs	r1, #32
 80008be:	4812      	ldr	r0, [pc, #72]	; (8000908 <main+0xc4>)
 80008c0:	f001 fb5b 	bl	8001f7a <HAL_GPIO_TogglePin>
		  HAL_Delay(300);
 80008c4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008c8:	f000 fd14 	bl	80012f4 <HAL_Delay>
		  HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 80008cc:	e7f6      	b.n	80008bc <main+0x78>
	  }}
  else{
	  uint8_t len = snprintf(buff, sizeof(buff),"Startato DMA per I2S\n\n");
 80008ce:	4a15      	ldr	r2, [pc, #84]	; (8000924 <main+0xe0>)
 80008d0:	2164      	movs	r1, #100	; 0x64
 80008d2:	480f      	ldr	r0, [pc, #60]	; (8000910 <main+0xcc>)
 80008d4:	f004 fc7e 	bl	80051d4 <sniprintf>
 80008d8:	4603      	mov	r3, r0
 80008da:	717b      	strb	r3, [r7, #5]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buff, len, 100);
 80008dc:	797b      	ldrb	r3, [r7, #5]
 80008de:	b29a      	uxth	r2, r3
 80008e0:	2364      	movs	r3, #100	; 0x64
 80008e2:	490b      	ldr	r1, [pc, #44]	; (8000910 <main+0xcc>)
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <main+0xd0>)
 80008e6:	f004 f900 	bl	8004aea <HAL_UART_Transmit>
  }

  //Start the Timer 3 to turn on LEDS
  HAL_TIM_Base_Start_IT(&htim3);
 80008ea:	480f      	ldr	r0, [pc, #60]	; (8000928 <main+0xe4>)
 80008ec:	f003 fcba 	bl	8004264 <HAL_TIM_Base_Start_IT>
  while (1){

//	  HAL_I2S_Receive(&hi2s2, data, sizeof(data), 1000);
//	  HAL_I2S_Transmit(&hi2s2, data, sizeof(data), 1000);

	  if(TIM3_ISR_FLAG){
 80008f0:	4b0e      	ldr	r3, [pc, #56]	; (800092c <main+0xe8>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d0fb      	beq.n	80008f0 <main+0xac>
		  if(led_index == NUM_LEDS+1){
			  led_index = 0;
			  //reset leds
			  Led_Clear();
		  }*/
		  TIM3_ISR_FLAG = 0;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	; (800092c <main+0xe8>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]
	  if(TIM3_ISR_FLAG){
 80008fe:	e7f7      	b.n	80008f0 <main+0xac>
 8000900:	2000007c 	.word	0x2000007c
 8000904:	20000268 	.word	0x20000268
 8000908:	40020000 	.word	0x40020000
 800090c:	08005b5c 	.word	0x08005b5c
 8000910:	20000400 	.word	0x20000400
 8000914:	20000220 	.word	0x20000220
 8000918:	2000026c 	.word	0x2000026c
 800091c:	20000334 	.word	0x20000334
 8000920:	200000d0 	.word	0x200000d0
 8000924:	08005b78 	.word	0x08005b78
 8000928:	200001d8 	.word	0x200001d8
 800092c:	20000264 	.word	0x20000264

08000930 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b094      	sub	sp, #80	; 0x50
 8000934:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000936:	f107 0320 	add.w	r3, r7, #32
 800093a:	2230      	movs	r2, #48	; 0x30
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f004 fc7c 	bl	800523c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000944:	f107 030c 	add.w	r3, r7, #12
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	4b28      	ldr	r3, [pc, #160]	; (80009fc <SystemClock_Config+0xcc>)
 800095a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095c:	4a27      	ldr	r2, [pc, #156]	; (80009fc <SystemClock_Config+0xcc>)
 800095e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000962:	6413      	str	r3, [r2, #64]	; 0x40
 8000964:	4b25      	ldr	r3, [pc, #148]	; (80009fc <SystemClock_Config+0xcc>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <SystemClock_Config+0xd0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800097c:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <SystemClock_Config+0xd0>)
 800097e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000990:	2302      	movs	r3, #2
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000994:	2301      	movs	r3, #1
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2310      	movs	r3, #16
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009a4:	2308      	movs	r3, #8
 80009a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80009a8:	2354      	movs	r3, #84	; 0x54
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009b0:	2307      	movs	r3, #7
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4618      	mov	r0, r3
 80009ba:	f002 fe1f 	bl	80035fc <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009c4:	f000 f98a 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c8:	230f      	movs	r3, #15
 80009ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009cc:	2302      	movs	r3, #2
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009de:	f107 030c 	add.w	r3, r7, #12
 80009e2:	2102      	movs	r1, #2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 f881 	bl	8003aec <HAL_RCC_ClockConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009f0:	f000 f974 	bl	8000cdc <Error_Handler>
  }
}
 80009f4:	bf00      	nop
 80009f6:	3750      	adds	r7, #80	; 0x50
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40007000 	.word	0x40007000

08000a04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a0a:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <MX_I2C1_Init+0x54>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a10:	4a12      	ldr	r2, [pc, #72]	; (8000a5c <MX_I2C1_Init+0x58>)
 8000a12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a28:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_I2C1_Init+0x50>)
 8000a42:	f001 fab5 	bl	8001fb0 <HAL_I2C_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a4c:	f000 f946 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	000186a0 	.word	0x000186a0

08000a60 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000a66:	4a14      	ldr	r2, [pc, #80]	; (8000ab8 <MX_I2S2_Init+0x58>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a70:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000a80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a84:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000a88:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000a8c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000a94:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_I2S2_Init+0x54>)
 8000aa2:	f001 fed1 	bl	8002848 <HAL_I2S_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000aac:	f000 f916 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200000d0 	.word	0x200000d0
 8000ab8:	40003800 	.word	0x40003800

08000abc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac2:	f107 0308 	add.w	r3, r7, #8
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad0:	463b      	mov	r3, r7
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000ada:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <MX_TIM3_Init+0x98>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000ade:	4b1c      	ldr	r3, [pc, #112]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000ae0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ae4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000aec:	4b18      	ldr	r3, [pc, #96]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000aee:	f242 720f 	movw	r2, #9999	; 0x270f
 8000af2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000b00:	4813      	ldr	r0, [pc, #76]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000b02:	f003 fb5f 	bl	80041c4 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000b0c:	f000 f8e6 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000b1e:	f003 fd0b 	bl	8004538 <HAL_TIM_ConfigClockSource>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b28:	f000 f8d8 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	4619      	mov	r1, r3
 8000b38:	4805      	ldr	r0, [pc, #20]	; (8000b50 <MX_TIM3_Init+0x94>)
 8000b3a:	f003 ff07 	bl	800494c <HAL_TIMEx_MasterConfigSynchronization>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b44:	f000 f8ca 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	200001d8 	.word	0x200001d8
 8000b54:	40000400 	.word	0x40000400

08000b58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b5e:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_USART2_UART_Init+0x50>)
 8000b60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f003 ff5e 	bl	8004a50 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b9a:	f000 f89f 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000220 	.word	0x20000220
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
 8000bb6:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_DMA_Init+0x4c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <MX_DMA_Init+0x4c>)
 8000bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <MX_DMA_Init+0x4c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	200e      	movs	r0, #14
 8000bd4:	f000 fc8d 	bl	80014f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000bd8:	200e      	movs	r0, #14
 8000bda:	f000 fca6 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	200f      	movs	r0, #15
 8000be4:	f000 fc85 	bl	80014f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000be8:	200f      	movs	r0, #15
 8000bea:	f000 fc9e 	bl	800152a <HAL_NVIC_EnableIRQ>

}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a2d      	ldr	r2, [pc, #180]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b20      	ldr	r3, [pc, #128]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a1f      	ldr	r2, [pc, #124]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a18      	ldr	r2, [pc, #96]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RLED1_Pin|RLED2_Pin|YLED1_Pin
 8000c82:	2200      	movs	r2, #0
 8000c84:	f643 7120 	movw	r1, #16160	; 0x3f20
 8000c88:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c8a:	f001 f95d 	bl	8001f48 <HAL_GPIO_WritePin>
                          |YLED2_Pin|GLED1_Pin|GLED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c94:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <MX_GPIO_Init+0xdc>)
 8000ca6:	f000 ffcb 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin RLED1_Pin RLED2_Pin YLED1_Pin
                           YLED2_Pin GLED1_Pin GLED2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|RLED1_Pin|RLED2_Pin|YLED1_Pin
 8000caa:	f643 7320 	movw	r3, #16160	; 0x3f20
 8000cae:	617b      	str	r3, [r7, #20]
                          |YLED2_Pin|GLED1_Pin|GLED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <MX_GPIO_Init+0xd8>)
 8000cc4:	f000 ffbc 	bl	8001c40 <HAL_GPIO_Init>

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020800 	.word	0x40020800

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	4a0f      	ldr	r2, [pc, #60]	; (8000d34 <HAL_MspInit+0x4c>)
 8000cf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cfc:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d26:	2007      	movs	r0, #7
 8000d28:	f000 fbd8 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40023800 	.word	0x40023800

08000d38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a19      	ldr	r2, [pc, #100]	; (8000dbc <HAL_I2C_MspInit+0x84>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d12b      	bne.n	8000db2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d76:	23c0      	movs	r3, #192	; 0xc0
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d7a:	2312      	movs	r3, #18
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d86:	2304      	movs	r3, #4
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <HAL_I2C_MspInit+0x8c>)
 8000d92:	f000 ff55 	bl	8001c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000da0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_I2C_MspInit+0x88>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3728      	adds	r7, #40	; 0x28
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40005400 	.word	0x40005400
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b090      	sub	sp, #64	; 0x40
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a69      	ldr	r2, [pc, #420]	; (8000f9c <HAL_I2S_MspInit+0x1d4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	f040 80cc 	bne.w	8000f94 <HAL_I2S_MspInit+0x1cc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 123;
 8000e00:	237b      	movs	r3, #123	; 0x7b
 8000e02:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8000e04:	2305      	movs	r3, #5
 8000e06:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e08:	f107 0318 	add.w	r3, r7, #24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 f88d 	bl	8003f2c <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 8000e18:	f7ff ff60 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	4b5f      	ldr	r3, [pc, #380]	; (8000fa0 <HAL_I2S_MspInit+0x1d8>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a5e      	ldr	r2, [pc, #376]	; (8000fa0 <HAL_I2S_MspInit+0x1d8>)
 8000e26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b5c      	ldr	r3, [pc, #368]	; (8000fa0 <HAL_I2S_MspInit+0x1d8>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e34:	617b      	str	r3, [r7, #20]
 8000e36:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	4b58      	ldr	r3, [pc, #352]	; (8000fa0 <HAL_I2S_MspInit+0x1d8>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	4a57      	ldr	r2, [pc, #348]	; (8000fa0 <HAL_I2S_MspInit+0x1d8>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6313      	str	r3, [r2, #48]	; 0x30
 8000e48:	4b55      	ldr	r3, [pc, #340]	; (8000fa0 <HAL_I2S_MspInit+0x1d8>)
 8000e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4b51      	ldr	r3, [pc, #324]	; (8000fa0 <HAL_I2S_MspInit+0x1d8>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <HAL_I2S_MspInit+0x1d8>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b4e      	ldr	r3, [pc, #312]	; (8000fa0 <HAL_I2S_MspInit+0x1d8>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e70:	2304      	movs	r3, #4
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e80:	2306      	movs	r3, #6
 8000e82:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4846      	ldr	r0, [pc, #280]	; (8000fa4 <HAL_I2S_MspInit+0x1dc>)
 8000e8c:	f000 fed8 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000e90:	2348      	movs	r3, #72	; 0x48
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea0:	2305      	movs	r3, #5
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	483e      	ldr	r0, [pc, #248]	; (8000fa4 <HAL_I2S_MspInit+0x1dc>)
 8000eac:	f000 fec8 	bl	8001c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000eb0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4836      	ldr	r0, [pc, #216]	; (8000fa8 <HAL_I2S_MspInit+0x1e0>)
 8000ece:	f000 feb7 	bl	8001c40 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000ed2:	4b36      	ldr	r3, [pc, #216]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000ed4:	4a36      	ldr	r2, [pc, #216]	; (8000fb0 <HAL_I2S_MspInit+0x1e8>)
 8000ed6:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000ed8:	4b34      	ldr	r3, [pc, #208]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000eda:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ede:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee0:	4b32      	ldr	r3, [pc, #200]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef2:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efa:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000efc:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f02:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000f04:	4b29      	ldr	r3, [pc, #164]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0a:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f0c:	4b27      	ldr	r3, [pc, #156]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f12:	4b26      	ldr	r3, [pc, #152]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000f18:	4824      	ldr	r0, [pc, #144]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000f1a:	f000 fb21 	bl	8001560 <HAL_DMA_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_I2S_MspInit+0x160>
    {
      Error_Handler();
 8000f24:	f7ff feda 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a20      	ldr	r2, [pc, #128]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f2e:	4a1f      	ldr	r2, [pc, #124]	; (8000fac <HAL_I2S_MspInit+0x1e4>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f36:	4a20      	ldr	r2, [pc, #128]	; (8000fb8 <HAL_I2S_MspInit+0x1f0>)
 8000f38:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000f3a:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f40:	4b1c      	ldr	r3, [pc, #112]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f42:	2240      	movs	r2, #64	; 0x40
 8000f44:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f52:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f54:	4b17      	ldr	r3, [pc, #92]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f5a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f62:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f6a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f72:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f78:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f7a:	f000 faf1 	bl	8001560 <HAL_DMA_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <HAL_I2S_MspInit+0x1c0>
    {
      Error_Handler();
 8000f84:	f7ff feaa 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f8c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <HAL_I2S_MspInit+0x1ec>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3740      	adds	r7, #64	; 0x40
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40003800 	.word	0x40003800
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020800 	.word	0x40020800
 8000fa8:	40020400 	.word	0x40020400
 8000fac:	20000118 	.word	0x20000118
 8000fb0:	40026058 	.word	0x40026058
 8000fb4:	20000178 	.word	0x20000178
 8000fb8:	40026070 	.word	0x40026070

08000fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_TIM_Base_MspInit+0x48>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d115      	bne.n	8000ffa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_TIM_Base_MspInit+0x4c>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a0c      	ldr	r2, [pc, #48]	; (8001008 <HAL_TIM_Base_MspInit+0x4c>)
 8000fd8:	f043 0302 	orr.w	r3, r3, #2
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_TIM_Base_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	201d      	movs	r0, #29
 8000ff0:	f000 fa7f 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000ff4:	201d      	movs	r0, #29
 8000ff6:	f000 fa98 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40000400 	.word	0x40000400
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_UART_MspInit+0x84>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12b      	bne.n	8001086 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_UART_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001066:	230c      	movs	r3, #12
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001076:	2307      	movs	r3, #7
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <HAL_UART_MspInit+0x8c>)
 8001082:	f000 fddd 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40004400 	.word	0x40004400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 f8e4 	bl	80012b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <DMA1_Stream3_IRQHandler+0x10>)
 80010f6:	f000 fb39 	bl	800176c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000118 	.word	0x20000118

08001104 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001108:	4802      	ldr	r0, [pc, #8]	; (8001114 <DMA1_Stream4_IRQHandler+0x10>)
 800110a:	f000 fb2f 	bl	800176c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000178 	.word	0x20000178

08001118 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800111c:	4802      	ldr	r0, [pc, #8]	; (8001128 <TIM3_IRQHandler+0x10>)
 800111e:	f003 f903 	bl	8004328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001d8 	.word	0x200001d8

0800112c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001134:	4a14      	ldr	r2, [pc, #80]	; (8001188 <_sbrk+0x5c>)
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <_sbrk+0x60>)
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <_sbrk+0x64>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d102      	bne.n	800114e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <_sbrk+0x64>)
 800114a:	4a12      	ldr	r2, [pc, #72]	; (8001194 <_sbrk+0x68>)
 800114c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114e:	4b10      	ldr	r3, [pc, #64]	; (8001190 <_sbrk+0x64>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	429a      	cmp	r2, r3
 800115a:	d207      	bcs.n	800116c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800115c:	f004 f876 	bl	800524c <__errno>
 8001160:	4603      	mov	r3, r0
 8001162:	220c      	movs	r2, #12
 8001164:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001166:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800116a:	e009      	b.n	8001180 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <_sbrk+0x64>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <_sbrk+0x64>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	4a05      	ldr	r2, [pc, #20]	; (8001190 <_sbrk+0x64>)
 800117c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117e:	68fb      	ldr	r3, [r7, #12]
}
 8001180:	4618      	mov	r0, r3
 8001182:	3718      	adds	r7, #24
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	20018000 	.word	0x20018000
 800118c:	00000400 	.word	0x00000400
 8001190:	20000468 	.word	0x20000468
 8001194:	200005b8 	.word	0x200005b8

08001198 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <SystemInit+0x20>)
 800119e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011a2:	4a05      	ldr	r2, [pc, #20]	; (80011b8 <SystemInit+0x20>)
 80011a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c2:	490e      	ldr	r1, [pc, #56]	; (80011fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c4:	4a0e      	ldr	r2, [pc, #56]	; (8001200 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011d8:	4c0b      	ldr	r4, [pc, #44]	; (8001208 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011e6:	f7ff ffd7 	bl	8001198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ea:	f004 f835 	bl	8005258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011ee:	f7ff fb29 	bl	8000844 <main>
  bx  lr    
 80011f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001200:	08005bf4 	.word	0x08005bf4
  ldr r2, =_sbss
 8001204:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001208:	200005b8 	.word	0x200005b8

0800120c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC_IRQHandler>
	...

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a0d      	ldr	r2, [pc, #52]	; (8001250 <HAL_Init+0x40>)
 800121a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0a      	ldr	r2, [pc, #40]	; (8001250 <HAL_Init+0x40>)
 8001226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a07      	ldr	r2, [pc, #28]	; (8001250 <HAL_Init+0x40>)
 8001232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001238:	2003      	movs	r0, #3
 800123a:	f000 f94f 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800123e:	2000      	movs	r0, #0
 8001240:	f000 f808 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001244:	f7ff fd50 	bl	8000ce8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023c00 	.word	0x40023c00

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_InitTick+0x54>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	4619      	mov	r1, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126a:	fbb3 f3f1 	udiv	r3, r3, r1
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 f967 	bl	8001546 <HAL_SYSTICK_Config>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e00e      	b.n	80012a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2b0f      	cmp	r3, #15
 8001286:	d80a      	bhi.n	800129e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001288:	2200      	movs	r2, #0
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001290:	f000 f92f 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001294:	4a06      	ldr	r2, [pc, #24]	; (80012b0 <HAL_InitTick+0x5c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000004 	.word	0x20000004
 80012ac:	2000000c 	.word	0x2000000c
 80012b0:	20000008 	.word	0x20000008

080012b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <HAL_IncTick+0x20>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x24>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4413      	add	r3, r2
 80012c4:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <HAL_IncTick+0x24>)
 80012c6:	6013      	str	r3, [r2, #0]
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	2000000c 	.word	0x2000000c
 80012d8:	2000046c 	.word	0x2000046c

080012dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return uwTick;
 80012e0:	4b03      	ldr	r3, [pc, #12]	; (80012f0 <HAL_GetTick+0x14>)
 80012e2:	681b      	ldr	r3, [r3, #0]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	2000046c 	.word	0x2000046c

080012f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff ffee 	bl	80012dc <HAL_GetTick>
 8001300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800130c:	d005      	beq.n	800131a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <HAL_Delay+0x44>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800131a:	bf00      	nop
 800131c:	f7ff ffde 	bl	80012dc <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	429a      	cmp	r2, r3
 800132a:	d8f7      	bhi.n	800131c <HAL_Delay+0x28>
  {
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000000c 	.word	0x2000000c

0800133c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001352:	68ba      	ldr	r2, [r7, #8]
 8001354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001358:	4013      	ands	r3, r2
 800135a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800136c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136e:	4a04      	ldr	r2, [pc, #16]	; (8001380 <__NVIC_SetPriorityGrouping+0x44>)
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	60d3      	str	r3, [r2, #12]
}
 8001374:	bf00      	nop
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_GetPriorityGrouping+0x18>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	0a1b      	lsrs	r3, r3, #8
 800138e:	f003 0307 	and.w	r3, r3, #7
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	db0b      	blt.n	80013ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b2:	79fb      	ldrb	r3, [r7, #7]
 80013b4:	f003 021f 	and.w	r2, r3, #31
 80013b8:	4907      	ldr	r1, [pc, #28]	; (80013d8 <__NVIC_EnableIRQ+0x38>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	095b      	lsrs	r3, r3, #5
 80013c0:	2001      	movs	r0, #1
 80013c2:	fa00 f202 	lsl.w	r2, r0, r2
 80013c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	db0a      	blt.n	8001406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	490c      	ldr	r1, [pc, #48]	; (8001428 <__NVIC_SetPriority+0x4c>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	0112      	lsls	r2, r2, #4
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	440b      	add	r3, r1
 8001400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001404:	e00a      	b.n	800141c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4908      	ldr	r1, [pc, #32]	; (800142c <__NVIC_SetPriority+0x50>)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	3b04      	subs	r3, #4
 8001414:	0112      	lsls	r2, r2, #4
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	440b      	add	r3, r1
 800141a:	761a      	strb	r2, [r3, #24]
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000e100 	.word	0xe000e100
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	; 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f1c3 0307 	rsb	r3, r3, #7
 800144a:	2b04      	cmp	r3, #4
 800144c:	bf28      	it	cs
 800144e:	2304      	movcs	r3, #4
 8001450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3304      	adds	r3, #4
 8001456:	2b06      	cmp	r3, #6
 8001458:	d902      	bls.n	8001460 <NVIC_EncodePriority+0x30>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3b03      	subs	r3, #3
 800145e:	e000      	b.n	8001462 <NVIC_EncodePriority+0x32>
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43da      	mvns	r2, r3
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	401a      	ands	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001478:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa01 f303 	lsl.w	r3, r1, r3
 8001482:	43d9      	mvns	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	4313      	orrs	r3, r2
         );
}
 800148a:	4618      	mov	r0, r3
 800148c:	3724      	adds	r7, #36	; 0x24
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014bc:	f7ff ff8e 	bl	80013dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff29 	bl	800133c <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff3e 	bl	8001384 <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff8e 	bl	8001430 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5d 	bl	80013dc <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff31 	bl	80013a0 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800156c:	f7ff feb6 	bl	80012dc <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d101      	bne.n	800157c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e099      	b.n	80016b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2202      	movs	r2, #2
 8001580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0201 	bic.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159c:	e00f      	b.n	80015be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800159e:	f7ff fe9d 	bl	80012dc <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b05      	cmp	r3, #5
 80015aa:	d908      	bls.n	80015be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2220      	movs	r2, #32
 80015b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e078      	b.n	80016b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0301 	and.w	r3, r3, #1
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e8      	bne.n	800159e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	4b38      	ldr	r3, [pc, #224]	; (80016b8 <HAL_DMA_Init+0x158>)
 80015d8:	4013      	ands	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001602:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4313      	orrs	r3, r2
 800160e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	2b04      	cmp	r3, #4
 8001616:	d107      	bne.n	8001628 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	4313      	orrs	r3, r2
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	4313      	orrs	r3, r2
 8001626:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f023 0307 	bic.w	r3, r3, #7
 800163e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	4313      	orrs	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b04      	cmp	r3, #4
 8001650:	d117      	bne.n	8001682 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4313      	orrs	r3, r2
 800165a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00e      	beq.n	8001682 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa6f 	bl	8001b48 <DMA_CheckFifoParam>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800167e:	2301      	movs	r3, #1
 8001680:	e016      	b.n	80016b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	697a      	ldr	r2, [r7, #20]
 8001688:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f000 fa26 	bl	8001adc <DMA_CalcBaseAndBitshift>
 8001690:	4603      	mov	r3, r0
 8001692:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001698:	223f      	movs	r2, #63	; 0x3f
 800169a:	409a      	lsls	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	f010803f 	.word	0xf010803f

080016bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_DMA_Start_IT+0x26>
 80016de:	2302      	movs	r3, #2
 80016e0:	e040      	b.n	8001764 <HAL_DMA_Start_IT+0xa8>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d12f      	bne.n	8001756 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2202      	movs	r2, #2
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f9b8 	bl	8001a80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001714:	223f      	movs	r2, #63	; 0x3f
 8001716:	409a      	lsls	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f042 0216 	orr.w	r2, r2, #22
 800172a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	2b00      	cmp	r3, #0
 8001732:	d007      	beq.n	8001744 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0208 	orr.w	r2, r2, #8
 8001742:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f042 0201 	orr.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	e005      	b.n	8001762 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800175e:	2302      	movs	r3, #2
 8001760:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001762:	7dfb      	ldrb	r3, [r7, #23]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001778:	4b8e      	ldr	r3, [pc, #568]	; (80019b4 <HAL_DMA_IRQHandler+0x248>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a8e      	ldr	r2, [pc, #568]	; (80019b8 <HAL_DMA_IRQHandler+0x24c>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0a9b      	lsrs	r3, r3, #10
 8001784:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	2208      	movs	r2, #8
 8001798:	409a      	lsls	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d01a      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0304 	and.w	r3, r3, #4
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d013      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0204 	bic.w	r2, r2, #4
 80017be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c4:	2208      	movs	r2, #8
 80017c6:	409a      	lsls	r2, r3
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f043 0201 	orr.w	r2, r3, #1
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017dc:	2201      	movs	r2, #1
 80017de:	409a      	lsls	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4013      	ands	r3, r2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d012      	beq.n	800180e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00b      	beq.n	800180e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fa:	2201      	movs	r2, #1
 80017fc:	409a      	lsls	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	f043 0202 	orr.w	r2, r3, #2
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001812:	2204      	movs	r2, #4
 8001814:	409a      	lsls	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4013      	ands	r3, r2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d012      	beq.n	8001844 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00b      	beq.n	8001844 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	2204      	movs	r2, #4
 8001832:	409a      	lsls	r2, r3
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	f043 0204 	orr.w	r2, r3, #4
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001848:	2210      	movs	r2, #16
 800184a:	409a      	lsls	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d043      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b00      	cmp	r3, #0
 8001860:	d03c      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001866:	2210      	movs	r2, #16
 8001868:	409a      	lsls	r2, r3
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d018      	beq.n	80018ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d108      	bne.n	800189c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	2b00      	cmp	r3, #0
 8001890:	d024      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	4798      	blx	r3
 800189a:	e01f      	b.n	80018dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01b      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	4798      	blx	r3
 80018ac:	e016      	b.n	80018dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0208 	bic.w	r2, r2, #8
 80018ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e0:	2220      	movs	r2, #32
 80018e2:	409a      	lsls	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 808f 	beq.w	8001a0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 8087 	beq.w	8001a0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2220      	movs	r2, #32
 8001904:	409a      	lsls	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b05      	cmp	r3, #5
 8001914:	d136      	bne.n	8001984 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0216 	bic.w	r2, r2, #22
 8001924:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	695a      	ldr	r2, [r3, #20]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001934:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	d103      	bne.n	8001946 <HAL_DMA_IRQHandler+0x1da>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001942:	2b00      	cmp	r3, #0
 8001944:	d007      	beq.n	8001956 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0208 	bic.w	r2, r2, #8
 8001954:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800195a:	223f      	movs	r2, #63	; 0x3f
 800195c:	409a      	lsls	r2, r3
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001976:	2b00      	cmp	r3, #0
 8001978:	d07e      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	4798      	blx	r3
        }
        return;
 8001982:	e079      	b.n	8001a78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01d      	beq.n	80019ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10d      	bne.n	80019bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d031      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	4798      	blx	r3
 80019b0:	e02c      	b.n	8001a0c <HAL_DMA_IRQHandler+0x2a0>
 80019b2:	bf00      	nop
 80019b4:	20000004 	.word	0x20000004
 80019b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d023      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	4798      	blx	r3
 80019cc:	e01e      	b.n	8001a0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d10f      	bne.n	80019fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f022 0210 	bic.w	r2, r2, #16
 80019ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d032      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2205      	movs	r2, #5
 8001a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0201 	bic.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d307      	bcc.n	8001a54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f2      	bne.n	8001a38 <HAL_DMA_IRQHandler+0x2cc>
 8001a52:	e000      	b.n	8001a56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	4798      	blx	r3
 8001a76:	e000      	b.n	8001a7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a78:	bf00      	nop
    }
  }
}
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	2b40      	cmp	r3, #64	; 0x40
 8001aac:	d108      	bne.n	8001ac0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68ba      	ldr	r2, [r7, #8]
 8001abc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001abe:	e007      	b.n	8001ad0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	60da      	str	r2, [r3, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	3b10      	subs	r3, #16
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <DMA_CalcBaseAndBitshift+0x64>)
 8001aee:	fba2 2303 	umull	r2, r3, r2, r3
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001af6:	4a13      	ldr	r2, [pc, #76]	; (8001b44 <DMA_CalcBaseAndBitshift+0x68>)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d909      	bls.n	8001b1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	1d1a      	adds	r2, r3, #4
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58
 8001b1c:	e007      	b.n	8001b2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b26:	f023 0303 	bic.w	r3, r3, #3
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	aaaaaaab 	.word	0xaaaaaaab
 8001b44:	08005ba8 	.word	0x08005ba8

08001b48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d11f      	bne.n	8001ba2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d856      	bhi.n	8001c16 <DMA_CheckFifoParam+0xce>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <DMA_CheckFifoParam+0x28>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b93 	.word	0x08001b93
 8001b78:	08001b81 	.word	0x08001b81
 8001b7c:	08001c17 	.word	0x08001c17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d046      	beq.n	8001c1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b90:	e043      	b.n	8001c1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b9a:	d140      	bne.n	8001c1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba0:	e03d      	b.n	8001c1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001baa:	d121      	bne.n	8001bf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d837      	bhi.n	8001c22 <DMA_CheckFifoParam+0xda>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <DMA_CheckFifoParam+0x70>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001bcf 	.word	0x08001bcf
 8001bc0:	08001bc9 	.word	0x08001bc9
 8001bc4:	08001be1 	.word	0x08001be1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
      break;
 8001bcc:	e030      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d025      	beq.n	8001c26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bde:	e022      	b.n	8001c26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001be8:	d11f      	bne.n	8001c2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bee:	e01c      	b.n	8001c2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d903      	bls.n	8001bfe <DMA_CheckFifoParam+0xb6>
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d003      	beq.n	8001c04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bfc:	e018      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	73fb      	strb	r3, [r7, #15]
      break;
 8001c02:	e015      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00e      	beq.n	8001c2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
      break;
 8001c14:	e00b      	b.n	8001c2e <DMA_CheckFifoParam+0xe6>
      break;
 8001c16:	bf00      	nop
 8001c18:	e00a      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1a:	bf00      	nop
 8001c1c:	e008      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c1e:	bf00      	nop
 8001c20:	e006      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c22:	bf00      	nop
 8001c24:	e004      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c26:	bf00      	nop
 8001c28:	e002      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;   
 8001c2a:	bf00      	nop
 8001c2c:	e000      	b.n	8001c30 <DMA_CheckFifoParam+0xe8>
      break;
 8001c2e:	bf00      	nop
    }
  } 
  
  return status; 
 8001c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	; 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
 8001c5a:	e159      	b.n	8001f10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 8148 	bne.w	8001f0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0303 	and.w	r3, r3, #3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d005      	beq.n	8001c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d130      	bne.n	8001cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 0201 	and.w	r2, r3, #1
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d017      	beq.n	8001d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d123      	bne.n	8001d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	220f      	movs	r2, #15
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	08da      	lsrs	r2, r3, #3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3208      	adds	r2, #8
 8001d7e:	69b9      	ldr	r1, [r7, #24]
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	f000 80a2 	beq.w	8001f0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b57      	ldr	r3, [pc, #348]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <HAL_GPIO_Init+0x2e8>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001de2:	4a52      	ldr	r2, [pc, #328]	; (8001f2c <HAL_GPIO_Init+0x2ec>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	089b      	lsrs	r3, r3, #2
 8001de8:	3302      	adds	r3, #2
 8001dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0303 	and.w	r3, r3, #3
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	220f      	movs	r2, #15
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a49      	ldr	r2, [pc, #292]	; (8001f30 <HAL_GPIO_Init+0x2f0>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x202>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a48      	ldr	r2, [pc, #288]	; (8001f34 <HAL_GPIO_Init+0x2f4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x1fe>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a47      	ldr	r2, [pc, #284]	; (8001f38 <HAL_GPIO_Init+0x2f8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x1fa>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_GPIO_Init+0x2fc>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x1f6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a45      	ldr	r2, [pc, #276]	; (8001f40 <HAL_GPIO_Init+0x300>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x1f2>
 8001e2e:	2304      	movs	r3, #4
 8001e30:	e008      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e32:	2307      	movs	r3, #7
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e36:	2303      	movs	r3, #3
 8001e38:	e004      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	e002      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e42:	2300      	movs	r3, #0
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	f002 0203 	and.w	r2, r2, #3
 8001e4a:	0092      	lsls	r2, r2, #2
 8001e4c:	4093      	lsls	r3, r2
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e54:	4935      	ldr	r1, [pc, #212]	; (8001f2c <HAL_GPIO_Init+0x2ec>)
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	3302      	adds	r3, #2
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e62:	4b38      	ldr	r3, [pc, #224]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e86:	4a2f      	ldr	r2, [pc, #188]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eda:	4a1a      	ldr	r2, [pc, #104]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee0:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f04:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	f67f aea2 	bls.w	8001c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40013800 	.word	0x40013800
 8001f30:	40020000 	.word	0x40020000
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40020800 	.word	0x40020800
 8001f3c:	40020c00 	.word	0x40020c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40013c00 	.word	0x40013c00

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f64:	e003      	b.n	8001f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f66:	887b      	ldrh	r3, [r7, #2]
 8001f68:	041a      	lsls	r2, r3, #16
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	619a      	str	r2, [r3, #24]
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b085      	sub	sp, #20
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	460b      	mov	r3, r1
 8001f84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f8c:	887a      	ldrh	r2, [r7, #2]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	4013      	ands	r3, r2
 8001f92:	041a      	lsls	r2, r3, #16
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	43d9      	mvns	r1, r3
 8001f98:	887b      	ldrh	r3, [r7, #2]
 8001f9a:	400b      	ands	r3, r1
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	619a      	str	r2, [r3, #24]
}
 8001fa2:	bf00      	nop
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e12b      	b.n	800221a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d106      	bne.n	8001fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7fe feae 	bl	8000d38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2224      	movs	r2, #36	; 0x24
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002014:	f001 ff62 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8002018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4a81      	ldr	r2, [pc, #516]	; (8002224 <HAL_I2C_Init+0x274>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d807      	bhi.n	8002034 <HAL_I2C_Init+0x84>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	4a80      	ldr	r2, [pc, #512]	; (8002228 <HAL_I2C_Init+0x278>)
 8002028:	4293      	cmp	r3, r2
 800202a:	bf94      	ite	ls
 800202c:	2301      	movls	r3, #1
 800202e:	2300      	movhi	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	e006      	b.n	8002042 <HAL_I2C_Init+0x92>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a7d      	ldr	r2, [pc, #500]	; (800222c <HAL_I2C_Init+0x27c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	bf94      	ite	ls
 800203c:	2301      	movls	r3, #1
 800203e:	2300      	movhi	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e0e7      	b.n	800221a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4a78      	ldr	r2, [pc, #480]	; (8002230 <HAL_I2C_Init+0x280>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0c9b      	lsrs	r3, r3, #18
 8002054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	430a      	orrs	r2, r1
 8002068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a6a      	ldr	r2, [pc, #424]	; (8002224 <HAL_I2C_Init+0x274>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d802      	bhi.n	8002084 <HAL_I2C_Init+0xd4>
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3301      	adds	r3, #1
 8002082:	e009      	b.n	8002098 <HAL_I2C_Init+0xe8>
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800208a:	fb02 f303 	mul.w	r3, r2, r3
 800208e:	4a69      	ldr	r2, [pc, #420]	; (8002234 <HAL_I2C_Init+0x284>)
 8002090:	fba2 2303 	umull	r2, r3, r2, r3
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	3301      	adds	r3, #1
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	430b      	orrs	r3, r1
 800209e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	495c      	ldr	r1, [pc, #368]	; (8002224 <HAL_I2C_Init+0x274>)
 80020b4:	428b      	cmp	r3, r1
 80020b6:	d819      	bhi.n	80020ec <HAL_I2C_Init+0x13c>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1e59      	subs	r1, r3, #1
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80020c6:	1c59      	adds	r1, r3, #1
 80020c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80020cc:	400b      	ands	r3, r1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_I2C_Init+0x138>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	1e59      	subs	r1, r3, #1
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e6:	e051      	b.n	800218c <HAL_I2C_Init+0x1dc>
 80020e8:	2304      	movs	r3, #4
 80020ea:	e04f      	b.n	800218c <HAL_I2C_Init+0x1dc>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d111      	bne.n	8002118 <HAL_I2C_Init+0x168>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	440b      	add	r3, r1
 8002102:	fbb0 f3f3 	udiv	r3, r0, r3
 8002106:	3301      	adds	r3, #1
 8002108:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	e012      	b.n	800213e <HAL_I2C_Init+0x18e>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	1e58      	subs	r0, r3, #1
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6859      	ldr	r1, [r3, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	0099      	lsls	r1, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	fbb0 f3f3 	udiv	r3, r0, r3
 800212e:	3301      	adds	r3, #1
 8002130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002134:	2b00      	cmp	r3, #0
 8002136:	bf0c      	ite	eq
 8002138:	2301      	moveq	r3, #1
 800213a:	2300      	movne	r3, #0
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_I2C_Init+0x196>
 8002142:	2301      	movs	r3, #1
 8002144:	e022      	b.n	800218c <HAL_I2C_Init+0x1dc>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10e      	bne.n	800216c <HAL_I2C_Init+0x1bc>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1e58      	subs	r0, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6859      	ldr	r1, [r3, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	440b      	add	r3, r1
 800215c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800216a:	e00f      	b.n	800218c <HAL_I2C_Init+0x1dc>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1e58      	subs	r0, r3, #1
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6859      	ldr	r1, [r3, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	0099      	lsls	r1, r3, #2
 800217c:	440b      	add	r3, r1
 800217e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002182:	3301      	adds	r3, #1
 8002184:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002188:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	6809      	ldr	r1, [r1, #0]
 8002190:	4313      	orrs	r3, r2
 8002192:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6911      	ldr	r1, [r2, #16]
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68d2      	ldr	r2, [r2, #12]
 80021c6:	4311      	orrs	r1, r2
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	430b      	orrs	r3, r1
 80021ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f042 0201 	orr.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2220      	movs	r2, #32
 8002206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	000186a0 	.word	0x000186a0
 8002228:	001e847f 	.word	0x001e847f
 800222c:	003d08ff 	.word	0x003d08ff
 8002230:	431bde83 	.word	0x431bde83
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b088      	sub	sp, #32
 800223c:	af02      	add	r7, sp, #8
 800223e:	60f8      	str	r0, [r7, #12]
 8002240:	607a      	str	r2, [r7, #4]
 8002242:	461a      	mov	r2, r3
 8002244:	460b      	mov	r3, r1
 8002246:	817b      	strh	r3, [r7, #10]
 8002248:	4613      	mov	r3, r2
 800224a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800224c:	f7ff f846 	bl	80012dc <HAL_GetTick>
 8002250:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b20      	cmp	r3, #32
 800225c:	f040 80e0 	bne.w	8002420 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	9300      	str	r3, [sp, #0]
 8002264:	2319      	movs	r3, #25
 8002266:	2201      	movs	r2, #1
 8002268:	4970      	ldr	r1, [pc, #448]	; (800242c <HAL_I2C_Master_Transmit+0x1f4>)
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f964 	bl	8002538 <I2C_WaitOnFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002276:	2302      	movs	r3, #2
 8002278:	e0d3      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_I2C_Master_Transmit+0x50>
 8002284:	2302      	movs	r3, #2
 8002286:	e0cc      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1ea>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	2b01      	cmp	r3, #1
 800229c:	d007      	beq.n	80022ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	; 0x21
 80022c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2210      	movs	r2, #16
 80022ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	893a      	ldrh	r2, [r7, #8]
 80022de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4a50      	ldr	r2, [pc, #320]	; (8002430 <HAL_I2C_Master_Transmit+0x1f8>)
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022f0:	8979      	ldrh	r1, [r7, #10]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	6a3a      	ldr	r2, [r7, #32]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f89c 	bl	8002434 <I2C_MasterRequestWrite>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e08d      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	613b      	str	r3, [r7, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	613b      	str	r3, [r7, #16]
 800231a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800231c:	e066      	b.n	80023ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	6a39      	ldr	r1, [r7, #32]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f9de 	bl	80026e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00d      	beq.n	800234a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b04      	cmp	r3, #4
 8002334:	d107      	bne.n	8002346 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002344:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e06b      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234e:	781a      	ldrb	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002364:	b29b      	uxth	r3, r3
 8002366:	3b01      	subs	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002372:	3b01      	subs	r3, #1
 8002374:	b29a      	uxth	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b04      	cmp	r3, #4
 8002386:	d11b      	bne.n	80023c0 <HAL_I2C_Master_Transmit+0x188>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238c:	2b00      	cmp	r3, #0
 800238e:	d017      	beq.n	80023c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002394:	781a      	ldrb	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	3b01      	subs	r3, #1
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	6a39      	ldr	r1, [r7, #32]
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f000 f9ce 	bl	8002766 <I2C_WaitOnBTFFlagUntilTimeout>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00d      	beq.n	80023ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d107      	bne.n	80023e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e01a      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d194      	bne.n	800231e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002402:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2220      	movs	r2, #32
 8002408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002420:	2302      	movs	r3, #2
  }
}
 8002422:	4618      	mov	r0, r3
 8002424:	3718      	adds	r7, #24
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	00100002 	.word	0x00100002
 8002430:	ffff0000 	.word	0xffff0000

08002434 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	460b      	mov	r3, r1
 8002442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b08      	cmp	r3, #8
 800244e:	d006      	beq.n	800245e <I2C_MasterRequestWrite+0x2a>
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d003      	beq.n	800245e <I2C_MasterRequestWrite+0x2a>
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800245c:	d108      	bne.n	8002470 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	e00b      	b.n	8002488 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	2b12      	cmp	r3, #18
 8002476:	d107      	bne.n	8002488 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002486:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002494:	68f8      	ldr	r0, [r7, #12]
 8002496:	f000 f84f 	bl	8002538 <I2C_WaitOnFlagUntilTimeout>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ae:	d103      	bne.n	80024b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e035      	b.n	8002528 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024c4:	d108      	bne.n	80024d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024c6:	897b      	ldrh	r3, [r7, #10]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	461a      	mov	r2, r3
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80024d4:	611a      	str	r2, [r3, #16]
 80024d6:	e01b      	b.n	8002510 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024d8:	897b      	ldrh	r3, [r7, #10]
 80024da:	11db      	asrs	r3, r3, #7
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 0306 	and.w	r3, r3, #6
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	f063 030f 	orn	r3, r3, #15
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	490e      	ldr	r1, [pc, #56]	; (8002530 <I2C_MasterRequestWrite+0xfc>)
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 f875 	bl	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e010      	b.n	8002528 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002506:	897b      	ldrh	r3, [r7, #10]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4907      	ldr	r1, [pc, #28]	; (8002534 <I2C_MasterRequestWrite+0x100>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f865 	bl	80025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002526:	2300      	movs	r3, #0
}
 8002528:	4618      	mov	r0, r3
 800252a:	3718      	adds	r7, #24
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	00010008 	.word	0x00010008
 8002534:	00010002 	.word	0x00010002

08002538 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	603b      	str	r3, [r7, #0]
 8002544:	4613      	mov	r3, r2
 8002546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002548:	e025      	b.n	8002596 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002550:	d021      	beq.n	8002596 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002552:	f7fe fec3 	bl	80012dc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d302      	bcc.n	8002568 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d116      	bne.n	8002596 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2220      	movs	r2, #32
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f043 0220 	orr.w	r2, r3, #32
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e023      	b.n	80025de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	0c1b      	lsrs	r3, r3, #16
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d10d      	bne.n	80025bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	695b      	ldr	r3, [r3, #20]
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	4013      	ands	r3, r2
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	bf0c      	ite	eq
 80025b2:	2301      	moveq	r3, #1
 80025b4:	2300      	movne	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	461a      	mov	r2, r3
 80025ba:	e00c      	b.n	80025d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf0c      	ite	eq
 80025ce:	2301      	moveq	r3, #1
 80025d0:	2300      	movne	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	461a      	mov	r2, r3
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d0b6      	beq.n	800254a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b084      	sub	sp, #16
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	60f8      	str	r0, [r7, #12]
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025f4:	e051      	b.n	800269a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002604:	d123      	bne.n	800264e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002614:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800261e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2220      	movs	r2, #32
 800262a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f043 0204 	orr.w	r2, r3, #4
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e046      	b.n	80026dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002654:	d021      	beq.n	800269a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002656:	f7fe fe41 	bl	80012dc <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	429a      	cmp	r2, r3
 8002664:	d302      	bcc.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d116      	bne.n	800269a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2200      	movs	r2, #0
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f043 0220 	orr.w	r2, r3, #32
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e020      	b.n	80026dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d10c      	bne.n	80026be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	43da      	mvns	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4013      	ands	r3, r2
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	bf14      	ite	ne
 80026b6:	2301      	movne	r3, #1
 80026b8:	2300      	moveq	r3, #0
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	e00b      	b.n	80026d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	43da      	mvns	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	4013      	ands	r3, r2
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	bf14      	ite	ne
 80026d0:	2301      	movne	r3, #1
 80026d2:	2300      	moveq	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d18d      	bne.n	80025f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026f0:	e02d      	b.n	800274e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 f878 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e02d      	b.n	800275e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002708:	d021      	beq.n	800274e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800270a:	f7fe fde7 	bl	80012dc <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	429a      	cmp	r2, r3
 8002718:	d302      	bcc.n	8002720 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d116      	bne.n	800274e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	f043 0220 	orr.w	r2, r3, #32
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e007      	b.n	800275e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002758:	2b80      	cmp	r3, #128	; 0x80
 800275a:	d1ca      	bne.n	80026f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002772:	e02d      	b.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f837 	bl	80027e8 <I2C_IsAcknowledgeFailed>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e02d      	b.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800278a:	d021      	beq.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800278c:	f7fe fda6 	bl	80012dc <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	429a      	cmp	r2, r3
 800279a:	d302      	bcc.n	80027a2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d116      	bne.n	80027d0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	f043 0220 	orr.w	r2, r3, #32
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e007      	b.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d1ca      	bne.n	8002774 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027fe:	d11b      	bne.n	8002838 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002808:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002824:	f043 0204 	orr.w	r2, r3, #4
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
	...

08002848 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e128      	b.n	8002aac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a90      	ldr	r2, [pc, #576]	; (8002ab4 <HAL_I2S_Init+0x26c>)
 8002872:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7fe faa7 	bl	8000dc8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2202      	movs	r2, #2
 800287e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002890:	f023 030f 	bic.w	r3, r3, #15
 8002894:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2202      	movs	r2, #2
 800289c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d060      	beq.n	8002968 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80028ae:	2310      	movs	r3, #16
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	e001      	b.n	80028b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80028b4:	2320      	movs	r3, #32
 80028b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	2b20      	cmp	r3, #32
 80028be:	d802      	bhi.n	80028c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80028c6:	2001      	movs	r0, #1
 80028c8:	f001 fc1e 	bl	8004108 <HAL_RCCEx_GetPeriphCLKFreq>
 80028cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d6:	d125      	bne.n	8002924 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d010      	beq.n	8002902 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	461a      	mov	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	3305      	adds	r3, #5
 80028fe:	613b      	str	r3, [r7, #16]
 8002900:	e01f      	b.n	8002942 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	00db      	lsls	r3, r3, #3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	461a      	mov	r2, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	3305      	adds	r3, #5
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	e00e      	b.n	8002942 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	fbb2 f2f3 	udiv	r2, r2, r3
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	461a      	mov	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	fbb2 f3f3 	udiv	r3, r2, r3
 800293e:	3305      	adds	r3, #5
 8002940:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	4a5c      	ldr	r2, [pc, #368]	; (8002ab8 <HAL_I2S_Init+0x270>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	08db      	lsrs	r3, r3, #3
 800294c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	085b      	lsrs	r3, r3, #1
 800295e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	021b      	lsls	r3, r3, #8
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e003      	b.n	8002970 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002968:	2302      	movs	r3, #2
 800296a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d902      	bls.n	800297c <HAL_I2S_Init+0x134>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2bff      	cmp	r3, #255	; 0xff
 800297a:	d907      	bls.n	800298c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f043 0210 	orr.w	r2, r3, #16
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e08f      	b.n	8002aac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	ea42 0103 	orr.w	r1, r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	430a      	orrs	r2, r1
 800299e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80029aa:	f023 030f 	bic.w	r3, r3, #15
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6851      	ldr	r1, [r2, #4]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6892      	ldr	r2, [r2, #8]
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	68d2      	ldr	r2, [r2, #12]
 80029bc:	4311      	orrs	r1, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6992      	ldr	r2, [r2, #24]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d161      	bne.n	8002a9c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a38      	ldr	r2, [pc, #224]	; (8002abc <HAL_I2S_Init+0x274>)
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a37      	ldr	r2, [pc, #220]	; (8002ac0 <HAL_I2S_Init+0x278>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_I2S_Init+0x1a4>
 80029e8:	4b36      	ldr	r3, [pc, #216]	; (8002ac4 <HAL_I2S_Init+0x27c>)
 80029ea:	e001      	b.n	80029f0 <HAL_I2S_Init+0x1a8>
 80029ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	4932      	ldr	r1, [pc, #200]	; (8002ac0 <HAL_I2S_Init+0x278>)
 80029f8:	428a      	cmp	r2, r1
 80029fa:	d101      	bne.n	8002a00 <HAL_I2S_Init+0x1b8>
 80029fc:	4a31      	ldr	r2, [pc, #196]	; (8002ac4 <HAL_I2S_Init+0x27c>)
 80029fe:	e001      	b.n	8002a04 <HAL_I2S_Init+0x1bc>
 8002a00:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002a04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a08:	f023 030f 	bic.w	r3, r3, #15
 8002a0c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a2b      	ldr	r2, [pc, #172]	; (8002ac0 <HAL_I2S_Init+0x278>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d101      	bne.n	8002a1c <HAL_I2S_Init+0x1d4>
 8002a18:	4b2a      	ldr	r3, [pc, #168]	; (8002ac4 <HAL_I2S_Init+0x27c>)
 8002a1a:	e001      	b.n	8002a20 <HAL_I2S_Init+0x1d8>
 8002a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a20:	2202      	movs	r2, #2
 8002a22:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a25      	ldr	r2, [pc, #148]	; (8002ac0 <HAL_I2S_Init+0x278>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_I2S_Init+0x1ea>
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_I2S_Init+0x27c>)
 8002a30:	e001      	b.n	8002a36 <HAL_I2S_Init+0x1ee>
 8002a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a42:	d003      	beq.n	8002a4c <HAL_I2S_Init+0x204>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002a4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	e001      	b.n	8002a58 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002a54:	2300      	movs	r3, #0
 8002a56:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a62:	4313      	orrs	r3, r2
 8002a64:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002a76:	4313      	orrs	r3, r2
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	897b      	ldrh	r3, [r7, #10]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002a84:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a0d      	ldr	r2, [pc, #52]	; (8002ac0 <HAL_I2S_Init+0x278>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_I2S_Init+0x24c>
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <HAL_I2S_Init+0x27c>)
 8002a92:	e001      	b.n	8002a98 <HAL_I2S_Init+0x250>
 8002a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a98:	897a      	ldrh	r2, [r7, #10]
 8002a9a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3720      	adds	r7, #32
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	08002bbf 	.word	0x08002bbf
 8002ab8:	cccccccd 	.word	0xcccccccd
 8002abc:	08002fe9 	.word	0x08002fe9
 8002ac0:	40003800 	.word	0x40003800
 8002ac4:	40003400 	.word	0x40003400

08002ac8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	881a      	ldrh	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	1c9a      	adds	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d10e      	bne.n	8002b58 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff ffb8 	bl	8002ac8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	b292      	uxth	r2, r2
 8002b74:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	1c9a      	adds	r2, r3, #2
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10e      	bne.n	8002bb6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ba6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ff93 	bl	8002adc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b04      	cmp	r3, #4
 8002bd8:	d13a      	bne.n	8002c50 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d109      	bne.n	8002bf8 <I2S_IRQHandler+0x3a>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d102      	bne.n	8002bf8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff ffb4 	bl	8002b60 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d126      	bne.n	8002c50 <I2S_IRQHandler+0x92>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d11f      	bne.n	8002c50 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f043 0202 	orr.w	r2, r3, #2
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ff50 	bl	8002af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d136      	bne.n	8002cca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d109      	bne.n	8002c7a <I2S_IRQHandler+0xbc>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c70:	2b80      	cmp	r3, #128	; 0x80
 8002c72:	d102      	bne.n	8002c7a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff45 	bl	8002b04 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d122      	bne.n	8002cca <I2S_IRQHandler+0x10c>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b20      	cmp	r3, #32
 8002c90:	d11b      	bne.n	8002cca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ca0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbc:	f043 0204 	orr.w	r2, r3, #4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f7ff ff13 	bl	8002af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d002      	beq.n	8002d00 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cfe:	e160      	b.n	8002fc2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e15a      	b.n	8002fcc <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e152      	b.n	8002fcc <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	d002      	beq.n	8002d52 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d114      	bne.n	8002d7c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002d52:	887b      	ldrh	r3, [r7, #2]
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002d5c:	887b      	ldrh	r3, [r7, #2]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	865a      	strh	r2, [r3, #50]	; 0x32
 8002d7a:	e00b      	b.n	8002d94 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	887a      	ldrh	r2, [r7, #2]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	887a      	ldrh	r2, [r7, #2]
 8002d8c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	887a      	ldrh	r2, [r7, #2]
 8002d92:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2205      	movs	r2, #5
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	4a8b      	ldr	r2, [pc, #556]	; (8002fd4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002da8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	4a8a      	ldr	r2, [pc, #552]	; (8002fd8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002db0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	4a89      	ldr	r2, [pc, #548]	; (8002fdc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002db8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	4a83      	ldr	r2, [pc, #524]	; (8002fdc <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002dd0:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69db      	ldr	r3, [r3, #28]
 8002dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002de4:	d002      	beq.n	8002dec <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d16b      	bne.n	8002ec4 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002dec:	1d3b      	adds	r3, r7, #4
 8002dee:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a79      	ldr	r2, [pc, #484]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002dfe:	4b79      	ldr	r3, [pc, #484]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e00:	e001      	b.n	8002e06 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002e02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e06:	330c      	adds	r3, #12
 8002e08:	4619      	mov	r1, r3
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	f7fe fc52 	bl	80016bc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a70      	ldr	r2, [pc, #448]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d101      	bne.n	8002e26 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002e22:	4b70      	ldr	r3, [pc, #448]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e24:	e001      	b.n	8002e2a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	496b      	ldr	r1, [pc, #428]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e32:	428b      	cmp	r3, r1
 8002e34:	d101      	bne.n	8002e3a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002e36:	4b6b      	ldr	r3, [pc, #428]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e38:	e001      	b.n	8002e3e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002e3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002e44:	f107 0308 	add.w	r3, r7, #8
 8002e48:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	6819      	ldr	r1, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	461a      	mov	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f7fe fc2c 	bl	80016bc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0202 	orr.w	r2, r2, #2
 8002e72:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e82:	f000 809e 	beq.w	8002fc2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a55      	ldr	r2, [pc, #340]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d101      	bne.n	8002e94 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002e90:	4b54      	ldr	r3, [pc, #336]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002e92:	e001      	b.n	8002e98 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002e94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e98:	69da      	ldr	r2, [r3, #28]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4950      	ldr	r1, [pc, #320]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002ea4:	4b4f      	ldr	r3, [pc, #316]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002ea6:	e001      	b.n	8002eac <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002ea8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eb0:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	69da      	ldr	r2, [r3, #28]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ec0:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002ec2:	e07e      	b.n	8002fc2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed2:	d10a      	bne.n	8002eea <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	613b      	str	r3, [r7, #16]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002eea:	f107 0308 	add.w	r3, r7, #8
 8002eee:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	6819      	ldr	r1, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a38      	ldr	r2, [pc, #224]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d101      	bne.n	8002f06 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002f02:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f04:	e001      	b.n	8002f0a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002f06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	f7fe fbd2 	bl	80016bc <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a30      	ldr	r2, [pc, #192]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d101      	bne.n	8002f26 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002f22:	4b30      	ldr	r3, [pc, #192]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f24:	e001      	b.n	8002f2a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002f26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	492b      	ldr	r1, [pc, #172]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f32:	428b      	cmp	r3, r1
 8002f34:	d101      	bne.n	8002f3a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002f36:	4b2b      	ldr	r3, [pc, #172]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f38:	e001      	b.n	8002f3e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002f3a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f3e:	f042 0202 	orr.w	r2, r2, #2
 8002f42:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002f44:	1d3b      	adds	r3, r7, #4
 8002f46:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	4619      	mov	r1, r3
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f7fe fbad 	bl	80016bc <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f042 0201 	orr.w	r2, r2, #1
 8002f70:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f80:	d01e      	beq.n	8002fc0 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002f8c:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002f8e:	e001      	b.n	8002f94 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002f90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4911      	ldr	r1, [pc, #68]	; (8002fe0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002f9c:	428b      	cmp	r3, r1
 8002f9e:	d101      	bne.n	8002fa4 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002fa0:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002fa2:	e001      	b.n	8002fa8 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002fa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fa8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fac:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69da      	ldr	r2, [r3, #28]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fbc:	61da      	str	r2, [r3, #28]
 8002fbe:	e000      	b.n	8002fc2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002fc0:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3720      	adds	r7, #32
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	08003291 	.word	0x08003291
 8002fd8:	080032ad 	.word	0x080032ad
 8002fdc:	08003385 	.word	0x08003385
 8002fe0:	40003800 	.word	0x40003800
 8002fe4:	40003400 	.word	0x40003400

08002fe8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b088      	sub	sp, #32
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a92      	ldr	r2, [pc, #584]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003002:	4b92      	ldr	r3, [pc, #584]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003004:	e001      	b.n	800300a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a8b      	ldr	r2, [pc, #556]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003020:	4b8a      	ldr	r3, [pc, #552]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003022:	e001      	b.n	8003028 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003034:	d004      	beq.n	8003040 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	f040 8099 	bne.w	8003172 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b02      	cmp	r3, #2
 8003048:	d107      	bne.n	800305a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f9d5 	bl	8003404 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	2b01      	cmp	r3, #1
 8003062:	d107      	bne.n	8003074 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d002      	beq.n	8003074 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 fa78 	bl	8003564 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d13a      	bne.n	80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d035      	beq.n	80030f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a6e      	ldr	r2, [pc, #440]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003092:	4b6e      	ldr	r3, [pc, #440]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003094:	e001      	b.n	800309a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003096:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4969      	ldr	r1, [pc, #420]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030a2:	428b      	cmp	r3, r1
 80030a4:	d101      	bne.n	80030aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80030a6:	4b69      	ldr	r3, [pc, #420]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030a8:	e001      	b.n	80030ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80030aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80030c4:	2300      	movs	r3, #0
 80030c6:	60fb      	str	r3, [r7, #12]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f043 0202 	orr.w	r2, r3, #2
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff fcfe 	bl	8002af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	f040 80c3 	bne.w	8003286 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 80bd 	beq.w	8003286 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800311a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a49      	ldr	r2, [pc, #292]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003126:	4b49      	ldr	r3, [pc, #292]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003128:	e001      	b.n	800312e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800312a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4944      	ldr	r1, [pc, #272]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003136:	428b      	cmp	r3, r1
 8003138:	d101      	bne.n	800313e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800313a:	4b44      	ldr	r3, [pc, #272]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800313c:	e001      	b.n	8003142 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800313e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003142:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003146:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003148:	2300      	movs	r3, #0
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f043 0204 	orr.w	r2, r3, #4
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7ff fcc0 	bl	8002af0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003170:	e089      	b.n	8003286 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d107      	bne.n	800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b00      	cmp	r3, #0
 8003184:	d002      	beq.n	800318c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f96e 	bl	8003468 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d107      	bne.n	80031a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f9ad 	bl	8003500 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d12f      	bne.n	8003210 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d02a      	beq.n	8003210 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a1e      	ldr	r2, [pc, #120]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031d6:	e001      	b.n	80031dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80031d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4919      	ldr	r1, [pc, #100]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031e4:	428b      	cmp	r3, r1
 80031e6:	d101      	bne.n	80031ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80031e8:	4b18      	ldr	r3, [pc, #96]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031ea:	e001      	b.n	80031f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80031ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	f043 0202 	orr.w	r2, r3, #2
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7ff fc70 	bl	8002af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f003 0308 	and.w	r3, r3, #8
 8003216:	2b08      	cmp	r3, #8
 8003218:	d136      	bne.n	8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b00      	cmp	r3, #0
 8003222:	d031      	beq.n	8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a07      	ldr	r2, [pc, #28]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d101      	bne.n	8003232 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800322e:	4b07      	ldr	r3, [pc, #28]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003230:	e001      	b.n	8003236 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003232:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4902      	ldr	r1, [pc, #8]	; (8003248 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800323e:	428b      	cmp	r3, r1
 8003240:	d106      	bne.n	8003250 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003242:	4b02      	ldr	r3, [pc, #8]	; (800324c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003244:	e006      	b.n	8003254 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003246:	bf00      	nop
 8003248:	40003800 	.word	0x40003800
 800324c:	40003400 	.word	0x40003400
 8003250:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003254:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003258:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003268:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f043 0204 	orr.w	r2, r3, #4
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff fc36 	bl	8002af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003284:	e000      	b.n	8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003286:	bf00      	nop
}
 8003288:	bf00      	nop
 800328a:	3720      	adds	r7, #32
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f7fd fa84 	bl	80007ac <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80032a4:	bf00      	nop
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b8:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d155      	bne.n	800336e <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032d0:	d006      	beq.n	80032e0 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d11e      	bne.n	800331e <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a25      	ldr	r2, [pc, #148]	; (800337c <I2SEx_TxRxDMACplt+0xd0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <I2SEx_TxRxDMACplt+0x42>
 80032ea:	4b25      	ldr	r3, [pc, #148]	; (8003380 <I2SEx_TxRxDMACplt+0xd4>)
 80032ec:	e001      	b.n	80032f2 <I2SEx_TxRxDMACplt+0x46>
 80032ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4920      	ldr	r1, [pc, #128]	; (800337c <I2SEx_TxRxDMACplt+0xd0>)
 80032fa:	428b      	cmp	r3, r1
 80032fc:	d101      	bne.n	8003302 <I2SEx_TxRxDMACplt+0x56>
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <I2SEx_TxRxDMACplt+0xd4>)
 8003300:	e001      	b.n	8003306 <I2SEx_TxRxDMACplt+0x5a>
 8003302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003306:	f022 0201 	bic.w	r2, r2, #1
 800330a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0202 	bic.w	r2, r2, #2
 800331a:	605a      	str	r2, [r3, #4]
 800331c:	e01d      	b.n	800335a <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a12      	ldr	r2, [pc, #72]	; (800337c <I2SEx_TxRxDMACplt+0xd0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <I2SEx_TxRxDMACplt+0x90>
 8003338:	4b11      	ldr	r3, [pc, #68]	; (8003380 <I2SEx_TxRxDMACplt+0xd4>)
 800333a:	e001      	b.n	8003340 <I2SEx_TxRxDMACplt+0x94>
 800333c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	490d      	ldr	r1, [pc, #52]	; (800337c <I2SEx_TxRxDMACplt+0xd0>)
 8003348:	428b      	cmp	r3, r1
 800334a:	d101      	bne.n	8003350 <I2SEx_TxRxDMACplt+0xa4>
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <I2SEx_TxRxDMACplt+0xd4>)
 800334e:	e001      	b.n	8003354 <I2SEx_TxRxDMACplt+0xa8>
 8003350:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003354:	f022 0202 	bic.w	r2, r2, #2
 8003358:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f7fd fa34 	bl	80007dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40003800 	.word	0x40003800
 8003380:	40003400 	.word	0x40003400

08003384 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 0203 	bic.w	r2, r2, #3
 80033a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a15      	ldr	r2, [pc, #84]	; (80033fc <I2SEx_TxRxDMAError+0x78>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <I2SEx_TxRxDMAError+0x2c>
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <I2SEx_TxRxDMAError+0x7c>)
 80033ae:	e001      	b.n	80033b4 <I2SEx_TxRxDMAError+0x30>
 80033b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033b4:	685a      	ldr	r2, [r3, #4]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4910      	ldr	r1, [pc, #64]	; (80033fc <I2SEx_TxRxDMAError+0x78>)
 80033bc:	428b      	cmp	r3, r1
 80033be:	d101      	bne.n	80033c4 <I2SEx_TxRxDMAError+0x40>
 80033c0:	4b0f      	ldr	r3, [pc, #60]	; (8003400 <I2SEx_TxRxDMAError+0x7c>)
 80033c2:	e001      	b.n	80033c8 <I2SEx_TxRxDMAError+0x44>
 80033c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033c8:	f022 0203 	bic.w	r2, r2, #3
 80033cc:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e6:	f043 0208 	orr.w	r2, r3, #8
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	f7ff fb7e 	bl	8002af0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80033f4:	bf00      	nop
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40003800 	.word	0x40003800
 8003400:	40003400 	.word	0x40003400

08003404 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c99      	adds	r1, r3, #2
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6251      	str	r1, [r2, #36]	; 0x24
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d113      	bne.n	800345e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003444:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d106      	bne.n	800345e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7fd f9bf 	bl	80007dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c99      	adds	r1, r3, #2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6251      	str	r1, [r2, #36]	; 0x24
 800347a:	8819      	ldrh	r1, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <I2SEx_TxISR_I2SExt+0x90>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d101      	bne.n	800348a <I2SEx_TxISR_I2SExt+0x22>
 8003486:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <I2SEx_TxISR_I2SExt+0x94>)
 8003488:	e001      	b.n	800348e <I2SEx_TxISR_I2SExt+0x26>
 800348a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800348e:	460a      	mov	r2, r1
 8003490:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d121      	bne.n	80034ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a12      	ldr	r2, [pc, #72]	; (80034f8 <I2SEx_TxISR_I2SExt+0x90>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d101      	bne.n	80034b8 <I2SEx_TxISR_I2SExt+0x50>
 80034b4:	4b11      	ldr	r3, [pc, #68]	; (80034fc <I2SEx_TxISR_I2SExt+0x94>)
 80034b6:	e001      	b.n	80034bc <I2SEx_TxISR_I2SExt+0x54>
 80034b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	490d      	ldr	r1, [pc, #52]	; (80034f8 <I2SEx_TxISR_I2SExt+0x90>)
 80034c4:	428b      	cmp	r3, r1
 80034c6:	d101      	bne.n	80034cc <I2SEx_TxISR_I2SExt+0x64>
 80034c8:	4b0c      	ldr	r3, [pc, #48]	; (80034fc <I2SEx_TxISR_I2SExt+0x94>)
 80034ca:	e001      	b.n	80034d0 <I2SEx_TxISR_I2SExt+0x68>
 80034cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7fd f977 	bl	80007dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034ee:	bf00      	nop
 80034f0:	3708      	adds	r7, #8
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40003800 	.word	0x40003800
 80034fc:	40003400 	.word	0x40003400

08003500 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68d8      	ldr	r0, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	1c99      	adds	r1, r3, #2
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003518:	b282      	uxth	r2, r0
 800351a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800352e:	b29b      	uxth	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d113      	bne.n	800355c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003542:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd f940 	bl	80007dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a20      	ldr	r2, [pc, #128]	; (80035f4 <I2SEx_RxISR_I2SExt+0x90>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d101      	bne.n	800357a <I2SEx_RxISR_I2SExt+0x16>
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <I2SEx_RxISR_I2SExt+0x94>)
 8003578:	e001      	b.n	800357e <I2SEx_RxISR_I2SExt+0x1a>
 800357a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800357e:	68d8      	ldr	r0, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	1c99      	adds	r1, r3, #2
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	62d1      	str	r1, [r2, #44]	; 0x2c
 800358a:	b282      	uxth	r2, r0
 800358c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d121      	bne.n	80035ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a12      	ldr	r2, [pc, #72]	; (80035f4 <I2SEx_RxISR_I2SExt+0x90>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d101      	bne.n	80035b4 <I2SEx_RxISR_I2SExt+0x50>
 80035b0:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <I2SEx_RxISR_I2SExt+0x94>)
 80035b2:	e001      	b.n	80035b8 <I2SEx_RxISR_I2SExt+0x54>
 80035b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	490d      	ldr	r1, [pc, #52]	; (80035f4 <I2SEx_RxISR_I2SExt+0x90>)
 80035c0:	428b      	cmp	r3, r1
 80035c2:	d101      	bne.n	80035c8 <I2SEx_RxISR_I2SExt+0x64>
 80035c4:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <I2SEx_RxISR_I2SExt+0x94>)
 80035c6:	e001      	b.n	80035cc <I2SEx_RxISR_I2SExt+0x68>
 80035c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7fd f8f9 	bl	80007dc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	40003800 	.word	0x40003800
 80035f8:	40003400 	.word	0x40003400

080035fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e267      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d075      	beq.n	8003706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800361a:	4b88      	ldr	r3, [pc, #544]	; (800383c <HAL_RCC_OscConfig+0x240>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b04      	cmp	r3, #4
 8003624:	d00c      	beq.n	8003640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003626:	4b85      	ldr	r3, [pc, #532]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800362e:	2b08      	cmp	r3, #8
 8003630:	d112      	bne.n	8003658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003632:	4b82      	ldr	r3, [pc, #520]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363e:	d10b      	bne.n	8003658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	4b7e      	ldr	r3, [pc, #504]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d05b      	beq.n	8003704 <HAL_RCC_OscConfig+0x108>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d157      	bne.n	8003704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e242      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003660:	d106      	bne.n	8003670 <HAL_RCC_OscConfig+0x74>
 8003662:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a75      	ldr	r2, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e01d      	b.n	80036ac <HAL_RCC_OscConfig+0xb0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0x98>
 800367a:	4b70      	ldr	r3, [pc, #448]	; (800383c <HAL_RCC_OscConfig+0x240>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6f      	ldr	r2, [pc, #444]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b6d      	ldr	r3, [pc, #436]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a6c      	ldr	r2, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x240>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e00b      	b.n	80036ac <HAL_RCC_OscConfig+0xb0>
 8003694:	4b69      	ldr	r3, [pc, #420]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a68      	ldr	r2, [pc, #416]	; (800383c <HAL_RCC_OscConfig+0x240>)
 800369a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b66      	ldr	r3, [pc, #408]	; (800383c <HAL_RCC_OscConfig+0x240>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a65      	ldr	r2, [pc, #404]	; (800383c <HAL_RCC_OscConfig+0x240>)
 80036a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d013      	beq.n	80036dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fd fe12 	bl	80012dc <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036bc:	f7fd fe0e 	bl	80012dc <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e207      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b5b      	ldr	r3, [pc, #364]	; (800383c <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0xc0>
 80036da:	e014      	b.n	8003706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fd fdfe 	bl	80012dc <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fd fdfa 	bl	80012dc <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e1f3      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f6:	4b51      	ldr	r3, [pc, #324]	; (800383c <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0xe8>
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d063      	beq.n	80037da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003712:	4b4a      	ldr	r3, [pc, #296]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00b      	beq.n	8003736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800371e:	4b47      	ldr	r3, [pc, #284]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003726:	2b08      	cmp	r3, #8
 8003728:	d11c      	bne.n	8003764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800372a:	4b44      	ldr	r3, [pc, #272]	; (800383c <HAL_RCC_OscConfig+0x240>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d116      	bne.n	8003764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003736:	4b41      	ldr	r3, [pc, #260]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_RCC_OscConfig+0x152>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d001      	beq.n	800374e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e1c7      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	4937      	ldr	r1, [pc, #220]	; (800383c <HAL_RCC_OscConfig+0x240>)
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003762:	e03a      	b.n	80037da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d020      	beq.n	80037ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800376c:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_RCC_OscConfig+0x244>)
 800376e:	2201      	movs	r2, #1
 8003770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003772:	f7fd fdb3 	bl	80012dc <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003778:	e008      	b.n	800378c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377a:	f7fd fdaf 	bl	80012dc <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	2b02      	cmp	r3, #2
 8003786:	d901      	bls.n	800378c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e1a8      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800378c:	4b2b      	ldr	r3, [pc, #172]	; (800383c <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0302 	and.w	r3, r3, #2
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0f0      	beq.n	800377a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003798:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_RCC_OscConfig+0x240>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4925      	ldr	r1, [pc, #148]	; (800383c <HAL_RCC_OscConfig+0x240>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	600b      	str	r3, [r1, #0]
 80037ac:	e015      	b.n	80037da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ae:	4b24      	ldr	r3, [pc, #144]	; (8003840 <HAL_RCC_OscConfig+0x244>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fd fd92 	bl	80012dc <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037bc:	f7fd fd8e 	bl	80012dc <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e187      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d036      	beq.n	8003854 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d016      	beq.n	800381c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ee:	4b15      	ldr	r3, [pc, #84]	; (8003844 <HAL_RCC_OscConfig+0x248>)
 80037f0:	2201      	movs	r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fd fd72 	bl	80012dc <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037fc:	f7fd fd6e 	bl	80012dc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e167      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800380e:	4b0b      	ldr	r3, [pc, #44]	; (800383c <HAL_RCC_OscConfig+0x240>)
 8003810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x200>
 800381a:	e01b      	b.n	8003854 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800381c:	4b09      	ldr	r3, [pc, #36]	; (8003844 <HAL_RCC_OscConfig+0x248>)
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003822:	f7fd fd5b 	bl	80012dc <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003828:	e00e      	b.n	8003848 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800382a:	f7fd fd57 	bl	80012dc <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d907      	bls.n	8003848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e150      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
 800383c:	40023800 	.word	0x40023800
 8003840:	42470000 	.word	0x42470000
 8003844:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	4b88      	ldr	r3, [pc, #544]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 800384a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d1ea      	bne.n	800382a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8097 	beq.w	8003990 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003862:	2300      	movs	r3, #0
 8003864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003866:	4b81      	ldr	r3, [pc, #516]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	4b7d      	ldr	r3, [pc, #500]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	4a7c      	ldr	r2, [pc, #496]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 800387c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003880:	6413      	str	r3, [r2, #64]	; 0x40
 8003882:	4b7a      	ldr	r3, [pc, #488]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388e:	2301      	movs	r3, #1
 8003890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003892:	4b77      	ldr	r3, [pc, #476]	; (8003a70 <HAL_RCC_OscConfig+0x474>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800389a:	2b00      	cmp	r3, #0
 800389c:	d118      	bne.n	80038d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800389e:	4b74      	ldr	r3, [pc, #464]	; (8003a70 <HAL_RCC_OscConfig+0x474>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a73      	ldr	r2, [pc, #460]	; (8003a70 <HAL_RCC_OscConfig+0x474>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038aa:	f7fd fd17 	bl	80012dc <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b2:	f7fd fd13 	bl	80012dc <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e10c      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c4:	4b6a      	ldr	r3, [pc, #424]	; (8003a70 <HAL_RCC_OscConfig+0x474>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d106      	bne.n	80038e6 <HAL_RCC_OscConfig+0x2ea>
 80038d8:	4b64      	ldr	r3, [pc, #400]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a63      	ldr	r2, [pc, #396]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
 80038e4:	e01c      	b.n	8003920 <HAL_RCC_OscConfig+0x324>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b05      	cmp	r3, #5
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x30c>
 80038ee:	4b5f      	ldr	r3, [pc, #380]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 80038f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f2:	4a5e      	ldr	r2, [pc, #376]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 80038f4:	f043 0304 	orr.w	r3, r3, #4
 80038f8:	6713      	str	r3, [r2, #112]	; 0x70
 80038fa:	4b5c      	ldr	r3, [pc, #368]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 80038fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fe:	4a5b      	ldr	r2, [pc, #364]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003900:	f043 0301 	orr.w	r3, r3, #1
 8003904:	6713      	str	r3, [r2, #112]	; 0x70
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0x324>
 8003908:	4b58      	ldr	r3, [pc, #352]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 800390a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390c:	4a57      	ldr	r2, [pc, #348]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 800390e:	f023 0301 	bic.w	r3, r3, #1
 8003912:	6713      	str	r3, [r2, #112]	; 0x70
 8003914:	4b55      	ldr	r3, [pc, #340]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4a54      	ldr	r2, [pc, #336]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 800391a:	f023 0304 	bic.w	r3, r3, #4
 800391e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003928:	f7fd fcd8 	bl	80012dc <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392e:	e00a      	b.n	8003946 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fd fcd4 	bl	80012dc <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0cb      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003946:	4b49      	ldr	r3, [pc, #292]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0ee      	beq.n	8003930 <HAL_RCC_OscConfig+0x334>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003954:	f7fd fcc2 	bl	80012dc <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395a:	e00a      	b.n	8003972 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395c:	f7fd fcbe 	bl	80012dc <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	; 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e0b5      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003972:	4b3e      	ldr	r3, [pc, #248]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1ee      	bne.n	800395c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d105      	bne.n	8003990 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003984:	4b39      	ldr	r3, [pc, #228]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	4a38      	ldr	r2, [pc, #224]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 800398a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a1 	beq.w	8003adc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800399a:	4b34      	ldr	r3, [pc, #208]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 030c 	and.w	r3, r3, #12
 80039a2:	2b08      	cmp	r3, #8
 80039a4:	d05c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d141      	bne.n	8003a32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ae:	4b31      	ldr	r3, [pc, #196]	; (8003a74 <HAL_RCC_OscConfig+0x478>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fd fc92 	bl	80012dc <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fc8e 	bl	80012dc <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e087      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ce:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f0      	bne.n	80039bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	69da      	ldr	r2, [r3, #28]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	019b      	lsls	r3, r3, #6
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f0:	085b      	lsrs	r3, r3, #1
 80039f2:	3b01      	subs	r3, #1
 80039f4:	041b      	lsls	r3, r3, #16
 80039f6:	431a      	orrs	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fc:	061b      	lsls	r3, r3, #24
 80039fe:	491b      	ldr	r1, [pc, #108]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b1b      	ldr	r3, [pc, #108]	; (8003a74 <HAL_RCC_OscConfig+0x478>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fd fc67 	bl	80012dc <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a12:	f7fd fc63 	bl	80012dc <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e05c      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x416>
 8003a30:	e054      	b.n	8003adc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	4b10      	ldr	r3, [pc, #64]	; (8003a74 <HAL_RCC_OscConfig+0x478>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fd fc50 	bl	80012dc <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fd fc4c 	bl	80012dc <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e045      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_RCC_OscConfig+0x470>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x444>
 8003a5e:	e03d      	b.n	8003adc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e038      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40007000 	.word	0x40007000
 8003a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a78:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <HAL_RCC_OscConfig+0x4ec>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d028      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d121      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d11a      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d111      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	085b      	lsrs	r3, r3, #1
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d107      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023800 	.word	0x40023800

08003aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0cc      	b.n	8003c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b68      	ldr	r3, [pc, #416]	; (8003ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d90c      	bls.n	8003b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b65      	ldr	r3, [pc, #404]	; (8003ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b63      	ldr	r3, [pc, #396]	; (8003ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0b8      	b.n	8003c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d020      	beq.n	8003b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b40:	4b59      	ldr	r3, [pc, #356]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4a58      	ldr	r2, [pc, #352]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d005      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b58:	4b53      	ldr	r3, [pc, #332]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	4a52      	ldr	r2, [pc, #328]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b64:	4b50      	ldr	r3, [pc, #320]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	494d      	ldr	r1, [pc, #308]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d044      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d107      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8a:	4b47      	ldr	r3, [pc, #284]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d119      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e07f      	b.n	8003c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d003      	beq.n	8003baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003baa:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e06f      	b.n	8003c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4b3b      	ldr	r3, [pc, #236]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e067      	b.n	8003c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bca:	4b37      	ldr	r3, [pc, #220]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4934      	ldr	r1, [pc, #208]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bdc:	f7fd fb7e 	bl	80012dc <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be4:	f7fd fb7a 	bl	80012dc <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e04f      	b.n	8003c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	4b2b      	ldr	r3, [pc, #172]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 020c 	and.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d1eb      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d20c      	bcs.n	8003c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b22      	ldr	r3, [pc, #136]	; (8003ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	4b20      	ldr	r3, [pc, #128]	; (8003ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d001      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e032      	b.n	8003c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d008      	beq.n	8003c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c40:	4b19      	ldr	r3, [pc, #100]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	4916      	ldr	r1, [pc, #88]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d009      	beq.n	8003c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c5e:	4b12      	ldr	r3, [pc, #72]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	490e      	ldr	r1, [pc, #56]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c72:	f000 f821 	bl	8003cb8 <HAL_RCC_GetSysClockFreq>
 8003c76:	4602      	mov	r2, r0
 8003c78:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	091b      	lsrs	r3, r3, #4
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	490a      	ldr	r1, [pc, #40]	; (8003cac <HAL_RCC_ClockConfig+0x1c0>)
 8003c84:	5ccb      	ldrb	r3, [r1, r3]
 8003c86:	fa22 f303 	lsr.w	r3, r2, r3
 8003c8a:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c8e:	4b09      	ldr	r3, [pc, #36]	; (8003cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fd fade 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40023c00 	.word	0x40023c00
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	08005b90 	.word	0x08005b90
 8003cb0:	20000004 	.word	0x20000004
 8003cb4:	20000008 	.word	0x20000008

08003cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cbc:	b094      	sub	sp, #80	; 0x50
 8003cbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cc8:	2300      	movs	r3, #0
 8003cca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd0:	4b79      	ldr	r3, [pc, #484]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 030c 	and.w	r3, r3, #12
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d00d      	beq.n	8003cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	f200 80e1 	bhi.w	8003ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0x34>
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d003      	beq.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cea:	e0db      	b.n	8003ea4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cec:	4b73      	ldr	r3, [pc, #460]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8003cee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cf0:	e0db      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cf2:	4b73      	ldr	r3, [pc, #460]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cf4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cf6:	e0d8      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cf8:	4b6f      	ldr	r3, [pc, #444]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d02:	4b6d      	ldr	r3, [pc, #436]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d063      	beq.n	8003dd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d0e:	4b6a      	ldr	r3, [pc, #424]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	099b      	lsrs	r3, r3, #6
 8003d14:	2200      	movs	r2, #0
 8003d16:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d20:	633b      	str	r3, [r7, #48]	; 0x30
 8003d22:	2300      	movs	r3, #0
 8003d24:	637b      	str	r3, [r7, #52]	; 0x34
 8003d26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	462b      	mov	r3, r5
 8003d2e:	f04f 0000 	mov.w	r0, #0
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	0159      	lsls	r1, r3, #5
 8003d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d3c:	0150      	lsls	r0, r2, #5
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	4621      	mov	r1, r4
 8003d44:	1a51      	subs	r1, r2, r1
 8003d46:	6139      	str	r1, [r7, #16]
 8003d48:	4629      	mov	r1, r5
 8003d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d4e:	617b      	str	r3, [r7, #20]
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	018b      	lsls	r3, r1, #6
 8003d60:	4651      	mov	r1, sl
 8003d62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d66:	4651      	mov	r1, sl
 8003d68:	018a      	lsls	r2, r1, #6
 8003d6a:	4651      	mov	r1, sl
 8003d6c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d70:	4659      	mov	r1, fp
 8003d72:	eb63 0901 	sbc.w	r9, r3, r1
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d8a:	4690      	mov	r8, r2
 8003d8c:	4699      	mov	r9, r3
 8003d8e:	4623      	mov	r3, r4
 8003d90:	eb18 0303 	adds.w	r3, r8, r3
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	462b      	mov	r3, r5
 8003d98:	eb49 0303 	adc.w	r3, r9, r3
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	f04f 0300 	mov.w	r3, #0
 8003da6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003daa:	4629      	mov	r1, r5
 8003dac:	024b      	lsls	r3, r1, #9
 8003dae:	4621      	mov	r1, r4
 8003db0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003db4:	4621      	mov	r1, r4
 8003db6:	024a      	lsls	r2, r1, #9
 8003db8:	4610      	mov	r0, r2
 8003dba:	4619      	mov	r1, r3
 8003dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dc8:	f7fc fa5a 	bl	8000280 <__aeabi_uldivmod>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd4:	e058      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dd6:	4b38      	ldr	r3, [pc, #224]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	099b      	lsrs	r3, r3, #6
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	4611      	mov	r1, r2
 8003de2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003de6:	623b      	str	r3, [r7, #32]
 8003de8:	2300      	movs	r3, #0
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003df0:	4642      	mov	r2, r8
 8003df2:	464b      	mov	r3, r9
 8003df4:	f04f 0000 	mov.w	r0, #0
 8003df8:	f04f 0100 	mov.w	r1, #0
 8003dfc:	0159      	lsls	r1, r3, #5
 8003dfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e02:	0150      	lsls	r0, r2, #5
 8003e04:	4602      	mov	r2, r0
 8003e06:	460b      	mov	r3, r1
 8003e08:	4641      	mov	r1, r8
 8003e0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e0e:	4649      	mov	r1, r9
 8003e10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e28:	ebb2 040a 	subs.w	r4, r2, sl
 8003e2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	00eb      	lsls	r3, r5, #3
 8003e3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e3e:	00e2      	lsls	r2, r4, #3
 8003e40:	4614      	mov	r4, r2
 8003e42:	461d      	mov	r5, r3
 8003e44:	4643      	mov	r3, r8
 8003e46:	18e3      	adds	r3, r4, r3
 8003e48:	603b      	str	r3, [r7, #0]
 8003e4a:	464b      	mov	r3, r9
 8003e4c:	eb45 0303 	adc.w	r3, r5, r3
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	f04f 0300 	mov.w	r3, #0
 8003e5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e5e:	4629      	mov	r1, r5
 8003e60:	028b      	lsls	r3, r1, #10
 8003e62:	4621      	mov	r1, r4
 8003e64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e68:	4621      	mov	r1, r4
 8003e6a:	028a      	lsls	r2, r1, #10
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4619      	mov	r1, r3
 8003e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e72:	2200      	movs	r2, #0
 8003e74:	61bb      	str	r3, [r7, #24]
 8003e76:	61fa      	str	r2, [r7, #28]
 8003e78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e7c:	f7fc fa00 	bl	8000280 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	0c1b      	lsrs	r3, r3, #16
 8003e8e:	f003 0303 	and.w	r3, r3, #3
 8003e92:	3301      	adds	r3, #1
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea2:	e002      	b.n	8003eaa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ea4:	4b05      	ldr	r3, [pc, #20]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ea6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3750      	adds	r7, #80	; 0x50
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	00f42400 	.word	0x00f42400
 8003ec0:	007a1200 	.word	0x007a1200

08003ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ec8:	4b03      	ldr	r3, [pc, #12]	; (8003ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	20000004 	.word	0x20000004

08003edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee0:	f7ff fff0 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	0a9b      	lsrs	r3, r3, #10
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	4903      	ldr	r1, [pc, #12]	; (8003f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ef2:	5ccb      	ldrb	r3, [r1, r3]
 8003ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	40023800 	.word	0x40023800
 8003f00:	08005ba0 	.word	0x08005ba0

08003f04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f08:	f7ff ffdc 	bl	8003ec4 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	0b5b      	lsrs	r3, r3, #13
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	; (8003f28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40023800 	.word	0x40023800
 8003f28:	08005ba0 	.word	0x08005ba0

08003f2c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d105      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d035      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f54:	4b67      	ldr	r3, [pc, #412]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f5a:	f7fd f9bf 	bl	80012dc <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f60:	e008      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f62:	f7fd f9bb 	bl	80012dc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e0ba      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f74:	4b60      	ldr	r3, [pc, #384]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	019a      	lsls	r2, r3, #6
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	071b      	lsls	r3, r3, #28
 8003f8c:	495a      	ldr	r1, [pc, #360]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f94:	4b57      	ldr	r3, [pc, #348]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f9a:	f7fd f99f 	bl	80012dc <HAL_GetTick>
 8003f9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fa2:	f7fd f99b 	bl	80012dc <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e09a      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fb4:	4b50      	ldr	r3, [pc, #320]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 8083 	beq.w	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fce:	2300      	movs	r3, #0
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	4a48      	ldr	r2, [pc, #288]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fde:	4b46      	ldr	r3, [pc, #280]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	60fb      	str	r3, [r7, #12]
 8003fe8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003fea:	4b44      	ldr	r3, [pc, #272]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a43      	ldr	r2, [pc, #268]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ff6:	f7fd f971 	bl	80012dc <HAL_GetTick>
 8003ffa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003ffe:	f7fd f96d 	bl	80012dc <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e06c      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004010:	4b3a      	ldr	r3, [pc, #232]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800401c:	4b36      	ldr	r3, [pc, #216]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800401e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004024:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d02f      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	429a      	cmp	r2, r3
 8004038:	d028      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800403a:	4b2f      	ldr	r3, [pc, #188]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004042:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004044:	4b2e      	ldr	r3, [pc, #184]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004046:	2201      	movs	r2, #1
 8004048:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800404a:	4b2d      	ldr	r3, [pc, #180]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004050:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004056:	4b28      	ldr	r3, [pc, #160]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d114      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004062:	f7fd f93b 	bl	80012dc <HAL_GetTick>
 8004066:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004068:	e00a      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fd f937 	bl	80012dc <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	; 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e034      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004080:	4b1d      	ldr	r3, [pc, #116]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ee      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004098:	d10d      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800409a:	4b17      	ldr	r3, [pc, #92]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ae:	4912      	ldr	r1, [pc, #72]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]
 80040b4:	e005      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	4a0f      	ldr	r2, [pc, #60]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040bc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040c0:	6093      	str	r3, [r2, #8]
 80040c2:	4b0d      	ldr	r3, [pc, #52]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ce:	490a      	ldr	r1, [pc, #40]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0308 	and.w	r3, r3, #8
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	7c1a      	ldrb	r2, [r3, #16]
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80040e6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	42470068 	.word	0x42470068
 80040f8:	40023800 	.word	0x40023800
 80040fc:	40007000 	.word	0x40007000
 8004100:	42470e40 	.word	0x42470e40
 8004104:	424711e0 	.word	0x424711e0

08004108 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d13e      	bne.n	80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004126:	4b23      	ldr	r3, [pc, #140]	; (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d12f      	bne.n	800419c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800413c:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800413e:	617b      	str	r3, [r7, #20]
          break;
 8004140:	e02f      	b.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004142:	4b1c      	ldr	r3, [pc, #112]	; (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800414e:	d108      	bne.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004150:	4b18      	ldr	r3, [pc, #96]	; (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004158:	4a18      	ldr	r2, [pc, #96]	; (80041bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800415a:	fbb2 f3f3 	udiv	r3, r2, r3
 800415e:	613b      	str	r3, [r7, #16]
 8004160:	e007      	b.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004162:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800416a:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004172:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004178:	099b      	lsrs	r3, r3, #6
 800417a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	fb02 f303 	mul.w	r3, r2, r3
 8004184:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418c:	0f1b      	lsrs	r3, r3, #28
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	fbb2 f3f3 	udiv	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]
          break;
 800419a:	e002      	b.n	80041a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	617b      	str	r3, [r7, #20]
          break;
 80041a0:	bf00      	nop
        }
      }
      break;
 80041a2:	bf00      	nop
    }
  }
  return frequency;
 80041a4:	697b      	ldr	r3, [r7, #20]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800
 80041b8:	00bb8000 	.word	0x00bb8000
 80041bc:	007a1200 	.word	0x007a1200
 80041c0:	00f42400 	.word	0x00f42400

080041c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e041      	b.n	800425a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc fee6 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3304      	adds	r3, #4
 8004200:	4619      	mov	r1, r3
 8004202:	4610      	mov	r0, r2
 8004204:	f000 fa88 	bl	8004718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
	...

08004264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	d001      	beq.n	800427c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e044      	b.n	8004306 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1e      	ldr	r2, [pc, #120]	; (8004314 <HAL_TIM_Base_Start_IT+0xb0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d018      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x6c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a6:	d013      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x6c>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a1a      	ldr	r2, [pc, #104]	; (8004318 <HAL_TIM_Base_Start_IT+0xb4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00e      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x6c>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a19      	ldr	r2, [pc, #100]	; (800431c <HAL_TIM_Base_Start_IT+0xb8>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x6c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a17      	ldr	r2, [pc, #92]	; (8004320 <HAL_TIM_Base_Start_IT+0xbc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0x6c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <HAL_TIM_Base_Start_IT+0xc0>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d111      	bne.n	80042f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2b06      	cmp	r3, #6
 80042e0:	d010      	beq.n	8004304 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f042 0201 	orr.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f2:	e007      	b.n	8004304 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0201 	orr.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	40010000 	.word	0x40010000
 8004318:	40000400 	.word	0x40000400
 800431c:	40000800 	.word	0x40000800
 8004320:	40000c00 	.word	0x40000c00
 8004324:	40014000 	.word	0x40014000

08004328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d122      	bne.n	8004384 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b02      	cmp	r3, #2
 800434a:	d11b      	bne.n	8004384 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f06f 0202 	mvn.w	r2, #2
 8004354:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f9b5 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 8004370:	e005      	b.n	800437e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9a7 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f9b8 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f003 0304 	and.w	r3, r3, #4
 800438e:	2b04      	cmp	r3, #4
 8004390:	d122      	bne.n	80043d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d11b      	bne.n	80043d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f06f 0204 	mvn.w	r2, #4
 80043a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2202      	movs	r2, #2
 80043ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f98b 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 80043c4:	e005      	b.n	80043d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f97d 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f98e 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d122      	bne.n	800442c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d11b      	bne.n	800442c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0208 	mvn.w	r2, #8
 80043fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2204      	movs	r2, #4
 8004402:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f961 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 8004418:	e005      	b.n	8004426 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f953 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f964 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f003 0310 	and.w	r3, r3, #16
 8004436:	2b10      	cmp	r3, #16
 8004438:	d122      	bne.n	8004480 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0310 	and.w	r3, r3, #16
 8004444:	2b10      	cmp	r3, #16
 8004446:	d11b      	bne.n	8004480 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f06f 0210 	mvn.w	r2, #16
 8004450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2208      	movs	r2, #8
 8004456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f937 	bl	80046da <HAL_TIM_IC_CaptureCallback>
 800446c:	e005      	b.n	800447a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f929 	bl	80046c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f93a 	bl	80046ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10e      	bne.n	80044ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b01      	cmp	r3, #1
 800449a:	d107      	bne.n	80044ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0201 	mvn.w	r2, #1
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc f9b6 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b80      	cmp	r3, #128	; 0x80
 80044b8:	d10e      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d107      	bne.n	80044d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fab2 	bl	8004a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e2:	2b40      	cmp	r3, #64	; 0x40
 80044e4:	d10e      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f0:	2b40      	cmp	r3, #64	; 0x40
 80044f2:	d107      	bne.n	8004504 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f8ff 	bl	8004702 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b20      	cmp	r3, #32
 8004510:	d10e      	bne.n	8004530 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b20      	cmp	r3, #32
 800451e:	d107      	bne.n	8004530 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f06f 0220 	mvn.w	r2, #32
 8004528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa7c 	bl	8004a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004530:	bf00      	nop
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_TIM_ConfigClockSource+0x1c>
 8004550:	2302      	movs	r3, #2
 8004552:	e0b4      	b.n	80046be <HAL_TIM_ConfigClockSource+0x186>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800457a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800458c:	d03e      	beq.n	800460c <HAL_TIM_ConfigClockSource+0xd4>
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004592:	f200 8087 	bhi.w	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 8004596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800459a:	f000 8086 	beq.w	80046aa <HAL_TIM_ConfigClockSource+0x172>
 800459e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a2:	d87f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045a4:	2b70      	cmp	r3, #112	; 0x70
 80045a6:	d01a      	beq.n	80045de <HAL_TIM_ConfigClockSource+0xa6>
 80045a8:	2b70      	cmp	r3, #112	; 0x70
 80045aa:	d87b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045ac:	2b60      	cmp	r3, #96	; 0x60
 80045ae:	d050      	beq.n	8004652 <HAL_TIM_ConfigClockSource+0x11a>
 80045b0:	2b60      	cmp	r3, #96	; 0x60
 80045b2:	d877      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045b4:	2b50      	cmp	r3, #80	; 0x50
 80045b6:	d03c      	beq.n	8004632 <HAL_TIM_ConfigClockSource+0xfa>
 80045b8:	2b50      	cmp	r3, #80	; 0x50
 80045ba:	d873      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d058      	beq.n	8004672 <HAL_TIM_ConfigClockSource+0x13a>
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d86f      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045c4:	2b30      	cmp	r3, #48	; 0x30
 80045c6:	d064      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045c8:	2b30      	cmp	r3, #48	; 0x30
 80045ca:	d86b      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d060      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045d0:	2b20      	cmp	r3, #32
 80045d2:	d867      	bhi.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d05c      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d05a      	beq.n	8004692 <HAL_TIM_ConfigClockSource+0x15a>
 80045dc:	e062      	b.n	80046a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	6899      	ldr	r1, [r3, #8]
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f000 f98d 	bl	800490c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68ba      	ldr	r2, [r7, #8]
 8004608:	609a      	str	r2, [r3, #8]
      break;
 800460a:	e04f      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6818      	ldr	r0, [r3, #0]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	6899      	ldr	r1, [r3, #8]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f000 f976 	bl	800490c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800462e:	609a      	str	r2, [r3, #8]
      break;
 8004630:	e03c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6859      	ldr	r1, [r3, #4]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	461a      	mov	r2, r3
 8004640:	f000 f8ea 	bl	8004818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2150      	movs	r1, #80	; 0x50
 800464a:	4618      	mov	r0, r3
 800464c:	f000 f943 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 8004650:	e02c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6818      	ldr	r0, [r3, #0]
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	461a      	mov	r2, r3
 8004660:	f000 f909 	bl	8004876 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2160      	movs	r1, #96	; 0x60
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f933 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 8004670:	e01c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6818      	ldr	r0, [r3, #0]
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	6859      	ldr	r1, [r3, #4]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	461a      	mov	r2, r3
 8004680:	f000 f8ca 	bl	8004818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2140      	movs	r1, #64	; 0x40
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f923 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 8004690:	e00c      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4610      	mov	r0, r2
 800469e:	f000 f91a 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 80046a2:	e003      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e000      	b.n	80046ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr

080046da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
	...

08004718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a34      	ldr	r2, [pc, #208]	; (80047fc <TIM_Base_SetConfig+0xe4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d00f      	beq.n	8004750 <TIM_Base_SetConfig+0x38>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004736:	d00b      	beq.n	8004750 <TIM_Base_SetConfig+0x38>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a31      	ldr	r2, [pc, #196]	; (8004800 <TIM_Base_SetConfig+0xe8>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d007      	beq.n	8004750 <TIM_Base_SetConfig+0x38>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a30      	ldr	r2, [pc, #192]	; (8004804 <TIM_Base_SetConfig+0xec>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d003      	beq.n	8004750 <TIM_Base_SetConfig+0x38>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a2f      	ldr	r2, [pc, #188]	; (8004808 <TIM_Base_SetConfig+0xf0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d108      	bne.n	8004762 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004756:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4313      	orrs	r3, r2
 8004760:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a25      	ldr	r2, [pc, #148]	; (80047fc <TIM_Base_SetConfig+0xe4>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d01b      	beq.n	80047a2 <TIM_Base_SetConfig+0x8a>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004770:	d017      	beq.n	80047a2 <TIM_Base_SetConfig+0x8a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a22      	ldr	r2, [pc, #136]	; (8004800 <TIM_Base_SetConfig+0xe8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d013      	beq.n	80047a2 <TIM_Base_SetConfig+0x8a>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a21      	ldr	r2, [pc, #132]	; (8004804 <TIM_Base_SetConfig+0xec>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00f      	beq.n	80047a2 <TIM_Base_SetConfig+0x8a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a20      	ldr	r2, [pc, #128]	; (8004808 <TIM_Base_SetConfig+0xf0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <TIM_Base_SetConfig+0x8a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a1f      	ldr	r2, [pc, #124]	; (800480c <TIM_Base_SetConfig+0xf4>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d007      	beq.n	80047a2 <TIM_Base_SetConfig+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a1e      	ldr	r2, [pc, #120]	; (8004810 <TIM_Base_SetConfig+0xf8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_Base_SetConfig+0x8a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <TIM_Base_SetConfig+0xfc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a08      	ldr	r2, [pc, #32]	; (80047fc <TIM_Base_SetConfig+0xe4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d103      	bne.n	80047e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	691a      	ldr	r2, [r3, #16]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	615a      	str	r2, [r3, #20]
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800

08004818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	f023 0201 	bic.w	r2, r3, #1
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	699b      	ldr	r3, [r3, #24]
 800483a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	011b      	lsls	r3, r3, #4
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f023 030a 	bic.w	r3, r3, #10
 8004854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4313      	orrs	r3, r2
 800485c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	621a      	str	r2, [r3, #32]
}
 800486a:	bf00      	nop
 800486c:	371c      	adds	r7, #28
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004876:	b480      	push	{r7}
 8004878:	b087      	sub	sp, #28
 800487a:	af00      	add	r7, sp, #0
 800487c:	60f8      	str	r0, [r7, #12]
 800487e:	60b9      	str	r1, [r7, #8]
 8004880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0210 	bic.w	r2, r3, #16
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	031b      	lsls	r3, r3, #12
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	011b      	lsls	r3, r3, #4
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f043 0307 	orr.w	r3, r3, #7
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	609a      	str	r2, [r3, #8]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	021a      	lsls	r2, r3, #8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	431a      	orrs	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4313      	orrs	r3, r2
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	609a      	str	r2, [r3, #8]
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004960:	2302      	movs	r3, #2
 8004962:	e050      	b.n	8004a06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1c      	ldr	r2, [pc, #112]	; (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d018      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d013      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d00e      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a16      	ldr	r2, [pc, #88]	; (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d009      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a15      	ldr	r2, [pc, #84]	; (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d004      	beq.n	80049da <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a13      	ldr	r2, [pc, #76]	; (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d10c      	bne.n	80049f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	68ba      	ldr	r2, [r7, #8]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40014000 	.word	0x40014000

08004a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e03f      	b.n	8004ae2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc fac8 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	; 0x24
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f929 	bl	8004cec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3708      	adds	r7, #8
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b08a      	sub	sp, #40	; 0x28
 8004aee:	af02      	add	r7, sp, #8
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	603b      	str	r3, [r7, #0]
 8004af6:	4613      	mov	r3, r2
 8004af8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b20      	cmp	r3, #32
 8004b08:	d17c      	bne.n	8004c04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_UART_Transmit+0x2c>
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e075      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_UART_Transmit+0x3e>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e06e      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2221      	movs	r2, #33	; 0x21
 8004b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3e:	f7fc fbcd 	bl	80012dc <HAL_GetTick>
 8004b42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	88fa      	ldrh	r2, [r7, #6]
 8004b48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	88fa      	ldrh	r2, [r7, #6]
 8004b4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b58:	d108      	bne.n	8004b6c <HAL_UART_Transmit+0x82>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	61bb      	str	r3, [r7, #24]
 8004b6a:	e003      	b.n	8004b74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b70:	2300      	movs	r3, #0
 8004b72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004b7c:	e02a      	b.n	8004bd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	2200      	movs	r2, #0
 8004b86:	2180      	movs	r1, #128	; 0x80
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f840 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e036      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	3302      	adds	r3, #2
 8004bb2:	61bb      	str	r3, [r7, #24]
 8004bb4:	e007      	b.n	8004bc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	781a      	ldrb	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1cf      	bne.n	8004b7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	9300      	str	r3, [sp, #0]
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2200      	movs	r2, #0
 8004be6:	2140      	movs	r1, #64	; 0x40
 8004be8:	68f8      	ldr	r0, [r7, #12]
 8004bea:	f000 f810 	bl	8004c0e <UART_WaitOnFlagUntilTimeout>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e006      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	e000      	b.n	8004c06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c04:	2302      	movs	r3, #2
  }
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3720      	adds	r7, #32
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b090      	sub	sp, #64	; 0x40
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	603b      	str	r3, [r7, #0]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c1e:	e050      	b.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c26:	d04c      	beq.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d007      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8004c2e:	f7fc fb55 	bl	80012dc <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d241      	bcs.n	8004cc2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c5e:	637a      	str	r2, [r7, #52]	; 0x34
 8004c60:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	613b      	str	r3, [r7, #16]
   return(result);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3314      	adds	r3, #20
 8004c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c92:	623a      	str	r2, [r7, #32]
 8004c94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	69f9      	ldr	r1, [r7, #28]
 8004c98:	6a3a      	ldr	r2, [r7, #32]
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e5      	bne.n	8004c72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e00f      	b.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	bf0c      	ite	eq
 8004cd2:	2301      	moveq	r3, #1
 8004cd4:	2300      	movne	r3, #0
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	461a      	mov	r2, r3
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d09f      	beq.n	8004c20 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3740      	adds	r7, #64	; 0x40
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
	...

08004cec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cf0:	b0c0      	sub	sp, #256	; 0x100
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	68d9      	ldr	r1, [r3, #12]
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	ea40 0301 	orr.w	r3, r0, r1
 8004d14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	431a      	orrs	r2, r3
 8004d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d44:	f021 010c 	bic.w	r1, r1, #12
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d52:	430b      	orrs	r3, r1
 8004d54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d66:	6999      	ldr	r1, [r3, #24]
 8004d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	ea40 0301 	orr.w	r3, r0, r1
 8004d72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	4b8f      	ldr	r3, [pc, #572]	; (8004fb8 <UART_SetConfig+0x2cc>)
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d005      	beq.n	8004d8c <UART_SetConfig+0xa0>
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	4b8d      	ldr	r3, [pc, #564]	; (8004fbc <UART_SetConfig+0x2d0>)
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d104      	bne.n	8004d96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d8c:	f7ff f8ba 	bl	8003f04 <HAL_RCC_GetPCLK2Freq>
 8004d90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d94:	e003      	b.n	8004d9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d96:	f7ff f8a1 	bl	8003edc <HAL_RCC_GetPCLK1Freq>
 8004d9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da8:	f040 810c 	bne.w	8004fc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db0:	2200      	movs	r2, #0
 8004db2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004db6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004dba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004dbe:	4622      	mov	r2, r4
 8004dc0:	462b      	mov	r3, r5
 8004dc2:	1891      	adds	r1, r2, r2
 8004dc4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004dc6:	415b      	adcs	r3, r3
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dce:	4621      	mov	r1, r4
 8004dd0:	eb12 0801 	adds.w	r8, r2, r1
 8004dd4:	4629      	mov	r1, r5
 8004dd6:	eb43 0901 	adc.w	r9, r3, r1
 8004dda:	f04f 0200 	mov.w	r2, #0
 8004dde:	f04f 0300 	mov.w	r3, #0
 8004de2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004de6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dee:	4690      	mov	r8, r2
 8004df0:	4699      	mov	r9, r3
 8004df2:	4623      	mov	r3, r4
 8004df4:	eb18 0303 	adds.w	r3, r8, r3
 8004df8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004dfc:	462b      	mov	r3, r5
 8004dfe:	eb49 0303 	adc.w	r3, r9, r3
 8004e02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004e12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004e16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	18db      	adds	r3, r3, r3
 8004e1e:	653b      	str	r3, [r7, #80]	; 0x50
 8004e20:	4613      	mov	r3, r2
 8004e22:	eb42 0303 	adc.w	r3, r2, r3
 8004e26:	657b      	str	r3, [r7, #84]	; 0x54
 8004e28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e30:	f7fb fa26 	bl	8000280 <__aeabi_uldivmod>
 8004e34:	4602      	mov	r2, r0
 8004e36:	460b      	mov	r3, r1
 8004e38:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004e3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	011c      	lsls	r4, r3, #4
 8004e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e46:	2200      	movs	r2, #0
 8004e48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e54:	4642      	mov	r2, r8
 8004e56:	464b      	mov	r3, r9
 8004e58:	1891      	adds	r1, r2, r2
 8004e5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e5c:	415b      	adcs	r3, r3
 8004e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e64:	4641      	mov	r1, r8
 8004e66:	eb12 0a01 	adds.w	sl, r2, r1
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e84:	4692      	mov	sl, r2
 8004e86:	469b      	mov	fp, r3
 8004e88:	4643      	mov	r3, r8
 8004e8a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e92:	464b      	mov	r3, r9
 8004e94:	eb4b 0303 	adc.w	r3, fp, r3
 8004e98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ea8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004eac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	18db      	adds	r3, r3, r3
 8004eb4:	643b      	str	r3, [r7, #64]	; 0x40
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	eb42 0303 	adc.w	r3, r2, r3
 8004ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ebe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ec2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ec6:	f7fb f9db 	bl	8000280 <__aeabi_uldivmod>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004ed2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	2264      	movs	r2, #100	; 0x64
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	1acb      	subs	r3, r1, r3
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ee6:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004ee8:	fba3 2302 	umull	r2, r3, r3, r2
 8004eec:	095b      	lsrs	r3, r3, #5
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ef4:	441c      	add	r4, r3
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004f04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004f10:	415b      	adcs	r3, r3
 8004f12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004f18:	4641      	mov	r1, r8
 8004f1a:	1851      	adds	r1, r2, r1
 8004f1c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f1e:	4649      	mov	r1, r9
 8004f20:	414b      	adcs	r3, r1
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f30:	4659      	mov	r1, fp
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4642      	mov	r2, r8
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	460a      	mov	r2, r1
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	18db      	adds	r3, r3, r3
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f72:	4613      	mov	r3, r2
 8004f74:	eb42 0303 	adc.w	r3, r2, r3
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f82:	f7fb f97d 	bl	8000280 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004f8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	2164      	movs	r1, #100	; 0x64
 8004f94:	fb01 f303 	mul.w	r3, r1, r3
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	3332      	adds	r3, #50	; 0x32
 8004f9e:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <UART_SetConfig+0x2d4>)
 8004fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa4:	095b      	lsrs	r3, r3, #5
 8004fa6:	f003 0207 	and.w	r2, r3, #7
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4422      	add	r2, r4
 8004fb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fb4:	e106      	b.n	80051c4 <UART_SetConfig+0x4d8>
 8004fb6:	bf00      	nop
 8004fb8:	40011000 	.word	0x40011000
 8004fbc:	40011400 	.word	0x40011400
 8004fc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fd6:	4642      	mov	r2, r8
 8004fd8:	464b      	mov	r3, r9
 8004fda:	1891      	adds	r1, r2, r2
 8004fdc:	6239      	str	r1, [r7, #32]
 8004fde:	415b      	adcs	r3, r3
 8004fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fe2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	1854      	adds	r4, r2, r1
 8004fea:	4649      	mov	r1, r9
 8004fec:	eb43 0501 	adc.w	r5, r3, r1
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	00eb      	lsls	r3, r5, #3
 8004ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ffe:	00e2      	lsls	r2, r4, #3
 8005000:	4614      	mov	r4, r2
 8005002:	461d      	mov	r5, r3
 8005004:	4643      	mov	r3, r8
 8005006:	18e3      	adds	r3, r4, r3
 8005008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800500c:	464b      	mov	r3, r9
 800500e:	eb45 0303 	adc.w	r3, r5, r3
 8005012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005022:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005032:	4629      	mov	r1, r5
 8005034:	008b      	lsls	r3, r1, #2
 8005036:	4621      	mov	r1, r4
 8005038:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800503c:	4621      	mov	r1, r4
 800503e:	008a      	lsls	r2, r1, #2
 8005040:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005044:	f7fb f91c 	bl	8000280 <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4b60      	ldr	r3, [pc, #384]	; (80051d0 <UART_SetConfig+0x4e4>)
 800504e:	fba3 2302 	umull	r2, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	011c      	lsls	r4, r3, #4
 8005056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800505a:	2200      	movs	r2, #0
 800505c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005060:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005064:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005068:	4642      	mov	r2, r8
 800506a:	464b      	mov	r3, r9
 800506c:	1891      	adds	r1, r2, r2
 800506e:	61b9      	str	r1, [r7, #24]
 8005070:	415b      	adcs	r3, r3
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005078:	4641      	mov	r1, r8
 800507a:	1851      	adds	r1, r2, r1
 800507c:	6139      	str	r1, [r7, #16]
 800507e:	4649      	mov	r1, r9
 8005080:	414b      	adcs	r3, r1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005090:	4659      	mov	r1, fp
 8005092:	00cb      	lsls	r3, r1, #3
 8005094:	4651      	mov	r1, sl
 8005096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800509a:	4651      	mov	r1, sl
 800509c:	00ca      	lsls	r2, r1, #3
 800509e:	4610      	mov	r0, r2
 80050a0:	4619      	mov	r1, r3
 80050a2:	4603      	mov	r3, r0
 80050a4:	4642      	mov	r2, r8
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050ac:	464b      	mov	r3, r9
 80050ae:	460a      	mov	r2, r1
 80050b0:	eb42 0303 	adc.w	r3, r2, r3
 80050b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050d0:	4649      	mov	r1, r9
 80050d2:	008b      	lsls	r3, r1, #2
 80050d4:	4641      	mov	r1, r8
 80050d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050da:	4641      	mov	r1, r8
 80050dc:	008a      	lsls	r2, r1, #2
 80050de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050e2:	f7fb f8cd 	bl	8000280 <__aeabi_uldivmod>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	4b38      	ldr	r3, [pc, #224]	; (80051d0 <UART_SetConfig+0x4e4>)
 80050ee:	fba3 2301 	umull	r2, r3, r3, r1
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	2264      	movs	r2, #100	; 0x64
 80050f6:	fb02 f303 	mul.w	r3, r2, r3
 80050fa:	1acb      	subs	r3, r1, r3
 80050fc:	011b      	lsls	r3, r3, #4
 80050fe:	3332      	adds	r3, #50	; 0x32
 8005100:	4a33      	ldr	r2, [pc, #204]	; (80051d0 <UART_SetConfig+0x4e4>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	095b      	lsrs	r3, r3, #5
 8005108:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800510c:	441c      	add	r4, r3
 800510e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005112:	2200      	movs	r2, #0
 8005114:	673b      	str	r3, [r7, #112]	; 0x70
 8005116:	677a      	str	r2, [r7, #116]	; 0x74
 8005118:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	1891      	adds	r1, r2, r2
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	415b      	adcs	r3, r3
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800512c:	4641      	mov	r1, r8
 800512e:	1851      	adds	r1, r2, r1
 8005130:	6039      	str	r1, [r7, #0]
 8005132:	4649      	mov	r1, r9
 8005134:	414b      	adcs	r3, r1
 8005136:	607b      	str	r3, [r7, #4]
 8005138:	f04f 0200 	mov.w	r2, #0
 800513c:	f04f 0300 	mov.w	r3, #0
 8005140:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005144:	4659      	mov	r1, fp
 8005146:	00cb      	lsls	r3, r1, #3
 8005148:	4651      	mov	r1, sl
 800514a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800514e:	4651      	mov	r1, sl
 8005150:	00ca      	lsls	r2, r1, #3
 8005152:	4610      	mov	r0, r2
 8005154:	4619      	mov	r1, r3
 8005156:	4603      	mov	r3, r0
 8005158:	4642      	mov	r2, r8
 800515a:	189b      	adds	r3, r3, r2
 800515c:	66bb      	str	r3, [r7, #104]	; 0x68
 800515e:	464b      	mov	r3, r9
 8005160:	460a      	mov	r2, r1
 8005162:	eb42 0303 	adc.w	r3, r2, r3
 8005166:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	663b      	str	r3, [r7, #96]	; 0x60
 8005172:	667a      	str	r2, [r7, #100]	; 0x64
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005180:	4649      	mov	r1, r9
 8005182:	008b      	lsls	r3, r1, #2
 8005184:	4641      	mov	r1, r8
 8005186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800518a:	4641      	mov	r1, r8
 800518c:	008a      	lsls	r2, r1, #2
 800518e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005192:	f7fb f875 	bl	8000280 <__aeabi_uldivmod>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <UART_SetConfig+0x4e4>)
 800519c:	fba3 1302 	umull	r1, r3, r3, r2
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	2164      	movs	r1, #100	; 0x64
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	3332      	adds	r3, #50	; 0x32
 80051ae:	4a08      	ldr	r2, [pc, #32]	; (80051d0 <UART_SetConfig+0x4e4>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	f003 020f 	and.w	r2, r3, #15
 80051ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4422      	add	r2, r4
 80051c2:	609a      	str	r2, [r3, #8]
}
 80051c4:	bf00      	nop
 80051c6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051ca:	46bd      	mov	sp, r7
 80051cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d0:	51eb851f 	.word	0x51eb851f

080051d4 <sniprintf>:
 80051d4:	b40c      	push	{r2, r3}
 80051d6:	b530      	push	{r4, r5, lr}
 80051d8:	4b17      	ldr	r3, [pc, #92]	; (8005238 <sniprintf+0x64>)
 80051da:	1e0c      	subs	r4, r1, #0
 80051dc:	681d      	ldr	r5, [r3, #0]
 80051de:	b09d      	sub	sp, #116	; 0x74
 80051e0:	da08      	bge.n	80051f4 <sniprintf+0x20>
 80051e2:	238b      	movs	r3, #139	; 0x8b
 80051e4:	602b      	str	r3, [r5, #0]
 80051e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ea:	b01d      	add	sp, #116	; 0x74
 80051ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051f0:	b002      	add	sp, #8
 80051f2:	4770      	bx	lr
 80051f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80051f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80051fc:	bf14      	ite	ne
 80051fe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005202:	4623      	moveq	r3, r4
 8005204:	9304      	str	r3, [sp, #16]
 8005206:	9307      	str	r3, [sp, #28]
 8005208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800520c:	9002      	str	r0, [sp, #8]
 800520e:	9006      	str	r0, [sp, #24]
 8005210:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005214:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005216:	ab21      	add	r3, sp, #132	; 0x84
 8005218:	a902      	add	r1, sp, #8
 800521a:	4628      	mov	r0, r5
 800521c:	9301      	str	r3, [sp, #4]
 800521e:	f000 f993 	bl	8005548 <_svfiprintf_r>
 8005222:	1c43      	adds	r3, r0, #1
 8005224:	bfbc      	itt	lt
 8005226:	238b      	movlt	r3, #139	; 0x8b
 8005228:	602b      	strlt	r3, [r5, #0]
 800522a:	2c00      	cmp	r4, #0
 800522c:	d0dd      	beq.n	80051ea <sniprintf+0x16>
 800522e:	9b02      	ldr	r3, [sp, #8]
 8005230:	2200      	movs	r2, #0
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e7d9      	b.n	80051ea <sniprintf+0x16>
 8005236:	bf00      	nop
 8005238:	2000005c 	.word	0x2000005c

0800523c <memset>:
 800523c:	4402      	add	r2, r0
 800523e:	4603      	mov	r3, r0
 8005240:	4293      	cmp	r3, r2
 8005242:	d100      	bne.n	8005246 <memset+0xa>
 8005244:	4770      	bx	lr
 8005246:	f803 1b01 	strb.w	r1, [r3], #1
 800524a:	e7f9      	b.n	8005240 <memset+0x4>

0800524c <__errno>:
 800524c:	4b01      	ldr	r3, [pc, #4]	; (8005254 <__errno+0x8>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	2000005c 	.word	0x2000005c

08005258 <__libc_init_array>:
 8005258:	b570      	push	{r4, r5, r6, lr}
 800525a:	4d0d      	ldr	r5, [pc, #52]	; (8005290 <__libc_init_array+0x38>)
 800525c:	4c0d      	ldr	r4, [pc, #52]	; (8005294 <__libc_init_array+0x3c>)
 800525e:	1b64      	subs	r4, r4, r5
 8005260:	10a4      	asrs	r4, r4, #2
 8005262:	2600      	movs	r6, #0
 8005264:	42a6      	cmp	r6, r4
 8005266:	d109      	bne.n	800527c <__libc_init_array+0x24>
 8005268:	4d0b      	ldr	r5, [pc, #44]	; (8005298 <__libc_init_array+0x40>)
 800526a:	4c0c      	ldr	r4, [pc, #48]	; (800529c <__libc_init_array+0x44>)
 800526c:	f000 fc6a 	bl	8005b44 <_init>
 8005270:	1b64      	subs	r4, r4, r5
 8005272:	10a4      	asrs	r4, r4, #2
 8005274:	2600      	movs	r6, #0
 8005276:	42a6      	cmp	r6, r4
 8005278:	d105      	bne.n	8005286 <__libc_init_array+0x2e>
 800527a:	bd70      	pop	{r4, r5, r6, pc}
 800527c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005280:	4798      	blx	r3
 8005282:	3601      	adds	r6, #1
 8005284:	e7ee      	b.n	8005264 <__libc_init_array+0xc>
 8005286:	f855 3b04 	ldr.w	r3, [r5], #4
 800528a:	4798      	blx	r3
 800528c:	3601      	adds	r6, #1
 800528e:	e7f2      	b.n	8005276 <__libc_init_array+0x1e>
 8005290:	08005bec 	.word	0x08005bec
 8005294:	08005bec 	.word	0x08005bec
 8005298:	08005bec 	.word	0x08005bec
 800529c:	08005bf0 	.word	0x08005bf0

080052a0 <__retarget_lock_acquire_recursive>:
 80052a0:	4770      	bx	lr

080052a2 <__retarget_lock_release_recursive>:
 80052a2:	4770      	bx	lr

080052a4 <_free_r>:
 80052a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052a6:	2900      	cmp	r1, #0
 80052a8:	d044      	beq.n	8005334 <_free_r+0x90>
 80052aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052ae:	9001      	str	r0, [sp, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f1a1 0404 	sub.w	r4, r1, #4
 80052b6:	bfb8      	it	lt
 80052b8:	18e4      	addlt	r4, r4, r3
 80052ba:	f000 f8df 	bl	800547c <__malloc_lock>
 80052be:	4a1e      	ldr	r2, [pc, #120]	; (8005338 <_free_r+0x94>)
 80052c0:	9801      	ldr	r0, [sp, #4]
 80052c2:	6813      	ldr	r3, [r2, #0]
 80052c4:	b933      	cbnz	r3, 80052d4 <_free_r+0x30>
 80052c6:	6063      	str	r3, [r4, #4]
 80052c8:	6014      	str	r4, [r2, #0]
 80052ca:	b003      	add	sp, #12
 80052cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052d0:	f000 b8da 	b.w	8005488 <__malloc_unlock>
 80052d4:	42a3      	cmp	r3, r4
 80052d6:	d908      	bls.n	80052ea <_free_r+0x46>
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	1961      	adds	r1, r4, r5
 80052dc:	428b      	cmp	r3, r1
 80052de:	bf01      	itttt	eq
 80052e0:	6819      	ldreq	r1, [r3, #0]
 80052e2:	685b      	ldreq	r3, [r3, #4]
 80052e4:	1949      	addeq	r1, r1, r5
 80052e6:	6021      	streq	r1, [r4, #0]
 80052e8:	e7ed      	b.n	80052c6 <_free_r+0x22>
 80052ea:	461a      	mov	r2, r3
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	b10b      	cbz	r3, 80052f4 <_free_r+0x50>
 80052f0:	42a3      	cmp	r3, r4
 80052f2:	d9fa      	bls.n	80052ea <_free_r+0x46>
 80052f4:	6811      	ldr	r1, [r2, #0]
 80052f6:	1855      	adds	r5, r2, r1
 80052f8:	42a5      	cmp	r5, r4
 80052fa:	d10b      	bne.n	8005314 <_free_r+0x70>
 80052fc:	6824      	ldr	r4, [r4, #0]
 80052fe:	4421      	add	r1, r4
 8005300:	1854      	adds	r4, r2, r1
 8005302:	42a3      	cmp	r3, r4
 8005304:	6011      	str	r1, [r2, #0]
 8005306:	d1e0      	bne.n	80052ca <_free_r+0x26>
 8005308:	681c      	ldr	r4, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	6053      	str	r3, [r2, #4]
 800530e:	440c      	add	r4, r1
 8005310:	6014      	str	r4, [r2, #0]
 8005312:	e7da      	b.n	80052ca <_free_r+0x26>
 8005314:	d902      	bls.n	800531c <_free_r+0x78>
 8005316:	230c      	movs	r3, #12
 8005318:	6003      	str	r3, [r0, #0]
 800531a:	e7d6      	b.n	80052ca <_free_r+0x26>
 800531c:	6825      	ldr	r5, [r4, #0]
 800531e:	1961      	adds	r1, r4, r5
 8005320:	428b      	cmp	r3, r1
 8005322:	bf04      	itt	eq
 8005324:	6819      	ldreq	r1, [r3, #0]
 8005326:	685b      	ldreq	r3, [r3, #4]
 8005328:	6063      	str	r3, [r4, #4]
 800532a:	bf04      	itt	eq
 800532c:	1949      	addeq	r1, r1, r5
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	6054      	str	r4, [r2, #4]
 8005332:	e7ca      	b.n	80052ca <_free_r+0x26>
 8005334:	b003      	add	sp, #12
 8005336:	bd30      	pop	{r4, r5, pc}
 8005338:	200005b0 	.word	0x200005b0

0800533c <sbrk_aligned>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	4e0e      	ldr	r6, [pc, #56]	; (8005378 <sbrk_aligned+0x3c>)
 8005340:	460c      	mov	r4, r1
 8005342:	6831      	ldr	r1, [r6, #0]
 8005344:	4605      	mov	r5, r0
 8005346:	b911      	cbnz	r1, 800534e <sbrk_aligned+0x12>
 8005348:	f000 fba6 	bl	8005a98 <_sbrk_r>
 800534c:	6030      	str	r0, [r6, #0]
 800534e:	4621      	mov	r1, r4
 8005350:	4628      	mov	r0, r5
 8005352:	f000 fba1 	bl	8005a98 <_sbrk_r>
 8005356:	1c43      	adds	r3, r0, #1
 8005358:	d00a      	beq.n	8005370 <sbrk_aligned+0x34>
 800535a:	1cc4      	adds	r4, r0, #3
 800535c:	f024 0403 	bic.w	r4, r4, #3
 8005360:	42a0      	cmp	r0, r4
 8005362:	d007      	beq.n	8005374 <sbrk_aligned+0x38>
 8005364:	1a21      	subs	r1, r4, r0
 8005366:	4628      	mov	r0, r5
 8005368:	f000 fb96 	bl	8005a98 <_sbrk_r>
 800536c:	3001      	adds	r0, #1
 800536e:	d101      	bne.n	8005374 <sbrk_aligned+0x38>
 8005370:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005374:	4620      	mov	r0, r4
 8005376:	bd70      	pop	{r4, r5, r6, pc}
 8005378:	200005b4 	.word	0x200005b4

0800537c <_malloc_r>:
 800537c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005380:	1ccd      	adds	r5, r1, #3
 8005382:	f025 0503 	bic.w	r5, r5, #3
 8005386:	3508      	adds	r5, #8
 8005388:	2d0c      	cmp	r5, #12
 800538a:	bf38      	it	cc
 800538c:	250c      	movcc	r5, #12
 800538e:	2d00      	cmp	r5, #0
 8005390:	4607      	mov	r7, r0
 8005392:	db01      	blt.n	8005398 <_malloc_r+0x1c>
 8005394:	42a9      	cmp	r1, r5
 8005396:	d905      	bls.n	80053a4 <_malloc_r+0x28>
 8005398:	230c      	movs	r3, #12
 800539a:	603b      	str	r3, [r7, #0]
 800539c:	2600      	movs	r6, #0
 800539e:	4630      	mov	r0, r6
 80053a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005478 <_malloc_r+0xfc>
 80053a8:	f000 f868 	bl	800547c <__malloc_lock>
 80053ac:	f8d8 3000 	ldr.w	r3, [r8]
 80053b0:	461c      	mov	r4, r3
 80053b2:	bb5c      	cbnz	r4, 800540c <_malloc_r+0x90>
 80053b4:	4629      	mov	r1, r5
 80053b6:	4638      	mov	r0, r7
 80053b8:	f7ff ffc0 	bl	800533c <sbrk_aligned>
 80053bc:	1c43      	adds	r3, r0, #1
 80053be:	4604      	mov	r4, r0
 80053c0:	d155      	bne.n	800546e <_malloc_r+0xf2>
 80053c2:	f8d8 4000 	ldr.w	r4, [r8]
 80053c6:	4626      	mov	r6, r4
 80053c8:	2e00      	cmp	r6, #0
 80053ca:	d145      	bne.n	8005458 <_malloc_r+0xdc>
 80053cc:	2c00      	cmp	r4, #0
 80053ce:	d048      	beq.n	8005462 <_malloc_r+0xe6>
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	4631      	mov	r1, r6
 80053d4:	4638      	mov	r0, r7
 80053d6:	eb04 0903 	add.w	r9, r4, r3
 80053da:	f000 fb5d 	bl	8005a98 <_sbrk_r>
 80053de:	4581      	cmp	r9, r0
 80053e0:	d13f      	bne.n	8005462 <_malloc_r+0xe6>
 80053e2:	6821      	ldr	r1, [r4, #0]
 80053e4:	1a6d      	subs	r5, r5, r1
 80053e6:	4629      	mov	r1, r5
 80053e8:	4638      	mov	r0, r7
 80053ea:	f7ff ffa7 	bl	800533c <sbrk_aligned>
 80053ee:	3001      	adds	r0, #1
 80053f0:	d037      	beq.n	8005462 <_malloc_r+0xe6>
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	442b      	add	r3, r5
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	f8d8 3000 	ldr.w	r3, [r8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d038      	beq.n	8005472 <_malloc_r+0xf6>
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	42a2      	cmp	r2, r4
 8005404:	d12b      	bne.n	800545e <_malloc_r+0xe2>
 8005406:	2200      	movs	r2, #0
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	e00f      	b.n	800542c <_malloc_r+0xb0>
 800540c:	6822      	ldr	r2, [r4, #0]
 800540e:	1b52      	subs	r2, r2, r5
 8005410:	d41f      	bmi.n	8005452 <_malloc_r+0xd6>
 8005412:	2a0b      	cmp	r2, #11
 8005414:	d917      	bls.n	8005446 <_malloc_r+0xca>
 8005416:	1961      	adds	r1, r4, r5
 8005418:	42a3      	cmp	r3, r4
 800541a:	6025      	str	r5, [r4, #0]
 800541c:	bf18      	it	ne
 800541e:	6059      	strne	r1, [r3, #4]
 8005420:	6863      	ldr	r3, [r4, #4]
 8005422:	bf08      	it	eq
 8005424:	f8c8 1000 	streq.w	r1, [r8]
 8005428:	5162      	str	r2, [r4, r5]
 800542a:	604b      	str	r3, [r1, #4]
 800542c:	4638      	mov	r0, r7
 800542e:	f104 060b 	add.w	r6, r4, #11
 8005432:	f000 f829 	bl	8005488 <__malloc_unlock>
 8005436:	f026 0607 	bic.w	r6, r6, #7
 800543a:	1d23      	adds	r3, r4, #4
 800543c:	1af2      	subs	r2, r6, r3
 800543e:	d0ae      	beq.n	800539e <_malloc_r+0x22>
 8005440:	1b9b      	subs	r3, r3, r6
 8005442:	50a3      	str	r3, [r4, r2]
 8005444:	e7ab      	b.n	800539e <_malloc_r+0x22>
 8005446:	42a3      	cmp	r3, r4
 8005448:	6862      	ldr	r2, [r4, #4]
 800544a:	d1dd      	bne.n	8005408 <_malloc_r+0x8c>
 800544c:	f8c8 2000 	str.w	r2, [r8]
 8005450:	e7ec      	b.n	800542c <_malloc_r+0xb0>
 8005452:	4623      	mov	r3, r4
 8005454:	6864      	ldr	r4, [r4, #4]
 8005456:	e7ac      	b.n	80053b2 <_malloc_r+0x36>
 8005458:	4634      	mov	r4, r6
 800545a:	6876      	ldr	r6, [r6, #4]
 800545c:	e7b4      	b.n	80053c8 <_malloc_r+0x4c>
 800545e:	4613      	mov	r3, r2
 8005460:	e7cc      	b.n	80053fc <_malloc_r+0x80>
 8005462:	230c      	movs	r3, #12
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4638      	mov	r0, r7
 8005468:	f000 f80e 	bl	8005488 <__malloc_unlock>
 800546c:	e797      	b.n	800539e <_malloc_r+0x22>
 800546e:	6025      	str	r5, [r4, #0]
 8005470:	e7dc      	b.n	800542c <_malloc_r+0xb0>
 8005472:	605b      	str	r3, [r3, #4]
 8005474:	deff      	udf	#255	; 0xff
 8005476:	bf00      	nop
 8005478:	200005b0 	.word	0x200005b0

0800547c <__malloc_lock>:
 800547c:	4801      	ldr	r0, [pc, #4]	; (8005484 <__malloc_lock+0x8>)
 800547e:	f7ff bf0f 	b.w	80052a0 <__retarget_lock_acquire_recursive>
 8005482:	bf00      	nop
 8005484:	200005ac 	.word	0x200005ac

08005488 <__malloc_unlock>:
 8005488:	4801      	ldr	r0, [pc, #4]	; (8005490 <__malloc_unlock+0x8>)
 800548a:	f7ff bf0a 	b.w	80052a2 <__retarget_lock_release_recursive>
 800548e:	bf00      	nop
 8005490:	200005ac 	.word	0x200005ac

08005494 <__ssputs_r>:
 8005494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	688e      	ldr	r6, [r1, #8]
 800549a:	461f      	mov	r7, r3
 800549c:	42be      	cmp	r6, r7
 800549e:	680b      	ldr	r3, [r1, #0]
 80054a0:	4682      	mov	sl, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	4690      	mov	r8, r2
 80054a6:	d82c      	bhi.n	8005502 <__ssputs_r+0x6e>
 80054a8:	898a      	ldrh	r2, [r1, #12]
 80054aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80054ae:	d026      	beq.n	80054fe <__ssputs_r+0x6a>
 80054b0:	6965      	ldr	r5, [r4, #20]
 80054b2:	6909      	ldr	r1, [r1, #16]
 80054b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80054b8:	eba3 0901 	sub.w	r9, r3, r1
 80054bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80054c0:	1c7b      	adds	r3, r7, #1
 80054c2:	444b      	add	r3, r9
 80054c4:	106d      	asrs	r5, r5, #1
 80054c6:	429d      	cmp	r5, r3
 80054c8:	bf38      	it	cc
 80054ca:	461d      	movcc	r5, r3
 80054cc:	0553      	lsls	r3, r2, #21
 80054ce:	d527      	bpl.n	8005520 <__ssputs_r+0x8c>
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7ff ff53 	bl	800537c <_malloc_r>
 80054d6:	4606      	mov	r6, r0
 80054d8:	b360      	cbz	r0, 8005534 <__ssputs_r+0xa0>
 80054da:	6921      	ldr	r1, [r4, #16]
 80054dc:	464a      	mov	r2, r9
 80054de:	f000 faeb 	bl	8005ab8 <memcpy>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80054e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ec:	81a3      	strh	r3, [r4, #12]
 80054ee:	6126      	str	r6, [r4, #16]
 80054f0:	6165      	str	r5, [r4, #20]
 80054f2:	444e      	add	r6, r9
 80054f4:	eba5 0509 	sub.w	r5, r5, r9
 80054f8:	6026      	str	r6, [r4, #0]
 80054fa:	60a5      	str	r5, [r4, #8]
 80054fc:	463e      	mov	r6, r7
 80054fe:	42be      	cmp	r6, r7
 8005500:	d900      	bls.n	8005504 <__ssputs_r+0x70>
 8005502:	463e      	mov	r6, r7
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	4632      	mov	r2, r6
 8005508:	4641      	mov	r1, r8
 800550a:	f000 faab 	bl	8005a64 <memmove>
 800550e:	68a3      	ldr	r3, [r4, #8]
 8005510:	1b9b      	subs	r3, r3, r6
 8005512:	60a3      	str	r3, [r4, #8]
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	4433      	add	r3, r6
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	2000      	movs	r0, #0
 800551c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005520:	462a      	mov	r2, r5
 8005522:	f000 fad7 	bl	8005ad4 <_realloc_r>
 8005526:	4606      	mov	r6, r0
 8005528:	2800      	cmp	r0, #0
 800552a:	d1e0      	bne.n	80054ee <__ssputs_r+0x5a>
 800552c:	6921      	ldr	r1, [r4, #16]
 800552e:	4650      	mov	r0, sl
 8005530:	f7ff feb8 	bl	80052a4 <_free_r>
 8005534:	230c      	movs	r3, #12
 8005536:	f8ca 3000 	str.w	r3, [sl]
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005540:	81a3      	strh	r3, [r4, #12]
 8005542:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005546:	e7e9      	b.n	800551c <__ssputs_r+0x88>

08005548 <_svfiprintf_r>:
 8005548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800554c:	4698      	mov	r8, r3
 800554e:	898b      	ldrh	r3, [r1, #12]
 8005550:	061b      	lsls	r3, r3, #24
 8005552:	b09d      	sub	sp, #116	; 0x74
 8005554:	4607      	mov	r7, r0
 8005556:	460d      	mov	r5, r1
 8005558:	4614      	mov	r4, r2
 800555a:	d50e      	bpl.n	800557a <_svfiprintf_r+0x32>
 800555c:	690b      	ldr	r3, [r1, #16]
 800555e:	b963      	cbnz	r3, 800557a <_svfiprintf_r+0x32>
 8005560:	2140      	movs	r1, #64	; 0x40
 8005562:	f7ff ff0b 	bl	800537c <_malloc_r>
 8005566:	6028      	str	r0, [r5, #0]
 8005568:	6128      	str	r0, [r5, #16]
 800556a:	b920      	cbnz	r0, 8005576 <_svfiprintf_r+0x2e>
 800556c:	230c      	movs	r3, #12
 800556e:	603b      	str	r3, [r7, #0]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005574:	e0d0      	b.n	8005718 <_svfiprintf_r+0x1d0>
 8005576:	2340      	movs	r3, #64	; 0x40
 8005578:	616b      	str	r3, [r5, #20]
 800557a:	2300      	movs	r3, #0
 800557c:	9309      	str	r3, [sp, #36]	; 0x24
 800557e:	2320      	movs	r3, #32
 8005580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005584:	f8cd 800c 	str.w	r8, [sp, #12]
 8005588:	2330      	movs	r3, #48	; 0x30
 800558a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005730 <_svfiprintf_r+0x1e8>
 800558e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005592:	f04f 0901 	mov.w	r9, #1
 8005596:	4623      	mov	r3, r4
 8005598:	469a      	mov	sl, r3
 800559a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800559e:	b10a      	cbz	r2, 80055a4 <_svfiprintf_r+0x5c>
 80055a0:	2a25      	cmp	r2, #37	; 0x25
 80055a2:	d1f9      	bne.n	8005598 <_svfiprintf_r+0x50>
 80055a4:	ebba 0b04 	subs.w	fp, sl, r4
 80055a8:	d00b      	beq.n	80055c2 <_svfiprintf_r+0x7a>
 80055aa:	465b      	mov	r3, fp
 80055ac:	4622      	mov	r2, r4
 80055ae:	4629      	mov	r1, r5
 80055b0:	4638      	mov	r0, r7
 80055b2:	f7ff ff6f 	bl	8005494 <__ssputs_r>
 80055b6:	3001      	adds	r0, #1
 80055b8:	f000 80a9 	beq.w	800570e <_svfiprintf_r+0x1c6>
 80055bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055be:	445a      	add	r2, fp
 80055c0:	9209      	str	r2, [sp, #36]	; 0x24
 80055c2:	f89a 3000 	ldrb.w	r3, [sl]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 80a1 	beq.w	800570e <_svfiprintf_r+0x1c6>
 80055cc:	2300      	movs	r3, #0
 80055ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d6:	f10a 0a01 	add.w	sl, sl, #1
 80055da:	9304      	str	r3, [sp, #16]
 80055dc:	9307      	str	r3, [sp, #28]
 80055de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80055e2:	931a      	str	r3, [sp, #104]	; 0x68
 80055e4:	4654      	mov	r4, sl
 80055e6:	2205      	movs	r2, #5
 80055e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ec:	4850      	ldr	r0, [pc, #320]	; (8005730 <_svfiprintf_r+0x1e8>)
 80055ee:	f7fa fdf7 	bl	80001e0 <memchr>
 80055f2:	9a04      	ldr	r2, [sp, #16]
 80055f4:	b9d8      	cbnz	r0, 800562e <_svfiprintf_r+0xe6>
 80055f6:	06d0      	lsls	r0, r2, #27
 80055f8:	bf44      	itt	mi
 80055fa:	2320      	movmi	r3, #32
 80055fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005600:	0711      	lsls	r1, r2, #28
 8005602:	bf44      	itt	mi
 8005604:	232b      	movmi	r3, #43	; 0x2b
 8005606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800560a:	f89a 3000 	ldrb.w	r3, [sl]
 800560e:	2b2a      	cmp	r3, #42	; 0x2a
 8005610:	d015      	beq.n	800563e <_svfiprintf_r+0xf6>
 8005612:	9a07      	ldr	r2, [sp, #28]
 8005614:	4654      	mov	r4, sl
 8005616:	2000      	movs	r0, #0
 8005618:	f04f 0c0a 	mov.w	ip, #10
 800561c:	4621      	mov	r1, r4
 800561e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005622:	3b30      	subs	r3, #48	; 0x30
 8005624:	2b09      	cmp	r3, #9
 8005626:	d94d      	bls.n	80056c4 <_svfiprintf_r+0x17c>
 8005628:	b1b0      	cbz	r0, 8005658 <_svfiprintf_r+0x110>
 800562a:	9207      	str	r2, [sp, #28]
 800562c:	e014      	b.n	8005658 <_svfiprintf_r+0x110>
 800562e:	eba0 0308 	sub.w	r3, r0, r8
 8005632:	fa09 f303 	lsl.w	r3, r9, r3
 8005636:	4313      	orrs	r3, r2
 8005638:	9304      	str	r3, [sp, #16]
 800563a:	46a2      	mov	sl, r4
 800563c:	e7d2      	b.n	80055e4 <_svfiprintf_r+0x9c>
 800563e:	9b03      	ldr	r3, [sp, #12]
 8005640:	1d19      	adds	r1, r3, #4
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	9103      	str	r1, [sp, #12]
 8005646:	2b00      	cmp	r3, #0
 8005648:	bfbb      	ittet	lt
 800564a:	425b      	neglt	r3, r3
 800564c:	f042 0202 	orrlt.w	r2, r2, #2
 8005650:	9307      	strge	r3, [sp, #28]
 8005652:	9307      	strlt	r3, [sp, #28]
 8005654:	bfb8      	it	lt
 8005656:	9204      	strlt	r2, [sp, #16]
 8005658:	7823      	ldrb	r3, [r4, #0]
 800565a:	2b2e      	cmp	r3, #46	; 0x2e
 800565c:	d10c      	bne.n	8005678 <_svfiprintf_r+0x130>
 800565e:	7863      	ldrb	r3, [r4, #1]
 8005660:	2b2a      	cmp	r3, #42	; 0x2a
 8005662:	d134      	bne.n	80056ce <_svfiprintf_r+0x186>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	1d1a      	adds	r2, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	9203      	str	r2, [sp, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	bfb8      	it	lt
 8005670:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005674:	3402      	adds	r4, #2
 8005676:	9305      	str	r3, [sp, #20]
 8005678:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005740 <_svfiprintf_r+0x1f8>
 800567c:	7821      	ldrb	r1, [r4, #0]
 800567e:	2203      	movs	r2, #3
 8005680:	4650      	mov	r0, sl
 8005682:	f7fa fdad 	bl	80001e0 <memchr>
 8005686:	b138      	cbz	r0, 8005698 <_svfiprintf_r+0x150>
 8005688:	9b04      	ldr	r3, [sp, #16]
 800568a:	eba0 000a 	sub.w	r0, r0, sl
 800568e:	2240      	movs	r2, #64	; 0x40
 8005690:	4082      	lsls	r2, r0
 8005692:	4313      	orrs	r3, r2
 8005694:	3401      	adds	r4, #1
 8005696:	9304      	str	r3, [sp, #16]
 8005698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800569c:	4825      	ldr	r0, [pc, #148]	; (8005734 <_svfiprintf_r+0x1ec>)
 800569e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056a2:	2206      	movs	r2, #6
 80056a4:	f7fa fd9c 	bl	80001e0 <memchr>
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d038      	beq.n	800571e <_svfiprintf_r+0x1d6>
 80056ac:	4b22      	ldr	r3, [pc, #136]	; (8005738 <_svfiprintf_r+0x1f0>)
 80056ae:	bb1b      	cbnz	r3, 80056f8 <_svfiprintf_r+0x1b0>
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	3307      	adds	r3, #7
 80056b4:	f023 0307 	bic.w	r3, r3, #7
 80056b8:	3308      	adds	r3, #8
 80056ba:	9303      	str	r3, [sp, #12]
 80056bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056be:	4433      	add	r3, r6
 80056c0:	9309      	str	r3, [sp, #36]	; 0x24
 80056c2:	e768      	b.n	8005596 <_svfiprintf_r+0x4e>
 80056c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c8:	460c      	mov	r4, r1
 80056ca:	2001      	movs	r0, #1
 80056cc:	e7a6      	b.n	800561c <_svfiprintf_r+0xd4>
 80056ce:	2300      	movs	r3, #0
 80056d0:	3401      	adds	r4, #1
 80056d2:	9305      	str	r3, [sp, #20]
 80056d4:	4619      	mov	r1, r3
 80056d6:	f04f 0c0a 	mov.w	ip, #10
 80056da:	4620      	mov	r0, r4
 80056dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056e0:	3a30      	subs	r2, #48	; 0x30
 80056e2:	2a09      	cmp	r2, #9
 80056e4:	d903      	bls.n	80056ee <_svfiprintf_r+0x1a6>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0c6      	beq.n	8005678 <_svfiprintf_r+0x130>
 80056ea:	9105      	str	r1, [sp, #20]
 80056ec:	e7c4      	b.n	8005678 <_svfiprintf_r+0x130>
 80056ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80056f2:	4604      	mov	r4, r0
 80056f4:	2301      	movs	r3, #1
 80056f6:	e7f0      	b.n	80056da <_svfiprintf_r+0x192>
 80056f8:	ab03      	add	r3, sp, #12
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	462a      	mov	r2, r5
 80056fe:	4b0f      	ldr	r3, [pc, #60]	; (800573c <_svfiprintf_r+0x1f4>)
 8005700:	a904      	add	r1, sp, #16
 8005702:	4638      	mov	r0, r7
 8005704:	f3af 8000 	nop.w
 8005708:	1c42      	adds	r2, r0, #1
 800570a:	4606      	mov	r6, r0
 800570c:	d1d6      	bne.n	80056bc <_svfiprintf_r+0x174>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	065b      	lsls	r3, r3, #25
 8005712:	f53f af2d 	bmi.w	8005570 <_svfiprintf_r+0x28>
 8005716:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005718:	b01d      	add	sp, #116	; 0x74
 800571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571e:	ab03      	add	r3, sp, #12
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	462a      	mov	r2, r5
 8005724:	4b05      	ldr	r3, [pc, #20]	; (800573c <_svfiprintf_r+0x1f4>)
 8005726:	a904      	add	r1, sp, #16
 8005728:	4638      	mov	r0, r7
 800572a:	f000 f879 	bl	8005820 <_printf_i>
 800572e:	e7eb      	b.n	8005708 <_svfiprintf_r+0x1c0>
 8005730:	08005bb0 	.word	0x08005bb0
 8005734:	08005bba 	.word	0x08005bba
 8005738:	00000000 	.word	0x00000000
 800573c:	08005495 	.word	0x08005495
 8005740:	08005bb6 	.word	0x08005bb6

08005744 <_printf_common>:
 8005744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005748:	4616      	mov	r6, r2
 800574a:	4699      	mov	r9, r3
 800574c:	688a      	ldr	r2, [r1, #8]
 800574e:	690b      	ldr	r3, [r1, #16]
 8005750:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005754:	4293      	cmp	r3, r2
 8005756:	bfb8      	it	lt
 8005758:	4613      	movlt	r3, r2
 800575a:	6033      	str	r3, [r6, #0]
 800575c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005760:	4607      	mov	r7, r0
 8005762:	460c      	mov	r4, r1
 8005764:	b10a      	cbz	r2, 800576a <_printf_common+0x26>
 8005766:	3301      	adds	r3, #1
 8005768:	6033      	str	r3, [r6, #0]
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	0699      	lsls	r1, r3, #26
 800576e:	bf42      	ittt	mi
 8005770:	6833      	ldrmi	r3, [r6, #0]
 8005772:	3302      	addmi	r3, #2
 8005774:	6033      	strmi	r3, [r6, #0]
 8005776:	6825      	ldr	r5, [r4, #0]
 8005778:	f015 0506 	ands.w	r5, r5, #6
 800577c:	d106      	bne.n	800578c <_printf_common+0x48>
 800577e:	f104 0a19 	add.w	sl, r4, #25
 8005782:	68e3      	ldr	r3, [r4, #12]
 8005784:	6832      	ldr	r2, [r6, #0]
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	42ab      	cmp	r3, r5
 800578a:	dc26      	bgt.n	80057da <_printf_common+0x96>
 800578c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005790:	1e13      	subs	r3, r2, #0
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	bf18      	it	ne
 8005796:	2301      	movne	r3, #1
 8005798:	0692      	lsls	r2, r2, #26
 800579a:	d42b      	bmi.n	80057f4 <_printf_common+0xb0>
 800579c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057a0:	4649      	mov	r1, r9
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	3001      	adds	r0, #1
 80057a8:	d01e      	beq.n	80057e8 <_printf_common+0xa4>
 80057aa:	6823      	ldr	r3, [r4, #0]
 80057ac:	6922      	ldr	r2, [r4, #16]
 80057ae:	f003 0306 	and.w	r3, r3, #6
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	bf02      	ittt	eq
 80057b6:	68e5      	ldreq	r5, [r4, #12]
 80057b8:	6833      	ldreq	r3, [r6, #0]
 80057ba:	1aed      	subeq	r5, r5, r3
 80057bc:	68a3      	ldr	r3, [r4, #8]
 80057be:	bf0c      	ite	eq
 80057c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c4:	2500      	movne	r5, #0
 80057c6:	4293      	cmp	r3, r2
 80057c8:	bfc4      	itt	gt
 80057ca:	1a9b      	subgt	r3, r3, r2
 80057cc:	18ed      	addgt	r5, r5, r3
 80057ce:	2600      	movs	r6, #0
 80057d0:	341a      	adds	r4, #26
 80057d2:	42b5      	cmp	r5, r6
 80057d4:	d11a      	bne.n	800580c <_printf_common+0xc8>
 80057d6:	2000      	movs	r0, #0
 80057d8:	e008      	b.n	80057ec <_printf_common+0xa8>
 80057da:	2301      	movs	r3, #1
 80057dc:	4652      	mov	r2, sl
 80057de:	4649      	mov	r1, r9
 80057e0:	4638      	mov	r0, r7
 80057e2:	47c0      	blx	r8
 80057e4:	3001      	adds	r0, #1
 80057e6:	d103      	bne.n	80057f0 <_printf_common+0xac>
 80057e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f0:	3501      	adds	r5, #1
 80057f2:	e7c6      	b.n	8005782 <_printf_common+0x3e>
 80057f4:	18e1      	adds	r1, r4, r3
 80057f6:	1c5a      	adds	r2, r3, #1
 80057f8:	2030      	movs	r0, #48	; 0x30
 80057fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057fe:	4422      	add	r2, r4
 8005800:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005804:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005808:	3302      	adds	r3, #2
 800580a:	e7c7      	b.n	800579c <_printf_common+0x58>
 800580c:	2301      	movs	r3, #1
 800580e:	4622      	mov	r2, r4
 8005810:	4649      	mov	r1, r9
 8005812:	4638      	mov	r0, r7
 8005814:	47c0      	blx	r8
 8005816:	3001      	adds	r0, #1
 8005818:	d0e6      	beq.n	80057e8 <_printf_common+0xa4>
 800581a:	3601      	adds	r6, #1
 800581c:	e7d9      	b.n	80057d2 <_printf_common+0x8e>
	...

08005820 <_printf_i>:
 8005820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005824:	7e0f      	ldrb	r7, [r1, #24]
 8005826:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005828:	2f78      	cmp	r7, #120	; 0x78
 800582a:	4691      	mov	r9, r2
 800582c:	4680      	mov	r8, r0
 800582e:	460c      	mov	r4, r1
 8005830:	469a      	mov	sl, r3
 8005832:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005836:	d807      	bhi.n	8005848 <_printf_i+0x28>
 8005838:	2f62      	cmp	r7, #98	; 0x62
 800583a:	d80a      	bhi.n	8005852 <_printf_i+0x32>
 800583c:	2f00      	cmp	r7, #0
 800583e:	f000 80d4 	beq.w	80059ea <_printf_i+0x1ca>
 8005842:	2f58      	cmp	r7, #88	; 0x58
 8005844:	f000 80c0 	beq.w	80059c8 <_printf_i+0x1a8>
 8005848:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800584c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005850:	e03a      	b.n	80058c8 <_printf_i+0xa8>
 8005852:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005856:	2b15      	cmp	r3, #21
 8005858:	d8f6      	bhi.n	8005848 <_printf_i+0x28>
 800585a:	a101      	add	r1, pc, #4	; (adr r1, 8005860 <_printf_i+0x40>)
 800585c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005860:	080058b9 	.word	0x080058b9
 8005864:	080058cd 	.word	0x080058cd
 8005868:	08005849 	.word	0x08005849
 800586c:	08005849 	.word	0x08005849
 8005870:	08005849 	.word	0x08005849
 8005874:	08005849 	.word	0x08005849
 8005878:	080058cd 	.word	0x080058cd
 800587c:	08005849 	.word	0x08005849
 8005880:	08005849 	.word	0x08005849
 8005884:	08005849 	.word	0x08005849
 8005888:	08005849 	.word	0x08005849
 800588c:	080059d1 	.word	0x080059d1
 8005890:	080058f9 	.word	0x080058f9
 8005894:	0800598b 	.word	0x0800598b
 8005898:	08005849 	.word	0x08005849
 800589c:	08005849 	.word	0x08005849
 80058a0:	080059f3 	.word	0x080059f3
 80058a4:	08005849 	.word	0x08005849
 80058a8:	080058f9 	.word	0x080058f9
 80058ac:	08005849 	.word	0x08005849
 80058b0:	08005849 	.word	0x08005849
 80058b4:	08005993 	.word	0x08005993
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	1d1a      	adds	r2, r3, #4
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	602a      	str	r2, [r5, #0]
 80058c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058c8:	2301      	movs	r3, #1
 80058ca:	e09f      	b.n	8005a0c <_printf_i+0x1ec>
 80058cc:	6820      	ldr	r0, [r4, #0]
 80058ce:	682b      	ldr	r3, [r5, #0]
 80058d0:	0607      	lsls	r7, r0, #24
 80058d2:	f103 0104 	add.w	r1, r3, #4
 80058d6:	6029      	str	r1, [r5, #0]
 80058d8:	d501      	bpl.n	80058de <_printf_i+0xbe>
 80058da:	681e      	ldr	r6, [r3, #0]
 80058dc:	e003      	b.n	80058e6 <_printf_i+0xc6>
 80058de:	0646      	lsls	r6, r0, #25
 80058e0:	d5fb      	bpl.n	80058da <_printf_i+0xba>
 80058e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	da03      	bge.n	80058f2 <_printf_i+0xd2>
 80058ea:	232d      	movs	r3, #45	; 0x2d
 80058ec:	4276      	negs	r6, r6
 80058ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f2:	485a      	ldr	r0, [pc, #360]	; (8005a5c <_printf_i+0x23c>)
 80058f4:	230a      	movs	r3, #10
 80058f6:	e012      	b.n	800591e <_printf_i+0xfe>
 80058f8:	682b      	ldr	r3, [r5, #0]
 80058fa:	6820      	ldr	r0, [r4, #0]
 80058fc:	1d19      	adds	r1, r3, #4
 80058fe:	6029      	str	r1, [r5, #0]
 8005900:	0605      	lsls	r5, r0, #24
 8005902:	d501      	bpl.n	8005908 <_printf_i+0xe8>
 8005904:	681e      	ldr	r6, [r3, #0]
 8005906:	e002      	b.n	800590e <_printf_i+0xee>
 8005908:	0641      	lsls	r1, r0, #25
 800590a:	d5fb      	bpl.n	8005904 <_printf_i+0xe4>
 800590c:	881e      	ldrh	r6, [r3, #0]
 800590e:	4853      	ldr	r0, [pc, #332]	; (8005a5c <_printf_i+0x23c>)
 8005910:	2f6f      	cmp	r7, #111	; 0x6f
 8005912:	bf0c      	ite	eq
 8005914:	2308      	moveq	r3, #8
 8005916:	230a      	movne	r3, #10
 8005918:	2100      	movs	r1, #0
 800591a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800591e:	6865      	ldr	r5, [r4, #4]
 8005920:	60a5      	str	r5, [r4, #8]
 8005922:	2d00      	cmp	r5, #0
 8005924:	bfa2      	ittt	ge
 8005926:	6821      	ldrge	r1, [r4, #0]
 8005928:	f021 0104 	bicge.w	r1, r1, #4
 800592c:	6021      	strge	r1, [r4, #0]
 800592e:	b90e      	cbnz	r6, 8005934 <_printf_i+0x114>
 8005930:	2d00      	cmp	r5, #0
 8005932:	d04b      	beq.n	80059cc <_printf_i+0x1ac>
 8005934:	4615      	mov	r5, r2
 8005936:	fbb6 f1f3 	udiv	r1, r6, r3
 800593a:	fb03 6711 	mls	r7, r3, r1, r6
 800593e:	5dc7      	ldrb	r7, [r0, r7]
 8005940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005944:	4637      	mov	r7, r6
 8005946:	42bb      	cmp	r3, r7
 8005948:	460e      	mov	r6, r1
 800594a:	d9f4      	bls.n	8005936 <_printf_i+0x116>
 800594c:	2b08      	cmp	r3, #8
 800594e:	d10b      	bne.n	8005968 <_printf_i+0x148>
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	07de      	lsls	r6, r3, #31
 8005954:	d508      	bpl.n	8005968 <_printf_i+0x148>
 8005956:	6923      	ldr	r3, [r4, #16]
 8005958:	6861      	ldr	r1, [r4, #4]
 800595a:	4299      	cmp	r1, r3
 800595c:	bfde      	ittt	le
 800595e:	2330      	movle	r3, #48	; 0x30
 8005960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005964:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005968:	1b52      	subs	r2, r2, r5
 800596a:	6122      	str	r2, [r4, #16]
 800596c:	f8cd a000 	str.w	sl, [sp]
 8005970:	464b      	mov	r3, r9
 8005972:	aa03      	add	r2, sp, #12
 8005974:	4621      	mov	r1, r4
 8005976:	4640      	mov	r0, r8
 8005978:	f7ff fee4 	bl	8005744 <_printf_common>
 800597c:	3001      	adds	r0, #1
 800597e:	d14a      	bne.n	8005a16 <_printf_i+0x1f6>
 8005980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005984:	b004      	add	sp, #16
 8005986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	f043 0320 	orr.w	r3, r3, #32
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	4833      	ldr	r0, [pc, #204]	; (8005a60 <_printf_i+0x240>)
 8005994:	2778      	movs	r7, #120	; 0x78
 8005996:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800599a:	6823      	ldr	r3, [r4, #0]
 800599c:	6829      	ldr	r1, [r5, #0]
 800599e:	061f      	lsls	r7, r3, #24
 80059a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80059a4:	d402      	bmi.n	80059ac <_printf_i+0x18c>
 80059a6:	065f      	lsls	r7, r3, #25
 80059a8:	bf48      	it	mi
 80059aa:	b2b6      	uxthmi	r6, r6
 80059ac:	07df      	lsls	r7, r3, #31
 80059ae:	bf48      	it	mi
 80059b0:	f043 0320 	orrmi.w	r3, r3, #32
 80059b4:	6029      	str	r1, [r5, #0]
 80059b6:	bf48      	it	mi
 80059b8:	6023      	strmi	r3, [r4, #0]
 80059ba:	b91e      	cbnz	r6, 80059c4 <_printf_i+0x1a4>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	f023 0320 	bic.w	r3, r3, #32
 80059c2:	6023      	str	r3, [r4, #0]
 80059c4:	2310      	movs	r3, #16
 80059c6:	e7a7      	b.n	8005918 <_printf_i+0xf8>
 80059c8:	4824      	ldr	r0, [pc, #144]	; (8005a5c <_printf_i+0x23c>)
 80059ca:	e7e4      	b.n	8005996 <_printf_i+0x176>
 80059cc:	4615      	mov	r5, r2
 80059ce:	e7bd      	b.n	800594c <_printf_i+0x12c>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	6826      	ldr	r6, [r4, #0]
 80059d4:	6961      	ldr	r1, [r4, #20]
 80059d6:	1d18      	adds	r0, r3, #4
 80059d8:	6028      	str	r0, [r5, #0]
 80059da:	0635      	lsls	r5, r6, #24
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	d501      	bpl.n	80059e4 <_printf_i+0x1c4>
 80059e0:	6019      	str	r1, [r3, #0]
 80059e2:	e002      	b.n	80059ea <_printf_i+0x1ca>
 80059e4:	0670      	lsls	r0, r6, #25
 80059e6:	d5fb      	bpl.n	80059e0 <_printf_i+0x1c0>
 80059e8:	8019      	strh	r1, [r3, #0]
 80059ea:	2300      	movs	r3, #0
 80059ec:	6123      	str	r3, [r4, #16]
 80059ee:	4615      	mov	r5, r2
 80059f0:	e7bc      	b.n	800596c <_printf_i+0x14c>
 80059f2:	682b      	ldr	r3, [r5, #0]
 80059f4:	1d1a      	adds	r2, r3, #4
 80059f6:	602a      	str	r2, [r5, #0]
 80059f8:	681d      	ldr	r5, [r3, #0]
 80059fa:	6862      	ldr	r2, [r4, #4]
 80059fc:	2100      	movs	r1, #0
 80059fe:	4628      	mov	r0, r5
 8005a00:	f7fa fbee 	bl	80001e0 <memchr>
 8005a04:	b108      	cbz	r0, 8005a0a <_printf_i+0x1ea>
 8005a06:	1b40      	subs	r0, r0, r5
 8005a08:	6060      	str	r0, [r4, #4]
 8005a0a:	6863      	ldr	r3, [r4, #4]
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a14:	e7aa      	b.n	800596c <_printf_i+0x14c>
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	462a      	mov	r2, r5
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	47d0      	blx	sl
 8005a20:	3001      	adds	r0, #1
 8005a22:	d0ad      	beq.n	8005980 <_printf_i+0x160>
 8005a24:	6823      	ldr	r3, [r4, #0]
 8005a26:	079b      	lsls	r3, r3, #30
 8005a28:	d413      	bmi.n	8005a52 <_printf_i+0x232>
 8005a2a:	68e0      	ldr	r0, [r4, #12]
 8005a2c:	9b03      	ldr	r3, [sp, #12]
 8005a2e:	4298      	cmp	r0, r3
 8005a30:	bfb8      	it	lt
 8005a32:	4618      	movlt	r0, r3
 8005a34:	e7a6      	b.n	8005984 <_printf_i+0x164>
 8005a36:	2301      	movs	r3, #1
 8005a38:	4632      	mov	r2, r6
 8005a3a:	4649      	mov	r1, r9
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	47d0      	blx	sl
 8005a40:	3001      	adds	r0, #1
 8005a42:	d09d      	beq.n	8005980 <_printf_i+0x160>
 8005a44:	3501      	adds	r5, #1
 8005a46:	68e3      	ldr	r3, [r4, #12]
 8005a48:	9903      	ldr	r1, [sp, #12]
 8005a4a:	1a5b      	subs	r3, r3, r1
 8005a4c:	42ab      	cmp	r3, r5
 8005a4e:	dcf2      	bgt.n	8005a36 <_printf_i+0x216>
 8005a50:	e7eb      	b.n	8005a2a <_printf_i+0x20a>
 8005a52:	2500      	movs	r5, #0
 8005a54:	f104 0619 	add.w	r6, r4, #25
 8005a58:	e7f5      	b.n	8005a46 <_printf_i+0x226>
 8005a5a:	bf00      	nop
 8005a5c:	08005bc1 	.word	0x08005bc1
 8005a60:	08005bd2 	.word	0x08005bd2

08005a64 <memmove>:
 8005a64:	4288      	cmp	r0, r1
 8005a66:	b510      	push	{r4, lr}
 8005a68:	eb01 0402 	add.w	r4, r1, r2
 8005a6c:	d902      	bls.n	8005a74 <memmove+0x10>
 8005a6e:	4284      	cmp	r4, r0
 8005a70:	4623      	mov	r3, r4
 8005a72:	d807      	bhi.n	8005a84 <memmove+0x20>
 8005a74:	1e43      	subs	r3, r0, #1
 8005a76:	42a1      	cmp	r1, r4
 8005a78:	d008      	beq.n	8005a8c <memmove+0x28>
 8005a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a82:	e7f8      	b.n	8005a76 <memmove+0x12>
 8005a84:	4402      	add	r2, r0
 8005a86:	4601      	mov	r1, r0
 8005a88:	428a      	cmp	r2, r1
 8005a8a:	d100      	bne.n	8005a8e <memmove+0x2a>
 8005a8c:	bd10      	pop	{r4, pc}
 8005a8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a96:	e7f7      	b.n	8005a88 <memmove+0x24>

08005a98 <_sbrk_r>:
 8005a98:	b538      	push	{r3, r4, r5, lr}
 8005a9a:	4d06      	ldr	r5, [pc, #24]	; (8005ab4 <_sbrk_r+0x1c>)
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	602b      	str	r3, [r5, #0]
 8005aa4:	f7fb fb42 	bl	800112c <_sbrk>
 8005aa8:	1c43      	adds	r3, r0, #1
 8005aaa:	d102      	bne.n	8005ab2 <_sbrk_r+0x1a>
 8005aac:	682b      	ldr	r3, [r5, #0]
 8005aae:	b103      	cbz	r3, 8005ab2 <_sbrk_r+0x1a>
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	bd38      	pop	{r3, r4, r5, pc}
 8005ab4:	200005a8 	.word	0x200005a8

08005ab8 <memcpy>:
 8005ab8:	440a      	add	r2, r1
 8005aba:	4291      	cmp	r1, r2
 8005abc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ac0:	d100      	bne.n	8005ac4 <memcpy+0xc>
 8005ac2:	4770      	bx	lr
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ace:	4291      	cmp	r1, r2
 8005ad0:	d1f9      	bne.n	8005ac6 <memcpy+0xe>
 8005ad2:	bd10      	pop	{r4, pc}

08005ad4 <_realloc_r>:
 8005ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4614      	mov	r4, r2
 8005adc:	460e      	mov	r6, r1
 8005ade:	b921      	cbnz	r1, 8005aea <_realloc_r+0x16>
 8005ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	f7ff bc49 	b.w	800537c <_malloc_r>
 8005aea:	b92a      	cbnz	r2, 8005af8 <_realloc_r+0x24>
 8005aec:	f7ff fbda 	bl	80052a4 <_free_r>
 8005af0:	4625      	mov	r5, r4
 8005af2:	4628      	mov	r0, r5
 8005af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af8:	f000 f81b 	bl	8005b32 <_malloc_usable_size_r>
 8005afc:	4284      	cmp	r4, r0
 8005afe:	4607      	mov	r7, r0
 8005b00:	d802      	bhi.n	8005b08 <_realloc_r+0x34>
 8005b02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b06:	d812      	bhi.n	8005b2e <_realloc_r+0x5a>
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f7ff fc36 	bl	800537c <_malloc_r>
 8005b10:	4605      	mov	r5, r0
 8005b12:	2800      	cmp	r0, #0
 8005b14:	d0ed      	beq.n	8005af2 <_realloc_r+0x1e>
 8005b16:	42bc      	cmp	r4, r7
 8005b18:	4622      	mov	r2, r4
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	bf28      	it	cs
 8005b1e:	463a      	movcs	r2, r7
 8005b20:	f7ff ffca 	bl	8005ab8 <memcpy>
 8005b24:	4631      	mov	r1, r6
 8005b26:	4640      	mov	r0, r8
 8005b28:	f7ff fbbc 	bl	80052a4 <_free_r>
 8005b2c:	e7e1      	b.n	8005af2 <_realloc_r+0x1e>
 8005b2e:	4635      	mov	r5, r6
 8005b30:	e7df      	b.n	8005af2 <_realloc_r+0x1e>

08005b32 <_malloc_usable_size_r>:
 8005b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b36:	1f18      	subs	r0, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	bfbc      	itt	lt
 8005b3c:	580b      	ldrlt	r3, [r1, r0]
 8005b3e:	18c0      	addlt	r0, r0, r3
 8005b40:	4770      	bx	lr
	...

08005b44 <_init>:
 8005b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b46:	bf00      	nop
 8005b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4a:	bc08      	pop	{r3}
 8005b4c:	469e      	mov	lr, r3
 8005b4e:	4770      	bx	lr

08005b50 <_fini>:
 8005b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b52:	bf00      	nop
 8005b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b56:	bc08      	pop	{r3}
 8005b58:	469e      	mov	lr, r3
 8005b5a:	4770      	bx	lr
